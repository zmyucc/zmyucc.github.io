<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>分支和循环练习</title>
    <url>/posts/250ec2ff.html</url>
    <content><![CDATA[<h3 id="将三个数字从小到大输出"><a href="#将三个数字从小到大输出" class="headerlink" title="将三个数字从小到大输出"></a>将三个数字从小到大输出</h3><p>算法实现：a中放最大值，b中间值，c最小值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a,b,c,max;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入三个数字：-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d,%d,%d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">    <span class="keyword">if</span> (a&lt;b) &#123;</span><br><span class="line">        max = b;</span><br><span class="line">        b = a;</span><br><span class="line">        a = max;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a&lt;c) &#123;</span><br><span class="line">        max = c;</span><br><span class="line">        c = a;</span><br><span class="line">        a = max;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (b&lt;c) &#123;</span><br><span class="line">        max = c;</span><br><span class="line">        c = b;</span><br><span class="line">        b = max;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%d,%d&quot;</span>,a,b,c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h3 id="输出1-100内3的倍数"><a href="#输出1-100内3的倍数" class="headerlink" title="输出1-100内3的倍数"></a>输出1-100内3的倍数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=<span class="number">100</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i%<span class="number">3</span>==<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d,&quot;</span>,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="求两个数的最大公约数"><a href="#求两个数的最大公约数" class="headerlink" title="求两个数的最大公约数"></a>求两个数的最大公约数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> m = <span class="number">12</span>;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">8</span>;</span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line">    <span class="keyword">while</span> (m % n) &#123;</span><br><span class="line">        r = m % n;</span><br><span class="line">        m = n;</span><br><span class="line">        n = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="打印1000-2000之间的闰年"><a href="#打印1000-2000之间的闰年" class="headerlink" title="打印1000-2000之间的闰年"></a>打印1000-2000之间的闰年</h3><p>闰年的计算方法‌：每四年一个闰年，但整百年份必须是400的倍数才是闰年。例如，2000年是闰年，而1900年则是平年。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a,b,c;</span><br><span class="line">    <span class="keyword">for</span> (a = <span class="number">1000</span>; a &lt;= <span class="number">2000</span>; a++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((a % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; a % <span class="number">100</span> != <span class="number">0</span> )|| a % <span class="number">400</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d,&quot;</span>,a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="打印100-200之间的素数"><a href="#打印100-200之间的素数" class="headerlink" title="打印100-200之间的素数"></a>打印100-200之间的素数</h3><p>质数又称素数。指在一个大于1的自然数中，除了1和此整数自身外，没法被其他自然数整除的数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a,b,c,d;    </span><br><span class="line">    <span class="keyword">for</span> (a=<span class="number">100</span>; a&lt;=<span class="number">200</span>; a++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (b=<span class="number">2</span>; b&lt;a; b++) &#123;            </span><br><span class="line">            <span class="keyword">if</span> ( a%b == <span class="number">0</span> ) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span> (b == a) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="计算1-100之间出现数字9的个数"><a href="#计算1-100之间出现数字9的个数" class="headerlink" title="计算1-100之间出现数字9的个数"></a>计算1-100之间出现数字9的个数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> a,b,c;</span><br><span class="line">    <span class="keyword">for</span> (a = <span class="number">1</span>; a&lt;=<span class="number">100</span>; a++) &#123;</span><br><span class="line">        <span class="comment">//求a的十位数字</span></span><br><span class="line">        b = a / <span class="number">10</span>;</span><br><span class="line"><span class="comment">//        printf(&quot;%d,&quot;,b);</span></span><br><span class="line">        <span class="comment">//求a的个位数字</span></span><br><span class="line">        c = a % <span class="number">10</span>;</span><br><span class="line"><span class="comment">//        printf(&quot;%d**\n**&quot;,c);</span></span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">9</span>) &#123;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">9</span>) &#123;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>想求一个数字的十位数字就用这个数字&#x2F;10，想求它的个位数字就%10。</p>
<h3 id="分数求和"><a href="#分数求和" class="headerlink" title="分数求和"></a>分数求和</h3><p>计算1&#x2F;1 - 1&#x2F;2 + 1&#x2F;3 - 1&#x2F;4 + 1&#x2F;5 …. + 1&#x2F;99 - 1&#x2F;100</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">float</span> a,c;</span><br><span class="line">    <span class="type">float</span> f = <span class="number">0.0</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> d = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (a = <span class="number">1</span>; a &lt;= <span class="number">100</span>; a++) &#123;</span><br><span class="line">        c = b/a;</span><br><span class="line"><span class="comment">//      printf(&quot;%f&quot;,c);</span></span><br><span class="line">        d++;</span><br><span class="line">        <span class="keyword">if</span> (d%<span class="number">2</span>==<span class="number">0</span>) &#123;</span><br><span class="line">            f = f + c;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            f = f - c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%f&quot;</span>,f);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="求10个整数中的最大值"><a href="#求10个整数中的最大值" class="headerlink" title="求10个整数中的最大值"></a>求10个整数中的最大值</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">-12</span>,<span class="number">-23</span>,<span class="number">-43</span>,<span class="number">-21</span>,<span class="number">-34</span>,<span class="number">-74</span>,<span class="number">-24</span>,<span class="number">-53</span>,<span class="number">-4435</span>,<span class="number">-33</span>&#125;;<span class="comment">//先定义十个整数</span></span><br><span class="line">    <span class="type">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt;= max) &#123;</span><br><span class="line">            max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,max);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="乘法口诀表"><a href="#乘法口诀表" class="headerlink" title="乘法口诀表"></a>乘法口诀表</h3><p>在屏幕上打印9*9乘法口诀表<br>1*1&#x3D;1<br>1*2&#x3D;2 2*2&#x3D;4<br>1*3&#x3D;3 2*3&#x3D;6  3*3&#x3D;9<br>1*4&#x3D;4 2*4&#x3D;8  3*4&#x3D;12  4*4&#x3D;16<br>1*5&#x3D;5 2*5&#x3D;10 3*5&#x3D;15 4*5&#x3D;20 5*5&#x3D;25<br>1*6&#x3D;6 2*6&#x3D;12 3*6&#x3D;18 4*6&#x3D;24 5*6&#x3D;30 6*6&#x3D;36<br>1*7&#x3D;7 2*7&#x3D;14 3*7&#x3D;21 4*7&#x3D;28 5*7&#x3D;35 6*7&#x3D;42 7*7&#x3D;49<br>1*8&#x3D;8 2*8&#x3D;16 3*8&#x3D;24 4*8&#x3D;32 5*8&#x3D;40 6*8&#x3D;48 7*8&#x3D;56 8*8&#x3D;64<br>1*9&#x3D;9 2*9&#x3D;18 3*9&#x3D;27 4*9&#x3D;36 5*9&#x3D;45 6*9&#x3D;54 7*9&#x3D;63 8*9&#x3D;72 9*9&#x3D;81</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> x,y,a;</span><br><span class="line">    <span class="keyword">for</span> (y=<span class="number">1</span>; y&lt;=<span class="number">9</span>; y++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (x=<span class="number">1</span>; x&lt;=<span class="number">9</span>; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (y&gt;=x) &#123;</span><br><span class="line">                a = x * y;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d*%d=%-2d &quot;</span>,x,y,a);<span class="comment">//%-2d代表打印2位，不够2位补空格，负号代表左对齐，不带负号就是右对齐。</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (y==x) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>printf(&quot;%d*%d=%-2d &quot;,x,y,a);</code>，<code>-2d</code>代表打印2位，不够2位补空格，负号代表左对齐，不带负号就是右对齐。</p>
<h3 id="猜数字游戏"><a href="#猜数字游戏" class="headerlink" title="猜数字游戏"></a>猜数字游戏</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;************************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;***  1.play  0.exit  ***\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;************************\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">game</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//1、生成随机数</span></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    <span class="type">int</span> guess = <span class="number">0</span>;</span><br><span class="line">    ret = rand()%<span class="number">100</span>+<span class="number">1</span>;<span class="comment">//生成1-100之间的随机数。</span></span><br><span class="line"><span class="comment">//  printf(&quot;%d**\n**&quot;,ret);//打印生成的随机数</span></span><br><span class="line">    <span class="comment">//2、猜数字</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请猜数字：-&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;guess);</span><br><span class="line">        <span class="keyword">if</span> (guess &gt; ret) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;猜大了\n&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(guess &lt; ret)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;猜小了\n&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;猜对了\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line">    srand((<span class="type">unsigned</span> <span class="type">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="comment">//用时间戳来设置随机数生成起点，一直在变化</span></span><br><span class="line">    <span class="comment">//time函数</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        menu();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请选择：-&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;input);</span><br><span class="line">        <span class="keyword">switch</span> (input) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                game();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;退出游戏\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;选择错误\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (input);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>srand((unsigned int)time(NULL));</code>生成随机数。<br>使用time函数，用时间戳来设置随机数生成起点，这可以让数字一直在变化。<br><code>ret = rand()%100+1;</code>使生成的随机数在1-100之间。</p>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言实现扫雷</title>
    <url>/posts/7758abcf.html</url>
    <content><![CDATA[<p>main.c</p>
<span id="more"></span>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;game.h&quot;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;***************************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;***   1.Play   0.Exit   ***\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;***************************\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">game</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//1、布置雷的信息</span></span><br><span class="line">    <span class="type">char</span> mine[ROWS][COLS] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">//2、排雷</span></span><br><span class="line">    <span class="type">char</span> show[ROWS][COLS] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">//3、初始化</span></span><br><span class="line">    Init_Board(mine,ROWS,COLS,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    Init_Board(show,ROWS,COLS,<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="comment">//打印棋盘</span></span><br><span class="line">    DisplayBoard(show,ROW,COL);</span><br><span class="line">    <span class="comment">//布置雷</span></span><br><span class="line">    SetMine(mine,ROW,COL);</span><br><span class="line">    <span class="comment">//DisplayBoard(mine,ROW,COL);</span></span><br><span class="line">    <span class="comment">//扫雷</span></span><br><span class="line">    FindMine(mine,show,ROW,COL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line">    srand((<span class="type">unsigned</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        menu();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请选择：-&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;input);</span><br><span class="line">        <span class="keyword">switch</span> (input) </span><br><span class="line">       &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                game();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;退出游戏\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;输入错误，请重新输入\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (input);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    test();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>game.h</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ROW 9</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> COL 9</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROWS ROW+2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> COLS COL+2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EASY_COUNT 10</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Init_Board</span><span class="params">(<span class="type">char</span> board[ROWS][COLS],<span class="type">int</span> rows,<span class="type">int</span> cols,<span class="type">char</span> <span class="built_in">set</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">DisplayBoard</span><span class="params">(<span class="type">char</span> board[ROWS][COLS],<span class="type">int</span> row,<span class="type">int</span> col)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SetMine</span><span class="params">(<span class="type">char</span> board[ROWS][COLS],<span class="type">int</span> row,<span class="type">int</span> col)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">FindMine</span><span class="params">(<span class="type">char</span> mine[ROWS][COLS],<span class="type">char</span> show[ROWS][COLS],<span class="type">int</span> row,<span class="type">int</span> col)</span>;</span><br></pre></td></tr></table></figure>

<p>game.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;game.h&quot;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Init_Board</span><span class="params">(<span class="type">char</span> board[ROWS][COLS],<span class="type">int</span> rows,<span class="type">int</span> cols,<span class="type">char</span> <span class="built_in">set</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;rows; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;cols; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            board[i][j] = <span class="built_in">set</span>;<span class="comment">//初始化成0和*</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DisplayBoard</span><span class="params">(<span class="type">char</span> board[ROWS][COLS],<span class="type">int</span> row,<span class="type">int</span> col)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//打印列号</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;=col; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= row; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);</span><br><span class="line">        <span class="keyword">for</span> (j =<span class="number">1</span>; j &lt;= col; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>,board[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">SetMine</span><span class="params">(<span class="type">char</span> board[ROWS][COLS],<span class="type">int</span> row,<span class="type">int</span> col)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> count = EASY_COUNT;</span><br><span class="line">    <span class="keyword">while</span> (count) &#123;</span><br><span class="line">        <span class="comment">//布置雷</span></span><br><span class="line">        <span class="type">int</span> x = rand()%row+<span class="number">1</span>;<span class="comment">//生成一个1-9之间的数字</span></span><br><span class="line">        <span class="type">int</span> y = rand()%col+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (board[x][y] == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            board[x][y] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">            count--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&#x27;1&#x27;-&#x27;0&#x27; = 1,字符1-字符0就是数字1（根据ASCII码）</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">get_mine_count</span><span class="params">(<span class="type">char</span>** mine[ROWS][COLS],<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> mine[x<span class="number">-1</span>][y<span class="number">-1</span>] +</span><br><span class="line">    mine[x][y<span class="number">-1</span>] +</span><br><span class="line">    mine[x+<span class="number">1</span>][y<span class="number">-1</span>] +</span><br><span class="line">    mine[x<span class="number">-1</span>][y] +</span><br><span class="line">    mine[x+<span class="number">1</span>][y] +</span><br><span class="line">    mine[x<span class="number">-1</span>][y+<span class="number">1</span>] +</span><br><span class="line">    mine[x][y+<span class="number">1</span>] +</span><br><span class="line">    mine[x+<span class="number">1</span>][y+<span class="number">1</span>] - <span class="number">8</span>*<span class="string">&#x27;0&#x27;</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">FindMine</span><span class="params">(<span class="type">char</span> mine[ROWS][COLS],<span class="type">char</span> show[ROWS][COLS],<span class="type">int</span> row,<span class="type">int</span> col)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> win = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (win &lt; row*col-EASY_COUNT)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入坐标-&gt;:&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">        <span class="keyword">if</span> (x&gt;=<span class="number">1</span> &amp;&amp; x&lt;=row &amp;&amp; y&gt;=<span class="number">1</span> &amp;&amp; y&lt;=col)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//坐标合法</span></span><br><span class="line">            <span class="comment">//踩雷了</span></span><br><span class="line">            <span class="keyword">if</span> (mine[x][y] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;踩雷了\n&quot;</span>);</span><br><span class="line">                DisplayBoard(mine, row, col);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//没踩雷，计算x,y坐标周围有几个雷</span></span><br><span class="line">                <span class="type">int</span> count = get_mine_count(mine,x,y);</span><br><span class="line">                show[x][y] = count +<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                DisplayBoard(show, row, col);</span><br><span class="line">                win++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;坐标非法\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (win == row*col-EASY_COUNT)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;赢了\n&quot;</span>);</span><br><span class="line">        DisplayBoard(mine, row, col);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言实现三字棋</title>
    <url>/posts/d9fcdcdf.html</url>
    <content><![CDATA[<p>main.c</p>
<span id="more"></span>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;game.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;***************************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;***   1.Play   2.Exit   ***\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;***************************\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">game</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//游戏的实现。</span></span><br><span class="line">    <span class="comment">//先创建一个数组，存放棋盘信息</span></span><br><span class="line">    <span class="type">char</span> board[ROW][COL] = &#123;<span class="number">0</span>&#125;;<span class="comment">//全部是空格</span></span><br><span class="line">    <span class="type">char</span> ret = <span class="number">0</span>;</span><br><span class="line">    InitBoard(board,ROW,COL);</span><br><span class="line">    <span class="comment">//打印棋盘，效果：</span></span><br><span class="line">    <span class="comment">//   |   |</span></span><br><span class="line">    <span class="comment">//---|---|---</span></span><br><span class="line">    <span class="comment">//   |   |</span></span><br><span class="line">    <span class="comment">//---|---|---</span></span><br><span class="line">    <span class="comment">//   |   |</span></span><br><span class="line">    DisplayBoard(board,ROW,COL);</span><br><span class="line">    <span class="comment">//下棋</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//玩家先下棋</span></span><br><span class="line">        PlayerMove(board,ROW,COL);</span><br><span class="line">        DisplayBoard(board,ROW,COL);</span><br><span class="line">        <span class="comment">//判读玩家是否赢,四种情况：玩家赢（*），电脑赢（#），平局（Q），游戏继续（C）</span></span><br><span class="line">        ret = Is_Win(board,ROW,COL);</span><br><span class="line">        <span class="keyword">if</span> (ret != <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//电脑下棋</span></span><br><span class="line">        ComputerMove(board,ROW,COL);</span><br><span class="line">        DisplayBoard(board,ROW,COL);</span><br><span class="line">        <span class="comment">//判读电脑是否赢</span></span><br><span class="line">        ret = Is_Win(board,ROW,COL);</span><br><span class="line">        <span class="keyword">if</span> (ret != <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;玩家赢\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ret == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;电脑赢\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;平局\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line">    srand((<span class="type">unsigned</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="keyword">do</span> </span><br><span class="line">    &#123;</span><br><span class="line">        menu();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入：-&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;input);</span><br><span class="line">        <span class="keyword">switch</span> (input) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                game();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;退出游戏\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;输入错误，请重新输入。\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (input);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">    test();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>game.h</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ROW 3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> COL 3</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数声明</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitBoard</span><span class="params">(<span class="type">char</span> board[ROW][COL],<span class="type">int</span> row,<span class="type">int</span> col)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">DisplayBoard</span><span class="params">(<span class="type">char</span> board[ROW][COL],<span class="type">int</span> row,<span class="type">int</span> col)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">PlayerMove</span><span class="params">(<span class="type">char</span> board[ROW][COL],<span class="type">int</span> row,<span class="type">int</span> col)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">ComputerMove</span><span class="params">(<span class="type">char</span> board[ROW][COL],<span class="type">int</span> row,<span class="type">int</span> col)</span>;</span><br><span class="line"><span class="type">char</span> <span class="title function_">Is_Win</span><span class="params">(<span class="type">char</span> board[ROW][COL],<span class="type">int</span> row,<span class="type">int</span> col)</span>;</span><br></pre></td></tr></table></figure>
<p>game.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;game.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitBoard</span><span class="params">(<span class="type">char</span> board[ROW][COL],<span class="type">int</span> row,<span class="type">int</span> col)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;row; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j&lt;col; j++) </span><br><span class="line">        &#123;</span><br><span class="line">            board[i][j] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="type">void</span> <span class="title function_">DisplayBoard</span><span class="params">(<span class="type">char</span> board[ROW][COL],<span class="type">int</span> row,<span class="type">int</span> col)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//打印棋盘，效果：</span></span><br><span class="line">    <span class="comment">//   |   |</span></span><br><span class="line">    <span class="comment">//---|---|---</span></span><br><span class="line">    <span class="comment">//   |   |</span></span><br><span class="line">    <span class="comment">//---|---|---</span></span><br><span class="line">    <span class="comment">//   |   |</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;row; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//1、打印一行的数据</span></span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j&lt;col; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; %c &quot;</span>,board[i][j]);</span><br><span class="line">            <span class="keyword">if</span> (j &lt; col - <span class="number">1</span>) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;|&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            <span class="comment">//2、打印分割行</span></span><br><span class="line">            <span class="keyword">if</span> (i&lt;row<span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; col; j++) </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;---&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (j&lt;col<span class="number">-1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;|&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"><span class="type">void</span> <span class="title function_">PlayerMove</span><span class="params">(<span class="type">char</span> board[ROW][COL],<span class="type">int</span> row,<span class="type">int</span> col)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;玩家走&quot;</span>);</span><br><span class="line">    <span class="comment">//判断x,y坐标的合法性</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入坐标：-&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">        <span class="keyword">if</span>(x&gt;=<span class="number">1</span> &amp;&amp; x&lt;=row &amp;&amp; y&gt;=<span class="number">1</span> &amp;&amp;y&lt;= col)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(board[x<span class="number">-1</span>][y<span class="number">-1</span>] == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                board[x<span class="number">-1</span>][y<span class="number">-1</span>] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//跳出循环</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;该坐标被占用\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;坐标非法，请重新输入\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="type">void</span> <span class="title function_">ComputerMove</span><span class="params">(<span class="type">char</span> board[ROW][COL],<span class="type">int</span> row,<span class="type">int</span> col)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;电脑走：&gt;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        x = rand() % row;</span><br><span class="line">        y = rand() % col;</span><br><span class="line">        <span class="keyword">if</span> (board[x][y] == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            board[x][y] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回1表示棋盘满，0表示继续</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">IsFull</span><span class="params">(<span class="type">char</span> board[ROW][COL],<span class="type">int</span> row,<span class="type">int</span> col)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;row; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j&lt;col; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27; &#x27;</span>) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="title function_">Is_Win</span><span class="params">(<span class="type">char</span> board[ROW][COL],<span class="type">int</span> row,<span class="type">int</span> col)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//判断横三行</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;row; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (board[i][<span class="number">0</span>]==board[i][<span class="number">1</span>] &amp;&amp; board[i][<span class="number">1</span>]==board[i][<span class="number">2</span>] &amp;&amp; board[i][<span class="number">1</span>] != <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> board[i][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//竖三列</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;col; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(board[<span class="number">0</span>][i]==board[<span class="number">1</span>][i] &amp;&amp; board[<span class="number">1</span>][i]==board[<span class="number">2</span>][i] &amp;&amp; board[<span class="number">1</span>][i] != <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> board[<span class="number">0</span>][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//两个对角线</span></span><br><span class="line">    <span class="keyword">if</span> (board[<span class="number">0</span>][<span class="number">0</span>]==board[<span class="number">1</span>][<span class="number">1</span>] &amp;&amp; board[<span class="number">1</span>][<span class="number">1</span>]==board[<span class="number">2</span>][<span class="number">2</span>] &amp;&amp; board[<span class="number">1</span>][<span class="number">1</span>] != <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> board[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (board[<span class="number">0</span>][<span class="number">0</span>]==board[<span class="number">1</span>][<span class="number">1</span>] &amp;&amp; board[<span class="number">1</span>][<span class="number">1</span>]==board[<span class="number">2</span>][<span class="number">2</span>] &amp;&amp; board[<span class="number">1</span>][<span class="number">1</span>] != <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> board[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断是否平局</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span> == IsFull(board,ROW,COL))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>分支和循环练习-计算1!+2!+3!+...+n!</title>
    <url>/posts/852d9224.html</url>
    <content><![CDATA[<h3 id="使用for循环实现"><a href="#使用for循环实现" class="headerlink" title="使用for循环实现"></a>使用for循环实现</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a,b,n;</span><br><span class="line">    <span class="type">int</span> c = <span class="number">1</span>,d = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;计算1!+2!+3!+...+n!\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入n -&gt;：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">       <span class="keyword">for</span> (a=<span class="number">1</span>; a&lt;n ; a++) &#123;</span><br><span class="line">           b = a + <span class="number">1</span>;</span><br><span class="line">           c = b * c;</span><br><span class="line">           d = d + c;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,d);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h3 id="使用while循环实现"><a href="#使用while循环实现" class="headerlink" title="使用while循环实现"></a>使用while循环实现</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> b,n;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">1</span>,c = <span class="number">1</span>,d = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;计算1!+2!+3!+...+n!\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入n -&gt;：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">while</span> (a&lt;n) &#123;</span><br><span class="line">        b = a + <span class="number">1</span>;</span><br><span class="line">        c = b * c;</span><br><span class="line">        d = d + c;</span><br><span class="line">        a++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>809*?? = 800*??+9*??</title>
    <url>/posts/4fcc1f6a.html</url>
    <content><![CDATA[<p>题目：809*?? &#x3D; 800*??+9*??其中??代表的两位数，<br>809*??为四位数，8*??的结果为两位数，9*??的结果为3位数。求??代表的两位数，及809*？？后的结果。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="keyword">for</span> (a=<span class="number">10</span>; a&lt;<span class="number">100</span>; a++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">809</span>*a &gt;= <span class="number">1000</span> &amp;&amp; <span class="number">809</span>*a &lt; <span class="number">10000</span> &amp;&amp; <span class="number">8</span>*a &gt;=<span class="number">10</span> &amp;&amp; <span class="number">8</span>*a &lt; <span class="number">100</span> &amp;&amp; <span class="number">9</span>*a &gt;= <span class="number">100</span> &amp;&amp; <span class="number">9</span>*a &lt;<span class="number">1000</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;809*%d = %d\n&quot;</span>,a,<span class="number">809</span>*a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>分支和循环练习-计算n的阶乘</title>
    <url>/posts/6e4091aa.html</url>
    <content><![CDATA[<h3 id="使用for循环实现"><a href="#使用for循环实现" class="headerlink" title="使用for循环实现"></a>使用for循环实现</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a,n,b;</span><br><span class="line">    <span class="type">int</span> c = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入要计算阶乘的n -&gt;：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span> (a=<span class="number">1</span>; a&lt;n ; a++) &#123;</span><br><span class="line">        b = a + <span class="number">1</span>;</span><br><span class="line">        c = b*c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h3 id="使用while循环实现"><a href="#使用while循环实现" class="headerlink" title="使用while循环实现"></a>使用while循环实现</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>,b = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入要计算阶乘的n -&gt;：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">while</span> (a&lt;n) &#123;</span><br><span class="line">        a = a + <span class="number">1</span>;</span><br><span class="line">        b = a * b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言预处理</title>
    <url>/posts/fd229b49.html</url>
    <content><![CDATA[<h1 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h1><h2 id="预定义符号"><a href="#预定义符号" class="headerlink" title="预定义符号"></a>预定义符号</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__FILE__      <span class="comment">//进行编译的源文件</span></span><br><span class="line">__LINE__      <span class="comment">//文件当前的行号</span></span><br><span class="line">__DATE__      <span class="comment">//文件被编译的日期</span></span><br><span class="line">__TIME__      <span class="comment">//文件被编译的时间</span></span><br><span class="line">__STDC__      <span class="comment">//如果编译器遵循ANSI C，其值为1，否则未定义</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>
<p>这些预定义符号都是语言内置的，例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;file: %s\nline: %d\n&quot;</span>,__FILE__,__LINE__);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">file: /Users/miles/Library/Mobile Documents/com~apple~CloudDocs/C/预处理<span class="number">2024</span>_10_29_12_04/预处理<span class="number">2024</span>_10_29_12_04/main.c</span><br><span class="line">line: <span class="number">10</span></span><br></pre></td></tr></table></figure>

<h2 id="define"><a href="#define" class="headerlink" title="#define"></a>#define</h2><h3 id="define定义标识符"><a href="#define定义标识符" class="headerlink" title="#define定义标识符"></a>#define定义标识符</h3><p>语法：<br><code>#define name stuff</code></p>
<p>使用#define大体上就是完成替换的操作。例如<code>#define reg register</code>之后在程序中写<code>rge int a;</code>和<code>register int a;</code>的效果是一致的。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STR <span class="string">&quot;Hello&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> max = MAX;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,max);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,STR);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">100</span><br><span class="line">Hello</span><br></pre></td></tr></table></figure>

<p>使用#define还可以替换函数，例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> do_forever for(;;)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    do_forever;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码就相当于在主函数中运行<code>for(;;);</code>，即程序死循环。</p>
<p>不要在#define后面加分号;，因为替换后会变成两个分号。</p>
<h3 id="define定义宏"><a href="#define定义宏" class="headerlink" title="#define定义宏"></a>#define定义宏</h3><p>#define 机制包括了一个规定，允许把参数替换到文本中，这种实现通常称为宏（macro）或定义宏（define macro) </p>
<p>语法：<br><code>#define name(parament-1ist) stuff</code><br>parament-list是一个由逗号隔开的符号表，可能出现在stuff中<br>注意⚠️：parament-list的左括号必须紧邻name。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SQUARE(X) X*X</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> ret = SQUARE(<span class="number">5</span>);</span><br><span class="line">    <span class="comment">//上面的代码等价于</span></span><br><span class="line">    <span class="comment">//int ret = 5*5;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,ret);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是25。</p>
<p>上面的代码存在一些问题，例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SQUARE(X) X*X</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> ret = SQUARE(<span class="number">5</span>+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,ret);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果不是期望的36，而是11，这是运算优先级的问题导致的，即计算顺序是：<code>5+1*5+1=11</code><br>要解决这个问题，可以把宏替换进去的内容加上括号，即<code>(5+1)*(5+1)=36</code>。<br>下面是更正后的代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SQUARE(X) (X)*(X)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> ret = SQUARE(<span class="number">5</span>+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,ret);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码也存在一些问题，例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Double(X) (X)+(X)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">10</span> * Double(a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,ret);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>预期的结果是100，然而打印的结果是55，这也是由于运算优先级的问题，程序的计算方法是：<code>10 * (5) + (5) = 55</code>。<br>为了解决这个问题，我们在X的最外层加上括号，即<code>10 * （ (5) + (5) ） = 100</code>。<br>更正后的代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Double(X) ((X)+(X))</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">10</span> * Double(a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,ret);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也就是说，有关数值表达式求值的宏定义都应该加上括号，避免出现求值错误</p>
<h3 id="define-替换规则"><a href="#define-替换规则" class="headerlink" title="#define 替换规则"></a>#define 替换规则</h3><ol>
<li>在调用宏时，首先对参数进行检查，看看是否包含任何由#define定义的符号。如果是，它们首先被替换。</li>
<li>﻿﻿替换文本随后被插入到程序中原来文本的位置。对于宏，参数名被他们的值替换。</li>
<li>﻿﻿最后，再次对结果文件进行扫描，看看它是否包含任何由#define定义的符号。如果是，就重复上述处理过程。<br>注意：</li>
<li>﻿﻿宏参数和#define 定义中可以出现其他#define定义的变量。但是对于宏，不能出现递归。</li>
<li>﻿﻿当预处理器搜索#define定义的符号的时候，字符串常量的内容并不被搜索。</li>
</ol>
<h3 id="和"><a href="#和" class="headerlink" title="#和##"></a>#和##</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PRINT(X) printf(<span class="string">&quot;the value of &quot;</span>#X<span class="string">&quot; is %d\n&quot;</span>,X)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    PRINT(a);</span><br><span class="line">    PRINT(b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">the value of a is 10</span><br><span class="line">the value of b is 20</span><br></pre></td></tr></table></figure>

<p>##可以把位于它两边的符号合成一个符号。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CAT(X,Y) X##Y</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> Hello = <span class="number">1234</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,CAT(Hel, lo));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是1234<br>注意⚠️：这样的连接必须产生一个合法的标识符。否则其结果就是未定义的。</p>
<h3 id="带有副作用的宏参数"><a href="#带有副作用的宏参数" class="headerlink" title="带有副作用的宏参数"></a>带有副作用的宏参数</h3><p>当宏参数在宏的定义中出现超过一次的时候，如果参数带有副作用，那么你在使用这个宏的时候可能出现危险，导致不可预测的后果。副作用就是表达式求值的时候出现的永久性效果。<br>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x+1;//没有副作用</span><br><span class="line">x++;//带有副作用</span><br></pre></td></tr></table></figure>

<p>使用带副作用的宏参数时一定要小心，建议不要写带副作用的宏参数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(X,Y) ((X)&gt;(Y)?(X):(Y))</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">11</span>;</span><br><span class="line">    <span class="type">int</span> max = MAX(a++,b++);</span><br><span class="line">    <span class="comment">//int max = ((a++) &gt; (b++) ? (a++) : (b++));</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,max);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是12 11 13</p>
<h3 id="宏和函数对比"><a href="#宏和函数对比" class="headerlink" title="宏和函数对比"></a>宏和函数对比</h3><p>宏经常用于简单的运算，例如比较两个数的大小。<br><code>define MAX(X,Y) ( (X) &gt; (Y) ? (X) : (Y) )</code><br>在执行小型运算过程中，宏比函数在程序的规模和速度方面更好，此外，宏是类型无关的。<br>命名习惯：宏名大写，函数名不要全部大写</p>
<p>#undef：移除宏定义</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 100</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,MAX);</span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> MAX</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,MAX);</span><br><span class="line">    <span class="comment">//程序无法正常运行，这里MAX是未定义的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果现存的一个名字需要被重新定义，使用#undef来移除宏定义</p>
<h2 id="条件编译"><a href="#条件编译" class="headerlink" title="条件编译"></a>条件编译</h2><p>使用条件编译指令使一条或者一段语句在程序编译时放弃编译。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; world\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>#if</code>后面的表达式如果为真，后面的表达式参与编译，为假，不参与编译。</p>
<h3 id="多分支的条件编译"><a href="#多分支的条件编译" class="headerlink" title="多分支的条件编译"></a>多分支的条件编译</h3><p>语法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> 常量表达式</span></span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> 常量表达式</span></span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>举个例子：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> 1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;3&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上例中，如果if后面的语句为真，打印1，<br>if后面为假且elif后面为真，打印2，<br>if和elif后面都为假，打印3。</p>
<h3 id="判断是否被定义"><a href="#判断是否被定义" class="headerlink" title="判断是否被定义"></a>判断是否被定义</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义了执行</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(symbol)</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//没有定义执行</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !defined(symbol)</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>通过判断symbol是否被定义来决定是否执行语句。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(debug)</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;debug&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上例，如果定义了debug，则打印debug。</p>
<h3 id="嵌套指令"><a href="#嵌套指令" class="headerlink" title="嵌套指令"></a>嵌套指令</h3><p>上述的条件编译指令可以嵌套使用。</p>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言库函数之qsort</title>
    <url>/posts/14daeaad.html</url>
    <content><![CDATA[<p>qsort，是C语言库函数，用于排序，使用这个库函数需要<code>#include &lt;stdlib.h&gt;</code>头文件<br>语法：<br><code>void qsort(void* base,size_t num,size_t width,int( *cmp)(const void *e1,const void *e2));</code></p>
<ul>
<li><code>void* base</code>是指要排序的数组的首元素位置</li>
<li><code>size_t num</code>是指数组的元素个数</li>
<li><code>size_t width</code>是指数组内每个元素的大小，单位是字节</li>
<li><code>int( *cmp)(const void *e1,const void *e2)</code>是函数指针，比较两个元素用的函数的地址，此函数需自己实现。</li>
</ul>
<span id="more"></span>

<p>参见：<a href="https://blog.zmyu.cc/posts/8c9e7bfb">指针详解</a></p>
<h3 id="关于void-："><a href="#关于void-：" class="headerlink" title="关于void*："></a>关于void*：</h3><ul>
<li>void* 类型的指针可以接收任意类型的地址</li>
<li>对于void*类型的指针不能进行解引用操作</li>
<li>void*类型的指针也不能进行加减整数的运算</li>
</ul>
<hr>
<p>使用qsort对整型数组排序：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">cmp_int</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* e1,<span class="type">const</span> <span class="type">void</span>* e2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//比较函数，比较两个整型值</span></span><br><span class="line">    <span class="keyword">return</span> *(<span class="type">int</span>*)e1 - *(<span class="type">int</span>*)e2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    qsort(arr,sz,<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]),cmp_int);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;sz; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p>使用qsort函数对arr数组排序，打印的结果是0 1 2 3 4 5 6 7 8 9 </p>
<hr>
<p>使用qsort对float型数组排序：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">cmp_float</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* e1,<span class="type">const</span> <span class="type">void</span>* e2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (*(<span class="type">float</span>*)e1 == *(<span class="type">float</span>*)e2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (*(<span class="type">float</span>*)e1 &gt; *(<span class="type">float</span>*)e2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">float</span> f[<span class="number">10</span>] = &#123;<span class="number">9.0</span>,<span class="number">8.0</span>,<span class="number">7.0</span>,<span class="number">6.0</span>,<span class="number">5.0</span>,<span class="number">4.0</span>,<span class="number">3.0</span>,<span class="number">2.0</span>,<span class="number">1.0</span>,<span class="number">0.0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> sz = <span class="keyword">sizeof</span>(f)/<span class="keyword">sizeof</span>(f[<span class="number">0</span>]);</span><br><span class="line">    qsort(f,sz,<span class="keyword">sizeof</span>(f[<span class="number">0</span>]),cmp_float);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;sz; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%f &quot;</span>,f[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>使用qsort对float型数组排序：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">cmp_stu_by_age</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* e1,<span class="type">const</span> <span class="type">void</span>* e2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> ((<span class="keyword">struct</span> Stu*)e1)-&gt;age - ((<span class="keyword">struct</span> Stu*)e2)-&gt;age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">cmp_stu_by_name</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* e1,<span class="type">const</span> <span class="type">void</span>* e2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//比较名字，也就是比较字符串，不能直接用大于、小于、等于比较、应该用strcmp函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strcmp</span>(((<span class="keyword">struct</span> Stu*)e1)-&gt;name,((<span class="keyword">struct</span> Stu*)e2)-&gt;name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> <span class="title">s</span>[3] =</span> &#123;&#123;<span class="string">&quot;zhangsan&quot;</span>,<span class="number">20</span>&#125;,&#123;<span class="string">&quot;lisi&quot;</span>,<span class="number">25</span>&#125;,&#123;<span class="string">&quot;wangwu&quot;</span>,<span class="number">50</span>&#125;&#125;;<span class="comment">//结构体数组</span></span><br><span class="line">    <span class="type">int</span> sz = <span class="keyword">sizeof</span>(s)/<span class="keyword">sizeof</span>(s[<span class="number">0</span>]);</span><br><span class="line">    qsort(s,sz,<span class="keyword">sizeof</span>(s[<span class="number">0</span>]),cmp_stu_by_age);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub学生开发者包申请攻略</title>
    <url>/posts/f8c9fa9d.html</url>
    <content><![CDATA[<h3 id="1、进入申请页面"><a href="#1、进入申请页面" class="headerlink" title="1、进入申请页面"></a>1、进入申请页面</h3><p>进入<a href="https://education.github.com/pack">GitHub Student Developer Pack</a>，点击绿色的Sign up for Student Developer Pack 注册学生开发者包，随后点击Get student benefits进入填写验证材料的页面。</p>
<div class="admonition note"><p>1、如果浏览器需要位置信息权限，则一定要允许。
2、申请时将VPN关闭。</p>
</div>

<span id="more"></span>

<p><img src="/posts/f8c9fa9d/1.jpg" alt="注册步骤"></p>
<h3 id="2、填写验证信息"><a href="#2、填写验证信息" class="headerlink" title="2、填写验证信息"></a>2、填写验证信息</h3><p><img src="/posts/f8c9fa9d/2.png" alt="信息填写页面"></p>
<p>E-mail处最好填写学校的edu邮箱，如果没有也可使用私人邮箱。想要绑定新的校园邮箱，可点击Add an email address并根据提示进行添加。</p>
<p>What is the name of your school：用英文输入学校的全名，并选择弹出的选项。如果下拉选项中没有你的学校，则使用英文输入学校全名并进行下一步。</p>
<p>How do you plan to use GitHub?：用英文输入申请的目的。（例如：I use GitHub for study）</p>
<p>以上内容填写并检查好后点击Continue进行下一步。</p>
<h3 id="3、上传学生身份证明"><a href="#3、上传学生身份证明" class="headerlink" title="3、上传学生身份证明"></a>3、上传学生身份证明</h3><p>准备好学生卡、学生证以及学信网的验证报告。</p>
<p><img src="/posts/f8c9fa9d/3.png" alt="身份证明"></p>
<p>将照片放入Word中整理好并附上英文说明，如上图所示。英文说明可以参考上图，着重写出这些文件的有效期。</p>
<p>如果你不能通过上传的方式验证，那么需要将本页打印出，并通过摄像头拍摄。</p>
<p>本页填写好确认无误后，点击Process my application提交。</p>
<h3 id="4、通过申请"><a href="#4、通过申请" class="headerlink" title="4、通过申请"></a>4、通过申请</h3><p>提交后，可能会立即收到通过邮件，否则会在几天内收到邮件。</p>
<p><img src="/posts/f8c9fa9d/4.png" alt="通过验证"></p>
<p>如果未通过，则确定好填写的信息和证明文件的清晰度，多提交几次，一般就可以通过了。</p>
]]></content>
      <tags>
        <tag>Github</tag>
        <tag>学生优惠</tag>
        <tag>开发者包</tag>
      </tags>
  </entry>
  <entry>
    <title>getchar和putchar</title>
    <url>/posts/c306e3ff.html</url>
    <content><![CDATA[<p>只输出数字字符，非数字字符不输出</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//只输出数字字符，非数字字符不输出</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ch = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((ch = getchar()) != EOF) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(ch);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> password[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ch = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入密码：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,password);<span class="comment">//输入密码，并存放到password数组中</span></span><br><span class="line">    <span class="comment">//缓冲区还剩一个\n</span></span><br><span class="line">    <span class="keyword">while</span> ((ch = getchar()) != <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#123;</span><br><span class="line">        ;<span class="comment">//空语句，不需要做什么</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//直到把缓冲区的\n读取走</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请确认（Y/N）：&quot;</span>);</span><br><span class="line">    ret = getchar();</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="string">&#x27;Y&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;确认成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;放弃确认&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOs下将Hexo部署到Github Pages</title>
    <url>/posts/d37d0038.html</url>
    <content><![CDATA[<p><a href="hexo.io">Hexo</a>是一个快速、简洁且高效的博客框架。得益于Node.js的快速生成速度，几百个网页可在几秒钟内生成。<br>Hexo支持Markdown的所有功能，只需一条指令即可部署成功。</p>
<span id="more"></span>
<h2 id="一、配置本地环境"><a href="#一、配置本地环境" class="headerlink" title="一、配置本地环境"></a>一、配置本地环境</h2><h3 id="1、安装Homebrew"><a href="#1、安装Homebrew" class="headerlink" title="1、安装Homebrew"></a>1、安装<a href="https://brew.sh/">Homebrew</a></h3><p>将下面的命令复制到MacOs终端以安装<a href="https://brew.sh/">Homebrew</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</span><br></pre></td></tr></table></figure>
<h3 id="2、安装git"><a href="#2、安装git" class="headerlink" title="2、安装git"></a>2、安装<a href="https://git-scm.com/">git</a></h3><p>在终端输入下面的命令安装<a href="https://git-scm.com/">git</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure>
<h3 id="3、安装Node-js"><a href="#3、安装Node-js" class="headerlink" title="3、安装Node.js"></a>3、安装<a href="https://nodejs.org/zh-cn/">Node.js</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure>
<h3 id="4、安装Hexo"><a href="#4、安装Hexo" class="headerlink" title="4、安装Hexo"></a>4、安装<a href="https://hexo.io/zh-cn/">Hexo</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<h3 id="5、安装git部署服务"><a href="#5、安装git部署服务" class="headerlink" title="5、安装git部署服务"></a>5、安装git部署服务</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<h3 id="6、使用Hexo创建本地网站"><a href="#6、使用Hexo创建本地网站" class="headerlink" title="6、使用Hexo创建本地网站"></a>6、使用<a href="https://hexo.io/zh-cn/">Hexo</a>创建本地网站</h3><h4 id="（1）新建网站文件夹"><a href="#（1）新建网站文件夹" class="headerlink" title="（1）新建网站文件夹"></a>（1）新建网站文件夹</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir blog</span><br></pre></td></tr></table></figure>
<h4 id="（2）进入网站目录并使用Hexo生成网站"><a href="#（2）进入网站目录并使用Hexo生成网站" class="headerlink" title="（2）进入网站目录并使用Hexo生成网站"></a>（2）进入网站目录并使用Hexo生成网站</h4><p>在终端输入以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd blog</span><br><span class="line">hexo init blog</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>访问 <a href="http://localhost:4000/">http://localhost:4000</a> ，查看到Hexo初始界面，即Hexo本地配置成功。<br>在终端输入control+c退出预览。</p>
<h2 id="二、配置GitHub-Pages"><a href="#二、配置GitHub-Pages" class="headerlink" title="二、配置GitHub Pages"></a>二、配置GitHub Pages</h2><h3 id="1、注册GitHub账户"><a href="#1、注册GitHub账户" class="headerlink" title="1、注册GitHub账户"></a>1、注册GitHub账户</h3><h3 id="2、创建新仓库"><a href="#2、创建新仓库" class="headerlink" title="2、创建新仓库"></a>2、创建新仓库</h3><p>仓库名称为：yourname.github.io(yourname必须为自己的github ID)</p>
<h3 id="3、修改Hexo全局配置文件"><a href="#3、修改Hexo全局配置文件" class="headerlink" title="3、修改Hexo全局配置文件"></a>3、修改Hexo全局配置文件</h3><p>更改网站根目录下_config.yml文件，在文件最后添加以下内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/yourname/yourname.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>将yourname修改为自己的github ID</p>
<h2 id="三、配置SSH-KEY"><a href="#三、配置SSH-KEY" class="headerlink" title="三、配置SSH KEY"></a>三、配置SSH KEY</h2><h3 id="1、生成SSH-KEY"><a href="#1、生成SSH-KEY" class="headerlink" title="1、生成SSH KEY"></a>1、生成SSH KEY</h3><p>打开终端，输入以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;Your Email Address&quot;</span><br></pre></td></tr></table></figure>
<p>提示输入密码和确认密码，如不想设置可以单击回车。</p>
<h3 id="2、将SSH-KEY-添加到GitHub"><a href="#2、将SSH-KEY-添加到GitHub" class="headerlink" title="2、将SSH KEY 添加到GitHub"></a>2、将SSH KEY 添加到GitHub</h3><p>单击访达➡️前往➡️个人➡️.ssh➡️id_rsa.pub，并复制id_rsa.pub的全部内容<br>找不到.ssh文件夹可以点击shift+command+. ，即可显示隐藏的文件夹。<br>打开GitHub主页，点击头像进入setting，点击SSH and GPG keys，在点击New SSH Key。将内容复制进key，tittle内容可以为空。最后点击Add SSH key<br>在终端输入以下命令以测试是否成功：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@GitHub.com</span><br></pre></td></tr></table></figure>
<p>接下来会提示是否继续连接，在终端输入yes。<br>若出现以下提示，即SSH Key 添加成功。</p>
<h2 id="四、将本地内容上传到github"><a href="#四、将本地内容上传到github" class="headerlink" title="四、将本地内容上传到github"></a>四、将本地内容上传到github</h2><p>终端进入网站目录，并输入以下命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Github</tag>
        <tag>Hexo</tag>
        <tag>Github Pages</tag>
        <tag>MacOS</tag>
      </tags>
  </entry>
  <entry>
    <title>兔子生崽问题</title>
    <url>/posts/5e52f8f.html</url>
    <content><![CDATA[<p>兔子在出生两个月后，就有繁殖能力，一对兔子每个月能生出一对小兔子（一公一母）来。如果所有兔子都不死，那么一年以后可以繁殖多少对兔子？</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> month = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> Birth = <span class="number">1</span>;<span class="comment">//新生兔子数</span></span><br><span class="line">    <span class="type">int</span> One_Months_Old = <span class="number">0</span>;<span class="comment">//一个月大的兔子数</span></span><br><span class="line">    <span class="type">int</span> Adult = <span class="number">0</span>;<span class="comment">//成年兔子数</span></span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;<span class="comment">//总数</span></span><br><span class="line">    <span class="keyword">while</span> (month &lt;= <span class="number">40</span>) &#123;</span><br><span class="line">        Adult = Adult + One_Months_Old;<span class="comment">//一个月大的兔子成年了</span></span><br><span class="line">        One_Months_Old = Birth;<span class="comment">//新生兔子一个月大了</span></span><br><span class="line">        Birth = Adult;<span class="comment">//成年的兔子生出一对新兔子</span></span><br><span class="line">        month++;<span class="comment">//月份增长</span></span><br><span class="line">        sum = Birth + One_Months_Old + Adult;<span class="comment">//兔子总数</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Month = %d, Sum = %d\n&quot;</span>,month,sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相关问题：<a href="https://blog.zmyu.cc/posts/65cc8f41.html#%E9%80%92%E5%BD%92%E4%B8%8E%E8%BF%AD%E4%BB%A3">斐波那契数列</a></p>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac下校验文件的MD5</title>
    <url>/posts/b8295e0f.html</url>
    <content><![CDATA[<p>为了避免文件在传输过程中损坏或被恶意篡改，我们可以校验下载后文件的MD5，与提供的MD5对比。若两者不一致，则该文件损坏或已被修改。</p>
<span id="more"></span>

<p>1、打开终端。</p>
<p>2、在终端内输入以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">md5 [文件路径]</span><br></pre></td></tr></table></figure>

<div class="admonition note"><p>文件路径可通过拖拽文件至终端内获得。</p>
</div>

<p>3、输入回车，等待结果。（若文件较大可能校验时间更久）</p>
<p><img src="/posts/b8295e0f/1.jpg" alt="所校验文件的MD5"></p>
<p>红框内为所校验文件的MD5</p>
]]></content>
      <tags>
        <tag>md5</tag>
        <tag>MacOs</tag>
      </tags>
  </entry>
  <entry>
    <title>位段</title>
    <url>/posts/ed932002.html</url>
    <content><![CDATA[<p>什么是位段？<br>——位段是一种类似结构体的类型。</p>
<p>位段的声明和结构体类似，但有两点不同：</p>
<ul>
<li>位段的成员必须是int、unsigned int或signed int（可能也有char，但是一个位段的类型必须是类似的）</li>
<li>位段的成员名后边有一个冒号和一个数字（意思是这个变量需要多少个比特位）<span id="more"></span></li>
</ul>
<h3 id="位段的内存分配"><a href="#位段的内存分配" class="headerlink" title="位段的内存分配"></a>位段的内存分配</h3><ul>
<li>位段的成员可以是int、unsigned int、signed int或者是 char类型</li>
<li>位段的空间上是按照需要以4个字节(int)或1个字节(char)的方式来开辟的</li>
<li>位段涉及很多不确定因素，不跨平台，注重可移植性程序不使用位段</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//位段 - 二进制位</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> a : <span class="number">2</span>;<span class="comment">//需要2个比特位</span></span><br><span class="line">    <span class="type">int</span> b : <span class="number">5</span>;<span class="comment">//需要5个比特位</span></span><br><span class="line">    <span class="type">int</span> c : <span class="number">10</span>;<span class="comment">//需要10个比特位</span></span><br><span class="line">    <span class="type">int</span> d : <span class="number">30</span>;<span class="comment">//需要30个比特位</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">S</span> <span class="title">s</span>;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(s));<span class="comment">//8</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是s使用8字节空间。<br>首先开辟一个4字节的空间，共32bit，先给a，b，c分配共17bit的空间，剩下的空间不够给d分配30bit的空间，剩余空间丢弃。<br>另开辟一块4字节的空间，共32bit，给d分配30bit的空间，剩下2bit的空间丢弃，所以位段s占8字节。<br>注意⚠️：位段后面的数字不能大于32。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> a : <span class="number">3</span>;</span><br><span class="line">    <span class="type">char</span> b : <span class="number">4</span>;</span><br><span class="line">    <span class="type">char</span> c : <span class="number">5</span>;</span><br><span class="line">    <span class="type">char</span> d : <span class="number">4</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">S</span> <span class="title">s</span> =</span>&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    s.a = <span class="number">10</span>;<span class="comment">//10的二进制是1010，但a这个空间只存的下3个比特位，只能存的下010，也就是2</span></span><br><span class="line">    s.b = <span class="number">20</span>;<span class="comment">//20的二进制是10100，b只有4比特位，存0100。</span></span><br><span class="line">    s.c = <span class="number">3</span>;</span><br><span class="line">    s.d = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="位段的跨平台问题"><a href="#位段的跨平台问题" class="headerlink" title="位段的跨平台问题"></a>位段的跨平台问题</h3><p>位段不跨平台，主要由下面四点导致：</p>
<ul>
<li>int位段被当成有符号还是无符号数是不确定的。</li>
<li>位段中最大位的数目不能确定。（16位机器最大16，32位机最大32，写成27，在16位机器会出问题。）</li>
<li>标准未定义位段在内存中的分配规则，不知道从左往右还是从右往左分配</li>
<li>一个结构包含两个位段，第二个成员较大时，无法容纳第一个位段剩余位时，剩下的空间舍弃或保留不确定。</li>
</ul>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Netlify免费加速GitHub Pages页面</title>
    <url>/posts/773db5f0.html</url>
    <content><![CDATA[<p>我们在使用Github Pages时会发现其在国内的访问速度非常缓慢，这无疑会影响页面的收录和访客的体验。本文介绍了如何加速Github Pages在国内的速度。</p>
<span id="more"></span>
<p>以下是使用Netlify加速后的访问速度。<br><img src="/posts/773db5f0/1.png" alt="加速后的访问速度"><br>可以看到加速后的页面在国内的访问速度是不错的。</p>
<p>首先，打开<a href="https://www.netlify.com/">Netlify</a>。点击sign up，并使用Github注册。<br><img src="/posts/773db5f0/2.png" alt="注册填写信息"><br>填写好基本的信息，并点击Set up and continue进入下一步。<br><img src="/posts/773db5f0/3.png" alt="点击Import from Git"><br>点击Import from Git从Git库中添加现有项目，进入GitHub授权界面。<br><img src="/posts/773db5f0/4.png" alt="授权界面"><br>在授权界面选择Only select repositories并选中要继续的库，选好后点击install。<br><img src="/posts/773db5f0/5.png" alt="选择库，并选择Branch"><br>接下来选中要使用Netlify的库，并选择Branch。选好后点击Deploy site。<br><img src="/posts/773db5f0/6.png" alt="Netlify管理后台"><br>接下来就进入到了Netlify的后台界面，依次点击Site settings→General→site details→change site name修改网站名称（也可以不修改），例如我的就是zmyu.netlify.app。<br><img src="/posts/773db5f0/7.png" alt="添加自定义域名"><br>进入到以上界面，并点击Add domain alias添加自定义域名，例如我的就是blog.zmyu.cc。<br><img src="/posts/773db5f0/8.png"></p>
<p><img src="/posts/773db5f0/9.png" alt="DNS后台"><br>进入DNS后台，并添加CNAME记录，记录值就是之前修改的域名（或默认的域名），例如我的就是zmyu.netlify.app。<br>设置好之后，等待一段时间后，就可以通过自定义的域名访问网站了。</p>
]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>Github Pages</tag>
        <tag>Netlify</tag>
        <tag>SEO</tag>
      </tags>
  </entry>
  <entry>
    <title>写函数输出字符串长度</title>
    <url>/posts/1e1a9112.html</url>
    <content><![CDATA[<p>题目：写一个函数，求一个字符串的长度，在main函数中输入字符串，并输出其长度。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Char_Length</span><span class="params">(<span class="type">char</span>* ch)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch[i] != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch[] = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;</span><br><span class="line">    <span class="type">int</span> ret = Char_Length(ch);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;字符串的长度是：%d&quot;</span>,ret);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>一个偶数总能表示为两个素数之和</title>
    <url>/posts/9d136c84.html</url>
    <content><![CDATA[<p>题目：一个偶数总能表示为两个素数之和</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Is_Prime_Number</span><span class="params">(<span class="type">int</span> input)</span><span class="comment">//计算Cal_Prime传过来的值是不是素数，是返回0，不是返回1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">2</span>; i&lt;input; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (input%i==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Cal_Prime</span><span class="params">(<span class="type">int</span> input)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">2</span>; i&lt;input; i++)<span class="comment">//素数最小都是2，从2开始枚举</span></span><br><span class="line">    &#123;</span><br><span class="line">        j = input - i;<span class="comment">//i和j的和就是input</span></span><br><span class="line">        <span class="type">int</span> a = Is_Prime_Number(i);<span class="comment">//看看i是不是素数</span></span><br><span class="line">        <span class="type">int</span> b = Is_Prime_Number(j);<span class="comment">//看看j是不是素数</span></span><br><span class="line">        <span class="keyword">if</span> (a!=<span class="number">1</span> &amp;&amp; b!=<span class="number">1</span>)<span class="comment">//如果都是素数</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d + %d = %d&quot;</span>,i,j,input);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一个偶数:-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;input);</span><br><span class="line">    Cal_Prime(input);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>函数指针求倒数和</title>
    <url>/posts/96f6c809.html</url>
    <content><![CDATA[<p>题目：编写一个函数，输入n为偶数时，调用函数求1&#x2F;2+1&#x2F;4+…+1&#x2F;n。<br>当输入n为奇数时，调用函数1&#x2F;1+1&#x2F;3+…+1&#x2F;n（利用指针函数）。</p>
<p>指针函数：本质是一个函数，不过它的返回值是一个指针。<br>函数指针：本质是一个指针，该指针的地址指向了一个函数，所以它是指向函数的指针。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">float</span> <span class="title function_">Odd</span><span class="params">(<span class="type">int</span> n)</span><span class="comment">//求偶数的函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> i = <span class="number">2</span>;</span><br><span class="line">    <span class="type">float</span> sum = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= n)</span><br><span class="line">    &#123;</span><br><span class="line">        sum = sum + <span class="number">1</span>/i;</span><br><span class="line">        i = i + <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">float</span> <span class="title function_">Even</span><span class="params">(<span class="type">int</span> n)</span><span class="comment">//求奇数的函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="type">float</span> sum = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= n)</span><br><span class="line">    &#123;</span><br><span class="line">        sum = sum + <span class="number">1</span>/i;</span><br><span class="line">        i = i + <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一个数字:-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;input);</span><br><span class="line">    <span class="type">float</span> <span class="title function_">Odd</span><span class="params">(<span class="type">int</span> input)</span>;<span class="comment">//声明这两个函数</span></span><br><span class="line">    <span class="type">float</span> <span class="title function_">Even</span><span class="params">(<span class="type">int</span> input)</span>;</span><br><span class="line">    <span class="type">float</span> (*p)(<span class="type">int</span>);</span><br><span class="line">    <span class="keyword">if</span> (input % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = Odd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        p = Even;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">float</span> result = p(input);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf&quot;</span>,result);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>函数练习</title>
    <url>/posts/5e885ad9.html</url>
    <content><![CDATA[<h3 id="写函数判断一个数是否为素数"><a href="#写函数判断一个数是否为素数" class="headerlink" title="写函数判断一个数是否为素数"></a>写函数判断一个数是否为素数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Prime_Number</span><span class="params">(<span class="type">int</span>* pnum)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x,i,z=<span class="number">0</span>;</span><br><span class="line">    x = *pnum;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt; x; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x%i == <span class="number">0</span>) &#123;</span><br><span class="line">            z = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (z==<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;输入的数字是素数&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;输入的数字不是素数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> num,a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;判断一个数是否为素数\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一个数字:-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">    Prime_Number(&amp;num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//是素数返回1，不是返回0</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">is_Prime</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i&lt;n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n%i == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">100</span>; i&lt;=<span class="number">200</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_Prime(i) == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="写一个函数判断一年是否为闰年"><a href="#写一个函数判断一年是否为闰年" class="headerlink" title="写一个函数判断一年是否为闰年"></a>写一个函数判断一年是否为闰年</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Leap_Year</span><span class="params">(<span class="type">int</span> a)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ((a % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; a % <span class="number">100</span> != <span class="number">0</span> )|| a % <span class="number">400</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;判断一年是否为闰年\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入年份:-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    <span class="keyword">if</span> (Leap_Year(x)==<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;是闰年\n&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;不是闰年\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="函数实现一个整型有序数组的二分查找"><a href="#函数实现一个整型有序数组的二分查找" class="headerlink" title="函数实现一个整型有序数组的二分查找"></a>函数实现一个整型有序数组的二分查找</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">binary_search</span><span class="params">(<span class="type">int</span> arr[],<span class="type">int</span> k,<span class="type">int</span> sz)</span><span class="comment">//实参和形参的名字相同是可以的</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//算法的实现</span></span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//    int sz = sizeof(arr)/sizeof(arr[0]);//传过去的arr不是数组，本质上arr是指针，只是首元素的地址</span></span><br><span class="line">    <span class="type">int</span> right = sz - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left&lt;=right) &#123;</span><br><span class="line">        <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &lt; k)</span><br><span class="line">        &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt; k) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//二分查找-在一个有序数组中查找具体的某个数</span></span><br><span class="line">    <span class="comment">//找到了返回这个数的下标，找不到返回-1</span></span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="type">int</span> ret = binary_search(arr,k,sz);</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;找不到\n&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;找到了，下标是：%d\n&quot;</span>,ret);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="写一个函数，每调用一次，num加1"><a href="#写一个函数，每调用一次，num加1" class="headerlink" title="写一个函数，每调用一次，num加1"></a>写一个函数，每调用一次，num加1</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Record</span><span class="params">(<span class="type">int</span>* x)</span></span><br><span class="line">&#123;</span><br><span class="line">    (*x)++;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> i,num = <span class="number">0</span>;</span><br><span class="line">    Record(&amp;num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,num);</span><br><span class="line">    Record(&amp;num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,num);</span><br><span class="line">    Record(&amp;num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>八进制转换十进制</title>
    <url>/posts/357616ec.html</url>
    <content><![CDATA[<p>题目：八进制转换为十进制</p>
<p>例如，八进制数1507转换为十进制数的计算过程如下：‌<br>个位‌：7乘以8的0次方，即7 * 8^0 &#x3D; 7。<br>十位‌：0乘以8的1次方，即0 * 8^1 &#x3D; 0。<br>‌百位‌：5乘以8的2次方，即5 * 8^2 &#x3D; 320。<br>‌千位‌：1乘以8的3次方，即1 * 8^3 &#x3D; 512。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Cal_Decimal</span><span class="params">(<span class="type">int</span> input)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (input!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> temp = input;</span><br><span class="line">        <span class="keyword">if</span> (temp &lt; <span class="number">10</span>)<span class="comment">//十进制的数字除到了10以下，直接加上这个数字</span></span><br><span class="line">        &#123;</span><br><span class="line">            sum = sum + temp;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> capacity = <span class="number">0</span>;<span class="comment">//数字的位数</span></span><br><span class="line">        <span class="type">int</span> temp_capacity;<span class="comment">//临时变量-数字的位数</span></span><br><span class="line">        <span class="type">int</span> a = <span class="number">10</span>;<span class="comment">//用于计算最高位的值</span></span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> x = <span class="number">8</span>;<span class="comment">//从高位往低位得到各位的数字</span></span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="number">0</span>)<span class="comment">//先计算位数</span></span><br><span class="line">        &#123;</span><br><span class="line">            temp = temp / <span class="number">10</span>;</span><br><span class="line">            capacity++;</span><br><span class="line">        &#125;</span><br><span class="line">        capacity = capacity - <span class="number">1</span>;</span><br><span class="line">        temp_capacity = capacity;</span><br><span class="line">        temp = input;</span><br><span class="line">        <span class="keyword">while</span> (temp_capacity != <span class="number">0</span>)<span class="comment">//获得现在最高位的数字</span></span><br><span class="line">        &#123;</span><br><span class="line">            temp = temp / <span class="number">10</span>;</span><br><span class="line">            temp_capacity--;</span><br><span class="line">        &#125;</span><br><span class="line">        j = temp;</span><br><span class="line">        temp_capacity = capacity;</span><br><span class="line">        <span class="keyword">while</span> (temp_capacity &gt; <span class="number">1</span>)<span class="comment">//计算乘以8的次方数</span></span><br><span class="line">        &#123;</span><br><span class="line">            x = x * <span class="number">8</span>;</span><br><span class="line">            temp_capacity--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (capacity &gt;<span class="number">1</span>) <span class="comment">//减去最大的一位</span></span><br><span class="line">        &#123;</span><br><span class="line">            a = a * <span class="number">10</span>;</span><br><span class="line">            capacity--;</span><br><span class="line">        &#125;</span><br><span class="line">        a = a * j;</span><br><span class="line">        i = x * j;</span><br><span class="line">        input = input - a;</span><br><span class="line">        sum = sum + i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> input;</span><br><span class="line">    <span class="type">int</span> output;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一个数字:-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;input);</span><br><span class="line">    output = Cal_Decimal(input);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,output);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> s[<span class="number">20</span>] = <span class="string">&quot;1507&quot;</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(s[i]!=<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        n = n * <span class="number">8</span> + s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>函数（一）</title>
    <url>/posts/8ecc5de7.html</url>
    <content><![CDATA[<p> 函数就是子程序，是一个大型程序中的某部分代码，由一个或多个语句块组成。它负责完成某项特定任务，而且相较于其他代码，具备相对的独立性。</p>
<p> 一般会有输入参数并有返回值，提供对过程的封装和细节的隐藏。这些代码通常被集成为软件库。</p>
<span id="more"></span>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span><span class="comment">//最前面的int表示这个函数最终会返回一个int型的值。</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> z = <span class="number">0</span>;</span><br><span class="line">    z = x + y;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> sum = Add(a,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的Add就是一个函数。</p>
<p>C语言中函数分类：</p>
<ul>
<li>库函数</li>
<li>自定义函数</li>
</ul>
<h3 id="库函数"><a href="#库函数" class="headerlink" title="库函数"></a>库函数</h3><p>什么是库函数？<br>——C语言本身提供使用的的就是库函数。<br>查询库函数参考：</p>
<ul>
<li><a href="http://www.cplusplus.com/">http://www.cplusplus.com</a></li>
<li><a href="http://zh.cppreference.com/">http://zh.cppreference.com</a><br>使用库函数需要查询文档。</li>
</ul>
<p>strcpy - string copy - 字符串拷贝<br>strlen - string length - 字符串长度有关<br>我们可以根据函数名称猜测用途 </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span><span class="comment">//使用strcpy函数需要这个头文件</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> arr1[] = <span class="string">&quot;bit&quot;</span>;</span><br><span class="line">    <span class="type">char</span> arr2[<span class="number">20</span>] = <span class="string">&quot;########&quot;</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(arr2,arr1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,arr2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>char * strcpy ( char * destination, const char * source );</code></p>
<p>memset - memory set - 内存设置</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> arr[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    <span class="built_in">memset</span>(arr, <span class="string">&#x27;*&#x27;</span>, <span class="number">5</span>);<span class="comment">//双引号引用字符串，单引号引用字符</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,arr);</span><br><span class="line">    <span class="comment">//打印的结果是：***** world</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>void * memset ( void * ptr, int value, size_t num );</code><br>打印的结果是：***** world</p>
<p><strong>双引号引用字符串，单引号引用字符</strong></p>
<h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3><p>自定义函数和库函数一样，有函数名，返回值类型和函数参数。但不一样的是这些都由程序员自己设计。<br><img src="/posts/8ecc5de7/img1.png" alt="自定义函数"></p>
<h5 id="举个例子：写一个函数找出两个整数的最大值"><a href="#举个例子：写一个函数找出两个整数的最大值" class="headerlink" title="举个例子：写一个函数找出两个整数的最大值"></a>举个例子：写一个函数找出两个整数的最大值</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">MAX</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (x&gt;y) &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a,b,max;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入两个整数：-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d,%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">    max = MAX(a,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,max);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>指针变量和解引用：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span>* pa = &amp;a;<span class="comment">//pa就是指针变量</span></span><br><span class="line">    *pa = <span class="number">20</span>;<span class="comment">//解引用操作-通过pa里边存的地址找到a</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.zmyu.cc/posts/64e9b9a8.html#%E6%8C%87%E9%92%88">指针</a></p>
<h5 id="举个例子：写一个函数交换两个整型变量的内容"><a href="#举个例子：写一个函数交换两个整型变量的内容" class="headerlink" title="举个例子：写一个函数交换两个整型变量的内容"></a>举个例子：写一个函数交换两个整型变量的内容</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Exchange</span><span class="params">(<span class="type">int</span>* pa,<span class="type">int</span>* pb)</span><span class="comment">//用指针接收a,b的地址</span></span><br><span class="line">&#123;   </span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    temp = *pa;</span><br><span class="line">    *pa = *pb;</span><br><span class="line">    *pb = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入a,b两个整型数字:-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d,%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入的a = %d,b = %d\n&quot;</span>,a,b);</span><br><span class="line">    Exchange(&amp;a, &amp;b);<span class="comment">//调用Exchange函数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输出的a = %d,b = %d\n&quot;</span>,a,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：下面的函数不能完成要求</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Exchange</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> temp;</span><br><span class="line">	temp = x;</span><br><span class="line">	x = y;</span><br><span class="line">	y = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实参传给形参时，形参其实是实参的一份临时拷贝。<br>对形参的修改无法变成对实参的修改。<br>可以通过上面的指针（将地址传过去）的形式进行修改。</p>
<h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><h4 id="实际参数"><a href="#实际参数" class="headerlink" title="实际参数"></a>实际参数</h4><p>真实传递给函数的参数。<br>实际参数可以是：常量、变量、表达式、函数等。<br>无论实参是何种类型的量，在进行函数调用时，它们都必须有确定的值，以便把这些值传送给形参。</p>
<h4 id="形式参数"><a href="#形式参数" class="headerlink" title="形式参数"></a>形式参数</h4><p>函数名后括号中的变量。<br>形式参数只有在函数被调用的过程中才实例化（分配内存单元），所以叫形式参数。<br>形式参数当函数调用完成之后就自动销毁了。因此形式参数只在函数中有效。</p>
<h3 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h3><p>传值调用：<br>函数的形参和实参分别占有不同内存块，对形参的修改不会影响实参。<br><code>max = MAX(a,b);</code></p>
<p>传址调用</p>
<ul>
<li>传址调用是把函数外部创建变量的内存地址传递给函数参数的一种调用函数的方式。</li>
<li>﻿这种传参方式可以让函数和函数外边的变量建立起正真的联系，也就是函数内部可以直接操作函数外部的变量。<br><code>Exchange(&amp;a, &amp;b);</code></li>
</ul>
<h3 id="函数的嵌套调用和链式访问"><a href="#函数的嵌套调用和链式访问" class="headerlink" title="函数的嵌套调用和链式访问"></a>函数的嵌套调用和链式访问</h3><ul>
<li>嵌套调用：在一个函数中调用另一个函数。</li>
<li>链式访问：把一个函数的返回值作为另外一个函数的参数。<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//1</span></span><br><span class="line">    len = <span class="built_in">strlen</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,len);</span><br><span class="line">    <span class="comment">//2、链式访问</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(<span class="string">&quot;abc&quot;</span>));<span class="comment">//把strlen的返回值打印，和printf和strlen串在一起，像链条一样。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="number">43</span>)));<span class="comment">//打印的结果是4321，因为printf的返回结果是打印在屏幕上的字数。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="函数的声明和定义"><a href="#函数的声明和定义" class="headerlink" title="函数的声明和定义"></a>函数的声明和定义</h3><p> 可以让代码逻辑更清晰，结构明了。</p>
<p>函数的声明和定义在同一文件（一般不这样用）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>;<span class="comment">//在同一文件,函数的声明一般出现在函数的使用之前。要满足先声明后使用。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//函数调用</span></span><br><span class="line">    sum = Add(a,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数的定义</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> z = x + y;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>函数的声明和定义分开写（结构明了）：<br>main.h</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Add.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//函数调用</span></span><br><span class="line">    sum = Add(a,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Add.h</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __ADD_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __ADD_H__</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>Add.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> z = x + y;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>分支和循环之do...while循环</title>
    <url>/posts/44b3ffc2.html</url>
    <content><![CDATA[<p>语法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    循环语句;</span><br><span class="line">&#125; <span class="keyword">while</span> (表达式);</span><br></pre></td></tr></table></figure>
<p>do语句的特点：循环至少执行一次，使用场景有限。</p>
<span id="more"></span>

<h3 id="使用do…while打印1-10的数字"><a href="#使用do…while打印1-10的数字" class="headerlink" title="使用do…while打印1-10的数字"></a>使用do…while打印1-10的数字</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//打印1-10的数字</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);</span><br><span class="line">        i++;</span><br><span class="line">    &#125; <span class="keyword">while</span> (i&lt;=<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">//当1==5的时候就终止循环了</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);<span class="comment">//打印的结果是1 2 3 4</span></span><br><span class="line">        i++;</span><br><span class="line">    &#125; <span class="keyword">while</span> (i&lt;=<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);<span class="comment">//打印的结果是1 2 3 4后死循环</span></span><br><span class="line">        i++;</span><br><span class="line">    &#125; <span class="keyword">while</span> (i&lt;=<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>函数和递归（二）</title>
    <url>/posts/65cc8f41.html</url>
    <content><![CDATA[<p>一个函数调用自身就是递归。<br>通常可以把大型复杂问题转换成与原文题相似但规模较小的问题求解。</p>
<span id="more"></span>
<p>最简单的递归程序：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;递归\n&quot;</span>);</span><br><span class="line">    main();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>递归常见的错误：栈溢出</p>
<hr>
<p>练习1：接受一个整型值（无符号），按照顺序打印它的每一位。例如：输入：1234，输出1 2 3 4</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (n&gt;<span class="number">9</span>) &#123;</span><br><span class="line">        print(n/<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,n%<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">    <span class="comment">//递归</span></span><br><span class="line">    print(num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/65cc8f41/img1.png" alt="递归"></p>
<p>递归在书写时一定要写条件，不要让递归无限循环下去！</p>
<h4 id="递归的两个必要条件"><a href="#递归的两个必要条件" class="headerlink" title="递归的两个必要条件"></a>递归的两个必要条件</h4><ul>
<li>﻿存在限制条件，x当满足这个限制条件的时候，递归便不再继续。</li>
<li>﻿﻿每次递归调用之后越来越接近这个限制条件</li>
</ul>
<hr>
<p>练习二：编写函数，不允许创建临时变量，求字符串长度<br>使用临时变量的方法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">my_strlen</span><span class="params">(<span class="type">char</span>* str)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (*str !=<span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        count++;</span><br><span class="line">        str++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> arr[] = <span class="string">&quot;bit&quot;</span>;</span><br><span class="line">    <span class="comment">//模拟实现了一个strlen函数</span></span><br><span class="line">    <span class="type">int</span> len = my_strlen(arr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不创建临时变量：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">my_strlen</span><span class="params">(**<span class="type">char</span>*** str)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(*str != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>+my_strlen(str+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> arr[] = <span class="string">&quot;bit&quot;</span>;</span><br><span class="line">    <span class="comment">//模拟实现了一个strlen函数</span></span><br><span class="line">    <span class="type">int</span> len = my_strlen(arr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="递归与迭代"><a href="#递归与迭代" class="headerlink" title="递归与迭代"></a>递归与迭代</h3><p>练习3:求n的阶乘<br>不使用递归</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Fac1</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        ret = ret * i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    ret = Fac1(n);<span class="comment">//用循环的方式实现</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ret);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用递归的方式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Fac2</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (n&lt;=<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> n*Fac2(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    ret = Fac2(n);<span class="comment">//用循环的方式实现</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ret);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>练习4:斐波那契数列<br>前两个数之和等于第三个数字</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Fib</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Fib(n<span class="number">-1</span>)+Fib(n<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    ret = Fib(n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ret);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码的优化：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Fib</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> c = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n&gt;<span class="number">2</span>) &#123;</span><br><span class="line">        c = a + b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = c;</span><br><span class="line">        n--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    ret = Fib(n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ret);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>函数递归的经典问题：</p>
<ul>
<li>汉诺塔问题</li>
<li>青蛙跳台阶问题</li>
</ul>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>分支和循环之if和while示例</title>
    <url>/posts/c99fc782.html</url>
    <content><![CDATA[<h3 id="if判断一个数是否为奇数"><a href="#if判断一个数是否为奇数" class="headerlink" title="if判断一个数是否为奇数"></a>if判断一个数是否为奇数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一个数：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">    b = a % <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">1</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d是奇数\n&quot;</span>,a);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d是偶数\n34&quot;</span>,a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="while和if输出1到100之间的奇数"><a href="#while和if输出1到100之间的奇数" class="headerlink" title="while和if输出1到100之间的奇数"></a>while和if输出1到100之间的奇数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//输出1-100之间的奇数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (a &lt;= <span class="number">100</span>) </span><br><span class="line">    &#123;</span><br><span class="line">            <span class="keyword">if</span> (a % <span class="number">2</span> == <span class="number">1</span>) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d是奇数\n&quot;</span>,a);</span><br><span class="line">                a = a + <span class="number">1</span>;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                a = a + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>分支和循环之switch语句</title>
    <url>/posts/1c24259b.html</url>
    <content><![CDATA[<p>switch语句是一种分支语句，常用于多分支情况。<br>switch允许嵌套使用。</p>
<span id="more"></span>

<h4 id="输入数字判断星期几"><a href="#输入数字判断星期几" class="headerlink" title="输入数字判断星期几"></a>输入数字判断星期几</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> day = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;day);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> == day) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;星期一&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">2</span> == day) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;星期二&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">3</span> == day) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;星期三&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="number">4</span> == day) &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;星期四&quot;</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="number">5</span> == day) &#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">&quot;星期五&quot;</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (<span class="number">6</span> == day) &#123;</span><br><span class="line">                                <span class="built_in">printf</span>(<span class="string">&quot;星期六&quot;</span>);</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span> (<span class="number">7</span> == day) &#123;</span><br><span class="line">                                    <span class="built_in">printf</span>(<span class="string">&quot;星期日&quot;</span>);</span><br><span class="line">                                &#125; <span class="keyword">else</span></span><br><span class="line">                                &#123;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用switch语句简化上面的代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> day = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;day);</span><br><span class="line">    <span class="keyword">switch</span> (day)<span class="comment">//switch后的括号里的类型必须是整型</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//case后面必须是整型常量表达式</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;星期一\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//跳出分支，和case搭配使用</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;星期二\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;星期三\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;星期四\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;星期五\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;星期六\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;星期日\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>switch</code>后的括号里的类型必须是<strong>整型</strong>。<br><code>case</code>后面必须是<strong>整型常量表达式</strong>。<br><code>break</code>是跳出分支的意思，和<code>case</code>搭配使用。</p>
<h3 id="break把语句列表划分为不同的部分"><a href="#break把语句列表划分为不同的部分" class="headerlink" title="break把语句列表划分为不同的部分"></a>break把语句列表划分为不同的部分</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> day = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;day);</span><br><span class="line">        <span class="keyword">switch</span> (day) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;工作日\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;休息日\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输入1-5输出工作日，6-7输出休息日。<br>良好的代码风格是把最后一个语句后也加上break。</p>
<h3 id="default子句"><a href="#default子句" class="headerlink" title="default子句"></a>default子句</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">switch</span> (day) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;工作日\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;休息日\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:<span class="comment">//如果输入的不是1-7，进入default</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;输入错误\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">                <span class="comment">//良好的代码风格是每个switch语句中都加上default子句和break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>default子句的是输入非法语句时执行的内容。<br>良好的代码风格是每个switch语句中都加上default子句和break。</p>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>分支和循环练习-二分法-在有序数组中找到一个数</title>
    <url>/posts/b9ca79e6.html</url>
    <content><![CDATA[<p>在一个有序数组中查找某个具体数字n</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">7</span>;</span><br><span class="line">    <span class="comment">//写代码，在数组中找到7</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);<span class="comment">//算出数组中元素个数</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;sz; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k == arr[i]) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;找到了，下标是:%d\n&quot;</span>,i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i == sz) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;找不到&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h3 id="使用二分法-在有序数组中找到一个数"><a href="#使用二分法-在有序数组中找到一个数" class="headerlink" title="使用二分法-在有序数组中找到一个数"></a>使用二分法-在有序数组中找到一个数</h3><p>使用二分法-查找效率高</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">11</span>; <span class="comment">//要查找的数字</span></span><br><span class="line">    <span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);<span class="comment">//算出数组中元素个数</span></span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = sz - <span class="number">1</span>;<span class="comment">//右下标，就是元素个数减1</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &gt; k) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(arr [mid] &lt; k)</span><br><span class="line">        &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;找到了，下标是:%d\n&quot;</span>,mid);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (left &gt; right) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;没找到&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>strcat函数和strncat函数</title>
    <url>/posts/3b1a4cba.html</url>
    <content><![CDATA[<p>使用这两个函数需要引用string.h头文件</p>
<h3 id="strcat函数"><a href="#strcat函数" class="headerlink" title="strcat函数"></a>strcat函数</h3><p><code>char * strcat ( char * destination, const char * source );</code><br>第一个变量是要追加的数组，第二个函数是数组的来源。</p>
<span id="more"></span>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> arr1[<span class="number">30</span>] = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">	<span class="type">char</span> arr2[] = <span class="string">&quot;def&quot;</span>;</span><br><span class="line">	<span class="built_in">strcat</span>(arr1,arr2);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,arr1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是abcdef<br><code>strcat</code>函数把arr1后面追加了arr2。<br>注意⚠️：strcat函数不能自己给自己追加。<br>例如<code>strcat(arr1,arr1);</code>arr1的内容不会改为abcabc</p>
<h3 id="strncat函数"><a href="#strncat函数" class="headerlink" title="strncat函数"></a>strncat函数</h3><p><code>char * strncat ( char * destination, const char * source, size_t num );</code><br>第一个变量是要追加的数组，第二个函数是数组的来源，第三个函数是数组的大小</p>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>分支和循环练习之goto语句</title>
    <url>/posts/414a488a.html</url>
    <content><![CDATA[<p>不建议使用goto语句,可能导致代码执行流程出错。<br>一般用于终止深层嵌套。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">again:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello\n&quot;</span>);</span><br><span class="line">    <span class="keyword">goto</span> again;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello\n&quot;</span>);</span><br><span class="line">    <span class="keyword">goto</span> again;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;你好\n&quot;</span>);<span class="comment">//这句不会被执行</span></span><br><span class="line">again:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>printf(&quot;你好\n&quot;);</code>，这句永远不会被执行，直接被goto跳过了。</p>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>初识C语言（三）</title>
    <url>/posts/d3c4a0cd.html</url>
    <content><![CDATA[<h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><h4 id="操作符之sizeof"><a href="#操作符之sizeof" class="headerlink" title="操作符之sizeof"></a>操作符之sizeof</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(a));<span class="comment">//整型变量占内存4个字节</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span> a);<span class="comment">//和上面的结果是一样的。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">int</span>));<span class="comment">//整型变量占内存4个字节</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(arr));<span class="comment">//计算数组的大小，单位是字节，4*6=24</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]));<span class="comment">//想要知道数组元素个数，可以把数组占用字节大小/数组每个元素占的字节</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p><code>sizeof(arr)/sizeof(arr[0])</code>想要知道数组元素个数，可以把数组占用字节大小&#x2F;数组每个元素占的字节。</p>
<h4 id="操作符之前置后置-、"><a href="#操作符之前置后置-、" class="headerlink" title="操作符之前置后置++、--"></a>操作符之前置后置++、--</h4><h5 id="后置"><a href="#后置" class="headerlink" title="后置++"></a>后置++</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = a++;<span class="comment">//后置++，先使用a的值，然后a再自增</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d , b = %d&quot;</span>,a,b);<span class="comment">//a = 11 , b = 10</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>后置++，先使用a的值，然后a再自增。</p>
<h5 id="前置"><a href="#前置" class="headerlink" title="前置++"></a>前置++</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = ++a;<span class="comment">//前置++，先++，再使用，即a先自增，变成11，再把a的值赋给b</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d , b = %d&quot;</span>,a,b);<span class="comment">//a = 11 , b = 11</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>前置++，先++，再使用，即a先自增，变成11，再把a的值赋给b。</p>
<h5 id="后置-1"><a href="#后置-1" class="headerlink" title="后置--"></a>后置--</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = a--;<span class="comment">//后置--，先使用a的值，然后a再自减</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d , b = %d&quot;</span>,a,b);<span class="comment">//a = 9 , b = 10</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>后置--，先使用a的值，然后a再自减</p>
<h5 id="前置-1"><a href="#前置-1" class="headerlink" title="前置--"></a>前置--</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = --a;<span class="comment">//前置--，a先--，再使用</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d , b = %d&quot;</span>,a,b);<span class="comment">//a = 9 , b = 9</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>前置--，a先--，再使用</p>
<h4 id="操作符之按位取反～"><a href="#操作符之按位取反～" class="headerlink" title="操作符之按位取反～"></a>操作符之按位取反～</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//4个字节，32个比特位</span></span><br><span class="line">    <span class="comment">//0的二进制序列:00000000 00000000 00000000 00000000</span></span><br><span class="line">    <span class="type">int</span> b = ~a;<span class="comment">//b是有符号的整型，最高位表示的是符号位</span></span><br><span class="line">    <span class="comment">//取反后的二进制序列:1（符号位，1代表负数）1111111 11111111 11111111 11111111</span></span><br><span class="line">    <span class="comment">//~是按位取反的意思，位是二进制位。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,b);<span class="comment">//使用时，打印的是二进制的原码</span></span><br><span class="line">    <span class="comment">//打印的结果是-1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>原码、反码、补码：负数在内存中存储的时候，存储的是二进制的补码</p>
<h4 id="操作符之-类型-强制类型转换"><a href="#操作符之-类型-强制类型转换" class="headerlink" title="操作符之(类型)强制类型转换"></a>操作符之(类型)强制类型转换</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = (<span class="type">int</span>)<span class="number">3.14</span>;<span class="comment">//原先3.14是double类型，想转换成int型</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>原先3.14是double类型，想转换成int型，打印的结果是3。<br>不建议在代码中使用</p>
<h4 id="算数操作符"><a href="#算数操作符" class="headerlink" title="算数操作符"></a>算数操作符</h4><p>算数操作符包括+、-、*、&#x2F;、%(求余数)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">5</span>/<span class="number">2</span>;<span class="comment">//结果是2。</span></span><br><span class="line">    <span class="type">int</span> b = <span class="number">5</span>%<span class="number">2</span>;<span class="comment">//结果是1。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="移位操作符"><a href="#移位操作符" class="headerlink" title="移位操作符"></a>移位操作符</h4><p>移位操作符（移的是2进制位）  &gt;&gt;右移操作符、&lt;&lt;左移操作符</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//整型a占4个字节，32位，十进制是1，用2进制表示也就是 00000000 00000000 00000000 00000001</span></span><br><span class="line">    <span class="type">int</span> b = a&lt;&lt;<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//整型b是整型a左移1个字节的结果，也就是00000000 00000000 00000000 00000010，用十进制表示就是2</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);<span class="comment">//对a进行左移操作，a本身不变化。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="位操作符"><a href="#位操作符" class="headerlink" title="位操作符"></a>位操作符</h4><p>位操作符，操作的是2进制位。 &amp;（按位与） ^（按位异或） |（按位或）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">3</span>;<span class="comment">//a的二进制 0011</span></span><br><span class="line">    <span class="type">int</span> b = <span class="number">5</span>;<span class="comment">//b的二进制 0101</span></span><br><span class="line">    <span class="type">int</span> c = a&amp;b;</span><br><span class="line">    <span class="comment">//a和b按位与就是 0001，按位与也就是并且的意思，只有两个都是1，结果才是1，其余都是0。</span></span><br><span class="line">    <span class="type">int</span> d = a|b;</span><br><span class="line">    <span class="comment">//a和b按位或就是 0111,按位或就是有一个1结果就是1。</span></span><br><span class="line">    <span class="type">int</span> e = a^b;</span><br><span class="line">    <span class="comment">//a和b按位异或就是0110,按位异或就是：有1则1，全1则0。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,d);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,e);    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="赋值和判断"><a href="#赋值和判断" class="headerlink" title="赋值和判断"></a>赋值和判断</h4><p>赋值和判断：一个等号是赋值，两个等号是判断相等。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    a = <span class="number">20</span>;<span class="comment">//赋值，两个==是判断相等</span></span><br><span class="line">    a = a + <span class="number">10</span>;<span class="comment">//也是赋值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="单目操作符、双目操作符、三目操作符"><a href="#单目操作符、双目操作符、三目操作符" class="headerlink" title="单目操作符、双目操作符、三目操作符"></a>单目操作符、双目操作符、三目操作符</h4><p>&gt;<br>&gt;&#x3D;<br>&lt;<br>&lt;&#x3D;<br> !&#x3D; 用于测试不相等<br> &#x3D;&#x3D; 用于测试 相等</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> c = a + b;<span class="comment">//加号就是操作符，是双目操作符，就是左右有两个操作数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="逻辑与操作符-amp-amp"><a href="#逻辑与操作符-amp-amp" class="headerlink" title="逻辑与操作符&amp;&amp;"></a>逻辑与操作符&amp;&amp;</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> c = a &amp;&amp; b;<span class="comment">//a和b都不是0，所以都是真</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,c);<span class="comment">//a和b逻辑与的结果是1，因为逻辑与-全真则真，有假全假</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>a和b逻辑与的结果是1，因为逻辑与-全真则真，有假全假</p>
<h4 id="逻辑或操作符"><a href="#逻辑或操作符" class="headerlink" title="逻辑或操作符||"></a>逻辑或操作符||</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> c = a || b;<span class="comment">//a是假，b是真</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,c);<span class="comment">//逻辑或操作符，有一个是真，结果就是真</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>逻辑或操作符，有一个是真，结果就是真</p>
<h4 id="条件操作符（三目操作符）"><a href="#条件操作符（三目操作符）" class="headerlink" title="条件操作符（三目操作符）"></a>条件操作符（三目操作符）</h4><p><code>exp1 ? exp2 : exp3;</code><br>exp代表表达式，上式的意思是，如果exp1的结果为真，exp2位最终结果，如果exp1的结果为假，exp3为最终结果</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> max;</span><br><span class="line"><span class="comment">//    if (a&gt;b)</span></span><br><span class="line"><span class="comment">//        max = a;</span></span><br><span class="line"><span class="comment">//    else</span></span><br><span class="line"><span class="comment">//        max = b;</span></span><br><span class="line">    max = ( a &gt; b ? a : b );<span class="comment">//这个表达式和上面的if是一样的</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,max);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="常用关键字"><a href="#常用关键字" class="headerlink" title="常用关键字"></a>常用关键字</h3><h4 id="break"><a href="#break" class="headerlink" title="break"></a>break</h4><p>break-用于停止循环</p>
<h4 id="typedef-类型定义-类型重新定义"><a href="#typedef-类型定义-类型重新定义" class="headerlink" title="typedef-类型定义-类型重新定义"></a>typedef-类型定义-类型重新定义</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> num1 = <span class="number">20</span>;<span class="comment">//定义一个无符号呢整型num1</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">int</span> u_int;<span class="comment">//把unsigned int重定义成了u_int，就是别名</span></span><br><span class="line">    u_int num2 = <span class="number">20</span>;<span class="comment">//num1和num2两个变量的类型是一样的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>typedef unsigned int u_int;</code>把<code>unsigned int</code>重定义成了<code>u_int</code></p>
<h4 id="auto"><a href="#auto" class="headerlink" title="auto"></a>auto</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;<span class="comment">//局部变量-自动变量-在前面省略掉了auto</span></span><br><span class="line">    <span class="comment">//例如 auto int a = 10;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="static-函数"><a href="#static-函数" class="headerlink" title="static 函数"></a>static 函数</h4><p>static修饰函数,改变了函数的链接属性，普通函数有外部链接属性，被修饰后就没有了。</p>
<p>static修饰全局变量，改变了变量的作用域-让静态的全局变量只能在自己所在的文件内部使用，出了源文件就无法使用了。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>,a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;<span class="number">5</span>) &#123;</span><br><span class="line">        test();</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>a是静态的局部变量，被static修饰，局部变量的生命周期延长了。<br>输出的结果是：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">a = <span class="number">2</span></span><br><span class="line">a = <span class="number">3</span></span><br><span class="line">a = <span class="number">4</span></span><br><span class="line">a = <span class="number">5</span></span><br><span class="line">a = <span class="number">6</span></span><br></pre></td></tr></table></figure>
<p>相当于<code>static int a = 1;</code>只运行了一次？</p>
<h4 id="extern-用于声明外部符号"><a href="#extern-用于声明外部符号" class="headerlink" title="extern - 用于声明外部符号"></a>extern - 用于声明外部符号</h4><p>main.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">extern</span> <span class="type">int</span> g_val;<span class="comment">//声明外部符号</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;g_val = %d\n&quot;</span>,g_val);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>extern.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> g_val = <span class="number">100</span>;<span class="comment">//全局变量</span></span><br></pre></td></tr></table></figure>
<p>打印的结果是 <code>g_val = 100</code></p>
<p>extern声明外部函数<br>main.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> sum = Add(a,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sum = %d\n&quot;</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Add.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> z = x + y;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是<code>sum = 30</code></p>
<h3 id="define定义常量和宏"><a href="#define定义常量和宏" class="headerlink" title="define定义常量和宏"></a>define定义常量和宏</h3><p>define定义标识符常量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 1000</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//  int a = 100;</span></span><br><span class="line">    <span class="type">int</span> a = MAX;<span class="comment">//和上面的效果一样</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>define定义宏</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//宏的定义</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(X,Y) (X&gt;Y?X:Y)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> max = MAX(a,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;max = %d\n&quot;</span>,max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>指针变量的大小：在32位平台占4个字节，在64位平台占8个字节。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span>* p = &amp;a;<span class="comment">//取出a的地址</span></span><br><span class="line">    <span class="comment">//有一种变量是用来存放地址的，就是指针变量，类型是int*</span></span><br><span class="line">    *p = <span class="number">20</span>;<span class="comment">//*-解引用操作符，通过*p把a里面的值改成20</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,&amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,p);<span class="comment">//和a的地址一样</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有一种变量是用来存放地址的，就是指针变量。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch = <span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">    <span class="type">char</span>* pc = &amp;ch;</span><br><span class="line">    *pc = <span class="string">&#x27;a&#x27;</span>;<span class="comment">//通过*pc把ch里面的值改成a</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,ch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>分支和循环练习-字符从两端向中间移动</title>
    <url>/posts/509865fe.html</url>
    <content><![CDATA[<p>想要达到的效果<br> ABCDEFGHIJKLMN<br> ##############<br> A############N<br> AB##########MN<br>…</p>
<span id="more"></span>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span>** <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> arr1[] = <span class="string">&quot;ABCDEFGHIJKLMN&quot;</span>;</span><br><span class="line">    <span class="type">char</span> arr2[] = <span class="string">&quot;##############&quot;</span>;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//int right = (sizeof(arr1)/sizeof(arr1[0]))-2;//这里不能减1，要减2，因为这个数组最后一个是\n，不是N</span></span><br><span class="line">    <span class="type">int</span> right = <span class="built_in">strlen</span>(arr1) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        arr2[left] = arr1[left];</span><br><span class="line">        arr2[right] = arr1[right];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,arr2);</span><br><span class="line">        <span class="comment">//每打印一次休息一秒</span></span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        left++;</span><br><span class="line">        right--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>初识C语言（四）</title>
    <url>/posts/64e9b9a8.html</url>
    <content><![CDATA[<h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;<span class="comment">//向内存申请了4个字节的空间</span></span><br><span class="line">    <span class="type">int</span>* p = &amp;a;<span class="comment">//p是一个变量-是指针变量（用来存地址的）-类型是int型</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,&amp;a);<span class="comment">//%p是用来打印地址的，&amp;a是用来取a的地址的。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,p);<span class="comment">//打印的内容和上面是一样的</span></span><br><span class="line">    *p = <span class="number">20</span>;<span class="comment">//* - 解引用操作符（间接访问操作符）</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>,a);<span class="comment">//改变了a的值，a = 20</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> d = <span class="number">3.14</span>;</span><br><span class="line">    <span class="type">double</span>* pd = &amp;d;</span><br><span class="line">    *pd = <span class="number">5.5</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>,d);<span class="comment">//结果是5.500000</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>,*pd);<span class="comment">//结果和直接打印d是一样的</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(pd));<span class="comment">//打印的结果是4或8，主要取决于平台是32位或64位</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>指针变量的大小</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">char</span>*));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">short</span>*));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">int</span>*));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">double</span>*));<span class="comment">//打印的结果都是4或8，主要取决于平台是32位或64位</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>指针变量的大小是4或8字节，主要取决于32位平台（4字节）或64位平台（8字节）</p>
<h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><p>想描述一个复杂对象，需要使用结构体，结构体就是自己创造出来的一种类型。<br>例如想创造一本书，需要书名、作者、出版社、定价等信息。<br>struct关键字-struct Book。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">//创建一个结构体类型Book</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Book</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];<span class="comment">//C语言程序设计</span></span><br><span class="line">    <span class="type">short</span> price;<span class="comment">//价格是55</span></span><br><span class="line">&#125;;<span class="comment">//此分号用于结束类型定义</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//利用结构体类型-创建一个该类型的变量b1</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Book</span> <span class="title">b1</span> =</span> &#123;<span class="string">&quot;C语言程序设计&quot;</span>,<span class="number">55</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;书名：%s\n&quot;</span>,b1.name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;价格：%d元\n&quot;</span>,b1.price);<span class="comment">//打印信息</span></span><br><span class="line">    b1.price = <span class="number">15</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(b1.name,<span class="string">&quot;C++&quot;</span>); <span class="comment">//strcpy-string copy - 字符串拷贝 - 库函数string.h</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;修改后书名：%s\n&quot;</span>,b1.name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;修改后的价格：%d元\n&quot;</span>,b1.price);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结构体中想要修改数组内容，需要用到字符串拷贝函数 - strcpy。<br><code>strcpy(b1.name,&quot;C++&quot;);</code>的意思是把结构体<code>b1</code>中的<code>name</code>改成<code>C++</code>。<br>要使用strcpy，需要string.h库函数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Book</span> <span class="title">b1</span> =</span> &#123;<span class="string">&quot;C语言程序设计&quot;</span>,<span class="number">55</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Book</span>* <span class="title">pb</span> =</span> &amp;b1;</span><br><span class="line">    <span class="comment">//利用pb打印出书名和价格</span></span><br><span class="line"><span class="comment">//    printf(&quot;%s\n&quot;,(*_pb).name);</span></span><br><span class="line"><span class="comment">//    printf(&quot;%d\n&quot;,(_*pb).price);</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,pb-&gt;name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,pb-&gt;price);<span class="comment">//使用箭头-&gt;和上面的点.操作符是一样的</span></span><br><span class="line">    <span class="comment">//.  结构体变量.成员</span></span><br><span class="line">    <span class="comment">//-&gt; 结构体指针-&gt;成员</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>分支和循环之for循环</title>
    <url>/posts/144e24ab.html</url>
    <content><![CDATA[<p>语法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(表达式<span class="number">1</span>:表达式<span class="number">2</span>:表达式<span class="number">3</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	    循环语句;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>
<p>表达式1是 初始化部分，用于 初始化循环变量。<br>表达式2是 条件判断部分，用于 判断循环时候终止。<br>表达式3是 调整部分，用于 循环条件的调整</p>
<p><img src="/posts/144e24ab/img1.png" alt="for语句图解"></p>
<p>while循环实现i自增到10</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;<span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">while</span> (i&lt;<span class="number">10</span>) &#123;<span class="comment">//判断</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        i++;<span class="comment">//调整</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="for循环实现i自增到10"><a href="#for循环实现i自增到10" class="headerlink" title="for循环实现i自增到10"></a>for循环实现i自增到10</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//初始化，判断，调整</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=<span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//初始化，判断，调整</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=<span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">5</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);<span class="comment">//打印的结果是1 2 3 4</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是1 2 3 4，当i==5时，跳出了for循环。</p>
<h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//初始化，判断，调整</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=<span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">5</span>)</span><br><span class="line">            <span class="keyword">continue</span>;<span class="comment">//continue 跳过了打印5，又回到了for循环的判断</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i);<span class="comment">//打印的结果是1 2 3 4 6 7 8 9 10</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>continue 跳过了打印5，又回到了for循环的判断。</p>
<h3 id="不可以在for循环内部改变循环变量，防止for循环失去控制"><a href="#不可以在for循环内部改变循环变量，防止for循环失去控制" class="headerlink" title="不可以在for循环内部改变循环变量，防止for循环失去控制"></a>不可以在for循环内部改变循环变量，防止for循环失去控制</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i = <span class="number">5</span>)<span class="comment">//这里不是判断，是赋值。这里修改了for循环内部的循环变量，导致死循环</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;haha\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="建议for语句的循环控制变量的取值采用“前闭后开区间”写法"><a href="#建议for语句的循环控制变量的取值采用“前闭后开区间”写法" class="headerlink" title="建议for语句的循环控制变量的取值采用“前闭后开区间”写法"></a>建议for语句的循环控制变量的取值采用“前闭后开区间”写法</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)<span class="comment">//这里尽量写i&lt;10，而不是i&lt;=9。虽然运行结果一致，但显然前面的写法是有意义的，代表10次打印（循环、元素）</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>for (i=0;i&lt;10;i++)&#123;...&#125;</code>这里尽量写i &lt; 10，而不是i &lt;&#x3D; 9。虽然运行结果一致，但显然前面的写法是有意义的，代表10次打印（循环、元素）。</p>
<h3 id="一些for循环的变种"><a href="#一些for循环的变种" class="headerlink" title="一些for循环的变种"></a>一些for循环的变种</h3><p>变种一</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>for循环的初始化、调整、判断均可省略。<br>for循环的判断部分一旦省略，判断结果一直是真，导致死循环。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;<span class="number">10</span>; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>);<span class="comment">//打印的结果是100个hehe</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上例打印的结果是100个hehe。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (; j&lt;<span class="number">10</span>; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>);<span class="comment">//打印的结果是10个hehe</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上例打印的结果是10个hehe。</p>
<p>变种二：两个循环变量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    <span class="keyword">for</span> (x=<span class="number">0</span>,y=<span class="number">0</span>; x&lt;<span class="number">2</span> &amp;&amp; y&lt;<span class="number">5</span>; ++x,y++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>);<span class="comment">//用了2个循环变量，打印的结果是两个hehe</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上例打印的结果是两个hehe。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>,k=<span class="number">0</span>; k=<span class="number">0</span>; i++,k++)<span class="comment">//中间的判断部分k=0是判断，0为假，不进入for循环，循环0次</span></span><br><span class="line">        k++;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于0代表恒为假，不进入for循环。</p>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>初识结构体</title>
    <url>/posts/9dfc380a.html</url>
    <content><![CDATA[<h3 id="结构体类型声明"><a href="#结构体类型声明" class="headerlink" title="结构体类型声明"></a>结构体类型声明</h3><p>结构是一些值的集合，这些值称为成员变量。结构的每个成员可以是不同类型的变量。</p>
<span id="more"></span>
<p>结构的声明：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tag</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	member-<span class="built_in">list</span>;</span><br><span class="line">&#125;</span><br><span class="line">variable-<span class="built_in">list</span>;</span><br></pre></td></tr></table></figure>
<p><code>struct</code>：结构体关键字<br><code>tag</code>：结构体标签<br><code>struct tag</code>：结构体类型<br><code>member-list</code>：结构体成员<br><code>variable-list</code>：变量列表</p>
<p>例如描述一个学生：<br>——名字、年龄、电话、性别</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">short</span> age;</span><br><span class="line">    <span class="type">char</span> tele[<span class="number">12</span>];</span><br><span class="line">    <span class="type">char</span> sex[<span class="number">5</span>];</span><br><span class="line">&#125;s1,s2,s3;<span class="comment">//s1,s2,s3是3个全局的结构体变量（尽量少使用）</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> <span class="title">s</span>;</span><span class="comment">//s是局部的结构体变量</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>s1,s2,s3</code>是3个全局的结构体变量（尽量少使用）<br><code>s</code>是局部的结构体变量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">short</span> age;</span><br><span class="line">    <span class="type">char</span> tele[<span class="number">12</span>];</span><br><span class="line">    <span class="type">char</span> sex[<span class="number">5</span>];</span><br><span class="line">&#125;Stu;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Stu s2;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>typedef struct Stu&#123;...&#125;Stu</code>意思是把<code>struct Stu</code>重新取名字叫<code>Stu</code>。<br>有关typedef：<a href="https://blog.zmyu.cc/posts/d3c4a0cd.html#typedef-%E7%B1%BB%E5%9E%8B%E5%AE%9A%E4%B9%89-%E7%B1%BB%E5%9E%8B%E9%87%8D%E6%96%B0%E5%AE%9A%E4%B9%89">参见</a></p>
<h4 id="结构体成员的类型"><a href="#结构体成员的类型" class="headerlink" title="结构体成员的类型"></a>结构体成员的类型</h4><p>可以是标量、数组、指针或其他结构体</p>
<h3 id="结构体变量的定义和初始化"><a href="#结构体变量的定义和初始化" class="headerlink" title="结构体变量的定义和初始化"></a>结构体变量的定义和初始化</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">short</span> age;</span><br><span class="line">    <span class="type">char</span> tele[<span class="number">12</span>];</span><br><span class="line">    <span class="type">char</span> sex[<span class="number">5</span>];</span><br><span class="line">&#125;Stu;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Stu s1 = &#123;<span class="string">&quot;张三&quot;</span>,<span class="number">20</span>,<span class="string">&quot;18888888888&quot;</span>,<span class="string">&quot;男&quot;</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> <span class="title">s2</span> =</span> &#123;<span class="string">&quot;李四&quot;</span>,<span class="number">99</span>,<span class="string">&quot;12345678900&quot;</span>,<span class="string">&quot;女&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="type">char</span> arr[<span class="number">20</span>];</span><br><span class="line">    <span class="type">double</span> d;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> ch[<span class="number">10</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">S</span> <span class="title">s</span>;</span><span class="comment">//结构体里包含了另一个结构体</span></span><br><span class="line">    <span class="type">char</span> *pc;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> arr[] = <span class="string">&quot;def&quot;</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">T</span> <span class="title">t</span> =</span> &#123;<span class="string">&quot;abc&quot;</span>,&#123;<span class="number">100</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&quot;hello world&quot;</span>,<span class="number">333.333</span>&#125;,arr&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,t.ch);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,t.s.arr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>,t.s.d);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">abc</span><br><span class="line">hello world</span><br><span class="line">333.333000</span><br></pre></td></tr></table></figure>

<h3 id="结构体成员的访问"><a href="#结构体成员的访问" class="headerlink" title="结构体成员的访问"></a>结构体成员的访问</h3><p>结构体变量访问成员，是通过点操作符(.)访问的。</p>
<h3 id="结构体传参"><a href="#结构体传参" class="headerlink" title="结构体传参"></a>结构体传参</h3><p>下例打印结构体数据：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">short</span> age;</span><br><span class="line">    <span class="type">char</span> tele[<span class="number">12</span>];</span><br><span class="line">    <span class="type">char</span> sex[<span class="number">5</span>];</span><br><span class="line">&#125;Stu;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print1</span><span class="params">(Stu s)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;name : %s\n&quot;</span>,s.name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;age : %d\n&quot;</span>,s.age);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;telephone : %s\n&quot;</span>,s.tele);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sex : %s\n&quot;</span>,s.sex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Stu s1 = &#123;<span class="string">&quot;张三&quot;</span>,<span class="number">20</span>,<span class="string">&quot;18888888888&quot;</span>,<span class="string">&quot;男&quot;</span>&#125;;</span><br><span class="line">    print1(s1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或使用箭头操作符</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">short</span> age;</span><br><span class="line">    <span class="type">char</span> tele[<span class="number">12</span>];</span><br><span class="line">    <span class="type">char</span> sex[<span class="number">5</span>];</span><br><span class="line">&#125;Stu;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print2</span><span class="params">(Stu* ps)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;name : %s\n&quot;</span>,ps-&gt;name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;age : %d\n&quot;</span>,ps-&gt;age);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;telephone : %s\n&quot;</span>,ps-&gt;tele);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sex : %s\n&quot;</span>,ps-&gt;sex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Stu s1 = &#123;<span class="string">&quot;张三&quot;</span>,<span class="number">20</span>,<span class="string">&quot;18888888888&quot;</span>,<span class="string">&quot;男&quot;</span>&#125;;</span><br><span class="line">    print2(&amp;s1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>print2的函数性能优于print1，直接通过指针，可以节约内存空间。</p>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>初识C语言（二）</title>
    <url>/posts/9eda039f.html</url>
    <content><![CDATA[<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串，由双引号引起来的一串字符，称为字符串字面值，或者简称字符串。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">    <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="string">&quot;&quot;</span>;<span class="comment">//空字符串</span></span><br><span class="line">    <span class="comment">//上面三个都是字符串。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p><code>&quot;&quot;;</code>代表空字符串</p>
<p>字符串的结束标志是一个<code>\0</code>的转义字符。在计算字符串长度的时候<code>\0</code>是结束标志，不算做字符串的内容。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> arr1[] = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    <span class="type">char</span> arr2[] = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(arr1));<span class="comment">//strlen-string length-用于计算字符串长度</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(arr2));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果是3和随机值</span></span><br></pre></td></tr></table></figure>
<p><code>strlen</code>就是string length的缩写，用于计算字符串长度。</p>
<p>arr1这个数列包括的内容就是<code>a</code>,<code>b</code>,<code>c</code>,<code>\0</code>，计算长度时，最后一个不计算，所以是字符串长度就是3。<br>arr2这个数列包括<code>a</code>,<code>b</code>,<code>c</code>，最后不是<code>\0</code>结尾。在计算长度时，一直找到<code>\0</code>为止，长度不确定是多少。</p>
<h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>转义字符-把原来的意思转变了。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;abc\n&quot;</span>);<span class="comment">//把\n的意思转变了，变成了换行。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>printf(&quot;abc\n&quot;);</code>这里转义字符<code>\n</code>就是把n的意思变成了换行。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c:\test\32\test.c&quot;</span>);</span><br><span class="line">    <span class="comment">//无法正常打印，因为\t是水平制表符，想要显示一个反斜杠，要输入\\，两个反斜杠</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c:\\test\\32\\test.c&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的例子看出，想要显示一个反斜杠，需要输入两个反斜杠就可以正常显示。</p>
<h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p>C语言实现循环的方式：while、for、do…while等</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(a&lt;<span class="number">20000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;a=%d\n&quot;</span>,a);</span><br><span class="line">        a = a + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a&gt;=<span class="number">20000</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;a&gt;=20000\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>while(a&lt;20000)&#123;……&#125;</code>的意思就是当a小于20000时，一直执行括号里的内容，直到a不再小于20000。</p>
<h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3><p>自定义函数,就是自己设计的函数，可以简化代码，复用代码。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//两数相加</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line">    <span class="type">int</span> z = x + y;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> num2 = <span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> sum1 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> sum2 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">200</span>;</span><br><span class="line">    sum1 = Add(num1,num2);</span><br><span class="line">    sum2 = Add(a,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sum1 = %d\n&quot;</span>,sum1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sum2 = %d\n&quot;</span>,sum2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="选择语句-if"><a href="#选择语句-if" class="headerlink" title="选择语句 if"></a>选择语句 if</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入1或0:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;input);</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;输入的数是1\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;输入的数是0\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数据就是一组相同类型元素的集合，数组的下标从0开始，依次递增1。<br><code>int arr[10];</code>   定义一个存放10个整数数字的数组。<br><code>char ch[20];</code>    定义一个存放20个字符的数组。<br><code>float fl[20];</code>   定义一个存放20个浮点数的数组。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;<span class="comment">//定义一个数组，最多放10个元素</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;<span class="number">10</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d,&quot;</span>,arr[i]);</span><br><span class="line">        i = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码的功能是打印出arr这个数组的每个元素的内容。</p>
<h3 id="常属性"><a href="#常属性" class="headerlink" title="常属性"></a>常属性</h3><p>const - 常属性，不能再更改数值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> num = <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,num);</span><br><span class="line">    num = <span class="number">8</span>;<span class="comment">//num不会等于8，因为num是常属性。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,num);</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> n = <span class="number">10</span>;<span class="comment">//n是变量，但是有常属性，所以我们说n是常变量，本质上是变量，使用常量时，不能用n。</span></span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;<span class="comment">//arr里面不能写n，因为这里要写常量，n是变量。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>const int n = 10;</code> n是变量，但是有常属性，所以我们说n是常变量，本质上是变量，使用常量时，不能用n。</p>
<h3 id="标识符常量"><a href="#标识符常量" class="headerlink" title="标识符常量"></a>标识符常量</h3><p><code>#define</code>定义 标识符常量，例如<code>#define MAX 10</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 10</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">define</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[MAX] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,MAX);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="枚举常量"><a href="#枚举常量" class="headerlink" title="枚举常量"></a>枚举常量</h3><p>枚举，一一列举，比如性别，三原色、星期几等。<br>枚举关键字：<code>enum</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Sex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    MALE,</span><br><span class="line">    FEMALE,</span><br><span class="line">    SECRET</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//上面的三个就是枚举常量</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Sex</span> <span class="title">s</span> =</span> FEMALE;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,MALE);<span class="comment">//0</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,FEMALE);<span class="comment">//1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,SECRET);<span class="comment">//2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>分支和循环之if语句</title>
    <url>/posts/9ae69c44.html</url>
    <content><![CDATA[<p>C语言是一门 结构化 的程序设计语言<br>C语言分为三种结构</p>
<ul>
<li>1、顺序结构</li>
<li>2、选择结构</li>
<li>3、循环结构<span id="more"></span></li>
</ul>
<p>分支和循环语句：<br>分支语句（选择结构） <code>if</code>、<code>switch</code><br>循环语句 <code>while</code>、<code>for</code>、<code>do while</code></p>
<p>什么是语句？<br>-由分号<code>;</code>隔开的就是一个语句</p>
<h3 id="单分支的if语句"><a href="#单分支的if语句" class="headerlink" title="单分支的if语句"></a>单分支的if语句</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> age = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">if</span> (age &lt; <span class="number">18</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;未成年\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="双分支的if语句"><a href="#双分支的if语句" class="headerlink" title="双分支的if语句"></a>双分支的if语句</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> age = <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">if</span> (age &lt; <span class="number">18</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;未成年\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;成年\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="多分支if语句"><a href="#多分支if语句" class="headerlink" title="多分支if语句"></a>多分支if语句</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> age = <span class="number">56</span>;</span><br><span class="line">    <span class="keyword">if</span> (age &lt; <span class="number">18</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;未成年\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (age &gt;= <span class="number">18</span> &amp;&amp; age &lt; <span class="number">28</span>)<span class="comment">//&amp;&amp; 逻辑与，不可以使用18 &lt;= age &lt; 28表示</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;青年\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (age &gt;= <span class="number">28</span> &amp;&amp; age &lt; <span class="number">50</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;壮年\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (age &gt;= <span class="number">50</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;老年\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>&amp;&amp;</code> 逻辑与，不可以使用18 &lt;&#x3D; age &lt; 28表示。</p>
<p>C语言中如何表示真假？<br>-0表示假，非0就是真</p>
<h3 id="使用代码块的if语句"><a href="#使用代码块的if语句" class="headerlink" title="使用代码块的if语句"></a>使用代码块的if语句</h3><p>如果条件成立，要执行多条语句，要使用代码块{}</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> age = <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">if</span> (age &lt; <span class="number">18</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;未成年\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;小于18岁\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (age &gt;= <span class="number">18</span> &amp;&amp; age &lt; <span class="number">28</span>)<span class="comment">//&amp;&amp; 逻辑与，不可以使用18 &lt;= age &lt; 28表示</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;青年\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (age &gt;= <span class="number">28</span> &amp;&amp; age &lt; <span class="number">50</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;壮年\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (age &gt;= <span class="number">50</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;老年\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一对<code>&#123; &#125;</code>就是一个代码块。</p>
<p>要点：if和else组对是<strong>就近原则</strong>的。</p>
<h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><p>示例一：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">if</span> (condition) &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>条件成立，返回x，否则返回y。</p>
<p>示例二：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (condition)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>条件成立，返回x，否则返回y</p>
<p>示例三：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">if</span> (num = <span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;呵呵\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是呵呵，因为<code>num = 5</code>是赋值，<code>num == 5</code>才是判断，想要判断相等时，可以 <code>5 == num</code>，这样可以避免错误。
   </p>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>删除字符串中的指定字符</title>
    <url>/posts/3b6c6ce3.html</url>
    <content><![CDATA[<p>题目：删除一个字符串中的指定字母，如：字符串“aca”，删除其中的a字母。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Check</span><span class="params">(<span class="type">char</span>* arr,<span class="type">char</span> input)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;<span class="comment">//i就是输入的字符串的长度</span></span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (arr[i] != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;i; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[j] == input)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (arr[j] != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> arr[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">char</span> input;</span><br><span class="line">    <span class="type">int</span> sz;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入字符串：-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,arr);</span><br><span class="line">    <span class="keyword">while</span> (getchar()!=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入要删除的字符:-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;input);</span><br><span class="line">    Check(arr,input);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,arr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>初识指针</title>
    <url>/posts/89734f24.html</url>
    <content><![CDATA[<h3 id="指针是什么？"><a href="#指针是什么？" class="headerlink" title="指针是什么？"></a>指针是什么？</h3><p>指针就是一个变量，变量里存着地址，就是通过它可以找到对应的内存单元。<br>也就是说：指针就是地址，地址就是指针。</p>
<span id="more"></span>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>* p = &amp;a;<span class="comment">//指针变量</span></span><br></pre></td></tr></table></figure>
<p><code>int* p = &amp;a;</code>这里我们对变量a，取出它的地址，可以使用&amp;操作符。<br>将a的地址存在变量p中，p就是一个指针变量。<br>存放在指针中的值都被当成地址处理。</p>
<p>指针类型决定了进行解引用操作时能访问的空间大小<br><code>int* p</code>能访问4字节<br><code>char* p</code>能访问1字节<br><code>double* p</code>能访问8字节<br>指针类型要根据需要，选择合适的。</p>
<hr>
<h3 id="指针-整数"><a href="#指针-整数" class="headerlink" title="指针+-整数"></a>指针+-整数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0x11223344</span>;</span><br><span class="line">    <span class="type">int</span>* pa = &amp;a;</span><br><span class="line">    <span class="type">char</span>* pc = &amp;a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,pa);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,pa+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,pc);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,pc+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x16fdff2a8</span><br><span class="line">0x16fdff2ac</span><br><span class="line">0x16fdff2a8</span><br><span class="line">0x16fdff2a9</span><br></pre></td></tr></table></figure>
<p>pa是整型，加1跳过4个字节。<br>pc是字符型，加1跳过1个字节。<br>指针类型决定了：指针走一步走多远（指针的步长），单位是字节</p>
<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span>* p = arr;<span class="comment">//数组名-首元素地址,创建的指针变量p，存放了数组中第一个元素地址。</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">        *(p+i) = <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="comment">//把数组中每个元素都改成了1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h3><p>野指针就是指指针指向的位置是不可知的（随机的、不正确的、没有明确限制的）</p>
<h4 id="野指针原因"><a href="#野指针原因" class="headerlink" title="野指针原因"></a>野指针原因</h4><p>1、指针未初始化</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">    <span class="type">int</span> a;<span class="comment">//局部变量不初始化，默认是随机值。</span></span><br><span class="line">    <span class="type">int</span>* p;<span class="comment">//局部的指针变量，就被初始化随机值。</span></span><br><span class="line">    *p = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、指针越界访问</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> *p = arr;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">12</span>; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        p++;<span class="comment">//越出了数组范围</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>3、指针指向的空间释放了</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>* <span class="title function_">test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">return</span> &amp;a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> *p = test();</span><br><span class="line">	*p = <span class="number">20</span>;<span class="comment">//地址指向的空间已经释放了。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如何避免野指针？</p>
<ul>
<li>指针要初始化</li>
<li>小心指针越界</li>
<li>指针指向空间释放即使置NULL-不知道给什么值就给NULL</li>
<li>指针使用之前检查有效性</li>
</ul>
<hr>
<h3 id="指针运算"><a href="#指针运算" class="headerlink" title="指针运算"></a>指针运算</h3><ul>
<li>指针+-整数</li>
<li>指针-指针</li>
<li>指针的关系运算<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="type">int</span>* p = arr;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;sz; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,*p);</span><br><span class="line">        p = p + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,&amp;arr[<span class="number">9</span>] - &amp;arr[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>
<p>打印的结果是9。由此知，指针-指针，得到的结果是中间元素的个数。<br>警告⚠️：不可以让两个不同的指针相减。</p>
<p>模拟实现strlen效果：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">my_strlen</span><span class="params">(<span class="type">char</span>* str)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span>* start = str;</span><br><span class="line">    <span class="type">char</span>* end = str;</span><br><span class="line">    <span class="keyword">while</span> (*end != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        end++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> end - start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> arr[] = <span class="string">&quot;bit&quot;</span>;</span><br><span class="line">    <span class="type">int</span> len = my_strlen(arr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,len);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> N_VALUES 5</span></span><br><span class="line"><span class="type">float</span> values[N_VALUES];</span><br><span class="line"><span class="type">float</span> *vp;</span><br><span class="line"><span class="keyword">for</span>(vp = &amp;values[N_VALUES]; vp&gt;&amp;values[<span class="number">0</span>] ; )</span><br><span class="line">&#123;</span><br><span class="line">	*--vp = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>允许指向数组元素的指针与指向数组最后一个元素后面的那个内存位置的指针进行比较，但是不允许与指向第一个元素之前的那个内存位置的指针进行比较。</p>
<hr>
<h3 id="指针和数组"><a href="#指针和数组" class="headerlink" title="指针和数组"></a>指针和数组</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,arr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,&amp;arr[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>
<p>打印的结果是一致的，可以认为arr就是数组首元素的地址。即arr和&amp;arr[0]是一致的。<br>但是有2个例外：</p>
<ul>
<li>&amp;arr - &amp;数组名 - 不是首元素地址- 数组名表示整个数组 - 取出的是整个数组的地址。（但是打印出来的结果还是首元素地址）</li>
<li>sizeof内部 - sizeof(arr) - sizeof(数组名) - 表示整个数组的大小。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,arr+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,&amp;arr[<span class="number">0</span>]+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,&amp;arr+<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>打印的结果是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x16fdff284</span><br><span class="line">0x16fdff284</span><br><span class="line">0x16fdff2a8</span><br></pre></td></tr></table></figure>
<p>上面的结果可知，&amp;arr取出的是整个数组的地址。</p>
<h4 id="数组可以通过指针访问"><a href="#数组可以通过指针访问" class="headerlink" title="数组可以通过指针访问"></a>数组可以通过指针访问</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span>* p = arr;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span>* p = arr;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>;i&lt;<span class="number">10</span>; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%p  =====  %p\n&quot;</span>,p+i,&amp;arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x16fdff280  =====  0x16fdff280</span><br><span class="line">0x16fdff284  =====  0x16fdff284</span><br><span class="line">0x16fdff288  =====  0x16fdff288</span><br><span class="line">0x16fdff28c  =====  0x16fdff28c</span><br><span class="line">0x16fdff290  =====  0x16fdff290</span><br><span class="line">0x16fdff294  =====  0x16fdff294</span><br><span class="line">0x16fdff298  =====  0x16fdff298</span><br><span class="line">0x16fdff29c  =====  0x16fdff29c</span><br><span class="line">0x16fdff2a0  =====  0x16fdff2a0</span><br><span class="line">0x16fdff2a4  =====  0x16fdff2a4</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span>* p = arr;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>;i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">        *(p+i) = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>;i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="二级指针"><a href="#二级指针" class="headerlink" title="二级指针"></a>二级指针</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span>* pa = &amp;a;<span class="comment">//pa就是一级指针变量，int*就是一级指针类型</span></span><br><span class="line">    <span class="type">int</span>** ppa = &amp;pa;<span class="comment">//ppa就是二级指针变量，int**就是二级指针类型</span></span><br><span class="line">    <span class="type">int</span>*** pppa = &amp;ppa; <span class="comment">//三级指针</span></span><br><span class="line">    <span class="keyword">return</span>** <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>int** ppa = &amp;pa;</code> ppa就是二级指针变量，int**就是二级指针类型<br>int**中后面的*代表是个指针变量，指向int*这个指针</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span>* pa = &amp;a;<span class="comment">//pa就是一级指针变量，int*就是一级指针类型</span></span><br><span class="line">    <span class="type">int</span>** ppa = &amp;pa;<span class="comment">//ppa就是二级指针变量，int**就是二级指针类型</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,**ppa);</span><br><span class="line">    **ppa = <span class="number">20</span>;<span class="comment">//通过二级指针修改a的值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,**ppa);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是10和20</p>
<hr>
<h3 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h3><ul>
<li><p>指针数组 本质是数组 - 存放指针的数组</p>
</li>
<li><p>数组指针 本质是指针</p>
</li>
<li><p>整型数组 - 存放整型</p>
</li>
<li><p>字符数组 - 存放字符</p>
</li>
<li><p>指针数组 - 存放指针</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> c = <span class="number">30</span>;</span><br><span class="line"><span class="comment">//    int* pa = &amp;a;</span></span><br><span class="line"><span class="comment">//    int* pb = &amp;b;</span></span><br><span class="line"><span class="comment">//    int* pc = &amp;c;</span></span><br><span class="line">    <span class="type">int</span>* arr[<span class="number">3</span>]  = &#123;&amp;a,&amp;b,&amp;c&#125;;<span class="comment">//指针数组</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">3</span>; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,*(arr[i]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是10 20 30</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>利用递归方法求5!</title>
    <url>/posts/60609bd8.html</url>
    <content><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> input)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (input==<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> input*factorial(input<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,factorial(<span class="number">5</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>动态内存管理</title>
    <url>/posts/90cab692.html</url>
    <content><![CDATA[<h3 id="为什么存在动态内存分配"><a href="#为什么存在动态内存分配" class="headerlink" title="为什么存在动态内存分配"></a>为什么存在动态内存分配</h3><ul>
<li>之前开辟空间大小是固定的</li>
<li>数组在创建时必须制定数组长度。<br>动态内存分配，解决上面的问题。可以让内存分配更灵活。<span id="more"></span></li>
</ul>
<h2 id="动态内存函数介绍"><a href="#动态内存函数介绍" class="headerlink" title="动态内存函数介绍"></a>动态内存函数介绍</h2><h3 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h3><p>动态内存开辟。需要引用<code>stdlib.h</code>头文件。</p>
<p><code>void* malloc(size_t size);</code><br>malloc会返回一个指针指向开辟好的空间，当申请空间失败时，会返回一个NULL。<br>注意⚠️：使用这个函数，一定要检查是否申请成功，因为它可能申请失败。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//向内存申请10个整型空间</span></span><br><span class="line">    <span class="type">int</span>* p = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="number">10</span>*<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">if</span> (p==<span class="literal">NULL</span>) <span class="comment">//检查是否申请成功</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//开辟成功，可以使用空间</span></span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) </span><br><span class="line">        &#123;</span><br><span class="line">            *( p + i ) = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,*(p+i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当动态申请的空间不使用的时候，要还给操作系统。使用free函数。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是<code>0 1 2 3 4 5 6 7 8 9 </code></p>
<p>把申请10个int型的空间修改为<code>int* p = (int*)malloc(INTMAX_MAX);</code>时，返回<code>Cannot allocate memory</code>没有足够的空间。</p>
<p>如果申请的size空间为0，这种行为是标准未定义的，取决于编译器。（不要这样写）</p>
<h3 id="free"><a href="#free" class="headerlink" title="free"></a>free</h3><p>对动态开辟的空间进行回收和释放。<br><code>void free(void *memblock);</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//向内存申请10个整型空间</span></span><br><span class="line">    <span class="type">int</span>* p = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="number">40</span>);</span><br><span class="line">    <span class="keyword">if</span> (p==<span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,strerror(errno));</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//开辟成功，可以使用空间</span></span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">            *( p + i ) = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,*(p+i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span> (p);<span class="comment">//释放申请的空间</span></span><br><span class="line">    p = <span class="literal">NULL</span>;<span class="comment">//将p赋值为空指针</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>free (p);</code>将空间释放。但是p的值是没有改变的。<br>使用free释放空间后最好运行：<code>p = NULL;</code></p>
<p>free的空间必须是动态开辟出来的，如果不是动态开辟出来的，这种行为是标准未定义的。</p>
<p>当程序结束时，即使没写free函数，操作系统也会将空间回收♻️。</p>
<h3 id="calloc"><a href="#calloc" class="headerlink" title="calloc"></a>calloc</h3><p>开辟空间，并把元素改成0。<br><code>void *calloc(size_t num,size_t size);</code><br><code>size_t num</code>是元素个数，<code>size_t size</code>是每个元素的大小（字节）。<br>开辟空间，用指针返回，空间不足时，返回空指针NULL。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span>  </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span>* p = <span class="built_in">calloc</span>(<span class="number">10</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">if</span> (p==<span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">10</span>; i++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,*(p+i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放空间，用free函数。</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    p = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是<code>0 0 0 0 0 0 0 0 0 0 </code></p>
<h4 id="calloc和malloc的区别"><a href="#calloc和malloc的区别" class="headerlink" title="calloc和malloc的区别"></a>calloc和malloc的区别</h4><p>希望开辟的空间内容为0，使用calloc;<br>希望开辟的空间不要初始化，使用malloc;</p>
<h3 id="realloc"><a href="#realloc" class="headerlink" title="realloc"></a>realloc</h3><p>realloc让动态开辟的空间更灵活。<br>可以调整动态开辟空间的内存大小。</p>
<p><code>void *realloc(void *memblock,size_t size);</code><br><code>void *memblock</code>是之前开辟好的动态空间，<code>size_t size</code>是新的大小（字节）。</p>
<p>返回一个指针指向新开辟的内存块，</p>
<p>realloc使用注意事项：</p>
<ul>
<li>如果p指向的空间之后有足够的内存空间，直接追加内存，后返回p</li>
<li>如果p指向的空间之后没有足够的内存空间，则realloc会重新找一块新的内存区域，开辟一块新的满足需求的空间，并把原先内存中的拷贝至新内存空间，释放旧内存空间，最后返回新开辟的内存空间地址。</li>
<li>使用新变量来接受realloc的返回值，因为它可能申请失败，使用新变量来避免之前保存的内容丢失。</li>
<li>当动态申请的空间不使用的时候，要还给操作系统。使用free函数。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> *p = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="number">20</span>);</span><br><span class="line">    <span class="keyword">if</span> ( p == <span class="literal">NULL</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">            *(p+i) = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//上面是使用malloc开辟的空间，20字节</span></span><br><span class="line">    <span class="comment">//20个字节不够了，想要40个字节，使用realloc调整</span></span><br><span class="line">    <span class="type">int</span>* p2 =  <span class="built_in">realloc</span>(p, <span class="number">40</span>);</span><br><span class="line">    <span class="keyword">if</span> (p2 == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//追加失败</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//追加成功</span></span><br><span class="line">        p = p2;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">5</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">            *(p+i) = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,*(p+i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放内存</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    p = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="常见的动态内存错误"><a href="#常见的动态内存错误" class="headerlink" title="常见的动态内存错误"></a>常见的动态内存错误</h2><ul>
<li>对空指针(NULL)的解引用操作</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> *p = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="number">40</span>);</span><br><span class="line">    <span class="comment">//万一malloc失败了，p会被赋值为NULL</span></span><br><span class="line">    <span class="comment">//所以使用malloc返回后必需要进行判断！</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        *(p+i) = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    p = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>对开辟的空间进行越界访问</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> *p = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="number">5</span> * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">if</span> (p==<span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)<span class="comment">//只开辟了5个整型的元素，越界访问</span></span><br><span class="line">        &#123;</span><br><span class="line">            *(p+i) = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    p = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>对非动态开辟的空间使用free</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span>* p = &amp;a;</span><br><span class="line">    *p = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    p = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用free释放一块动态开辟内存的一部分</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span>* p = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="number">40</span>);</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        *p++ = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//回收空间</span></span><br><span class="line">    <span class="built_in">free</span>(p);<span class="comment">//p改变了，经过了10次++，不再是原先的开辟的空间</span></span><br><span class="line">    p = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>对同一块动态内存多次释放</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span>* p = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="number">40</span>);</span><br><span class="line">    <span class="keyword">if</span> (p==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用</span></span><br><span class="line">    <span class="comment">//释放</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="comment">//p = NULL;</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为避免这种情况，谁开辟，谁回收。<br>但只要第一是释放之后，把p置成了空指针，后面的释放就没有意义了，程序可以正常运行。</p>
<ul>
<li>动态开辟的内存忘记释放（内存泄露）</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">malloc</span>(<span class="number">1</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="C-x2F-C-程序的内存开辟"><a href="#C-x2F-C-程序的内存开辟" class="headerlink" title="C&#x2F;C++程序的内存开辟"></a>C&#x2F;C++程序的内存开辟</h3><p>C&#x2F;C++程序内存分配有4个区域</p>
<ul>
<li>栈区(stack)：在执行函数时，函数内局部变量的存储单元在栈上创建，函数结束时，被释放。栈区主要存放运行函数分配的局部变量、函数参数、返回数据、返回地址等。</li>
<li>堆区(heap)：一般由程序员分配释放，程序员不释放会由OS回收。分配方式类似链表</li>
<li>数据段（静态区)(static)：存放全局变量、静态数据。程序结束后由系统释放。</li>
<li>代码段：存放函数体的二进制代码</li>
</ul>
<p>普通的局部变量是在栈区分配空间的，栈区的特点就是创建的变量出了作用域就销毁了。<br>被static修饰的变量存放在数据段（静态区），数据段的特点是在上面创建的变量，直至程序结束才销毁。</p>
<h2 id="柔性数组"><a href="#柔性数组" class="headerlink" title="柔性数组"></a>柔性数组</h2><p>结构中最后一个元素允许是未知大小的数组，这就是柔性数组成员</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> arr[];<span class="comment">//未知大小的</span></span><br><span class="line">    <span class="comment">//int arr[0];//未知大小的 - 和上面是一样的，只是写法不同</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">S</span> <span class="title">s</span>;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面结构体S中的整型arr数组是未知大小的，就是柔性数组成员，柔性的意思就是：数组大小是可以调整的。</p>
<h3 id="柔性数组的大小"><a href="#柔性数组的大小" class="headerlink" title="柔性数组的大小"></a>柔性数组的大小</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> arr[];<span class="comment">//未知大小的</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">S</span> <span class="title">s</span>;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(s));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是4。<br>包含柔性数组成员的结构体计算大小时，不包含柔性数组成员的大小。</p>
<h3 id="柔性数组的使用"><a href="#柔性数组的使用" class="headerlink" title="柔性数组的使用"></a>柔性数组的使用</h3><p>柔性数组：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span>//先创建一个包含柔性数组成员的结构体</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> arr[];<span class="comment">//未知大小的</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">S</span>* <span class="title">ps</span> =</span> (<span class="keyword">struct</span> S*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> S)+<span class="number">5</span>*<span class="keyword">sizeof</span>(<span class="type">int</span>)) ;<span class="comment">//开辟了24个字节，强制转换为struct S*型。其中有4字节空间给n，另外20字节给arr数组。</span></span><br><span class="line">    ps-&gt;n = <span class="number">100</span>;<span class="comment">//令n=100</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) <span class="comment">//给这个柔性数组中的5个成员赋值</span></span><br><span class="line">    &#123;</span><br><span class="line">        ps-&gt;arr[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">S</span>* <span class="title">ptr</span> =</span> <span class="built_in">realloc</span>(ps, <span class="number">44</span>);<span class="comment">//想开辟另外20字节的空间给这个柔性数组</span></span><br><span class="line">    <span class="keyword">if</span> (ptr != <span class="literal">NULL</span>) <span class="comment">//判断空间是否申请成功</span></span><br><span class="line">    &#123;</span><br><span class="line">        ps = ptr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">5</span>; i&lt;<span class="number">10</span>; i++) <span class="comment">//给柔性数组中新开辟的5块arr数组赋值</span></span><br><span class="line">    &#123;</span><br><span class="line">        ps-&gt;arr[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) <span class="comment">//打印这个arr柔性数组</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ps-&gt;arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放空间</span></span><br><span class="line">    <span class="built_in">free</span>(ps);</span><br><span class="line">    ps = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用指针维护的结构体数组数组（和柔性数组实现的功能一致）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> *arr;<span class="comment">//指针 - 指向一块动态开辟的空间</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">S</span> *<span class="title">ps</span> =</span> (<span class="keyword">struct</span> S*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> S));<span class="comment">//开辟一块空间，包括n和*arr指针的空间，ps指针指向，强转为(struct S*)型</span></span><br><span class="line">    ps-&gt;arr = <span class="built_in">malloc</span>(<span class="number">5</span>*<span class="keyword">sizeof</span>(<span class="type">int</span>));<span class="comment">//给*arr这个指针指向的地址开辟5块int大小的空间</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) <span class="comment">//给数组内的5个成员赋值</span></span><br><span class="line">    &#123;</span><br><span class="line">        ps-&gt;arr[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) <span class="comment">//打印数组内的五个成员</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,ps-&gt;arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> *ptr = <span class="built_in">realloc</span>(ps-&gt;arr, <span class="number">10</span>*<span class="keyword">sizeof</span>(<span class="type">int</span>));<span class="comment">//调整arr数组的大小，先用ptr指针指向</span></span><br><span class="line">    <span class="keyword">if</span> (ptr != <span class="literal">NULL</span>) <span class="comment">//判断内存申请是否成功</span></span><br><span class="line">    &#123;</span><br><span class="line">        ps-&gt;arr = ptr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">5</span>; i&lt;<span class="number">10</span>; i++) <span class="comment">//给新创建的五个数组成员赋值</span></span><br><span class="line">    &#123;</span><br><span class="line">        ps-&gt;arr[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) <span class="comment">//打印所有数组成员</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,ps-&gt;arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放内存</span></span><br><span class="line">    <span class="built_in">free</span>(ps-&gt;arr);<span class="comment">//先释放arr数组的内存，避免找不到它</span></span><br><span class="line">    ps-&gt;arr = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">free</span>(ps);<span class="comment">//后释放ps。</span></span><br><span class="line">    ps = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="柔性数组的特点"><a href="#柔性数组的特点" class="headerlink" title="柔性数组的特点"></a>柔性数组的特点</h3><ul>
<li>结构中的柔性数组成员前面必须至少有一个其他成员</li>
<li>sizeof返回的这种结构大小不包括柔性数组的内存</li>
<li>包含柔性数组成员的结构用<code>malloc()</code>函数进行内存的动态分配，并且分配的内存应该大于结构的大小，以适应柔性数组的预期大小。</li>
</ul>
<h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ul>
<li>方便内存释放</li>
<li>有利于访问速度</li>
</ul>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>分支和循环练习-模拟登陆界面</title>
    <url>/posts/1c3ae651.html</url>
    <content><![CDATA[<p>模拟用户登录情景，并且只能登录3次，只允许输入三次密码，密码正确，则提示登录成功，三次均错误，则退出程序。</p>
<span id="more"></span>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> c = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">123456</span>;</span><br><span class="line">    <span class="keyword">while</span> (c &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入密码:-&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">        <span class="keyword">if</span> (a == b) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            c++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (c &gt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;三次密码均错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>原码、反码、补码</title>
    <url>/posts/fb35e44.html</url>
    <content><![CDATA[<p>计算机中的整型有符号数有三种表示方法，即原码、反码、补码。<br>无符号整型就是原码、反码、补码都相同。<br>三种表示方法都有符号位和数值位两部分，符号位0表示正，1表示负。</p>
<span id="more"></span>

<p>原码：直接将二进制按照正负数的形式翻译成二进制即可<br>反码：原码符号位不变，其他位按位取反<br>补码：反码+1</p>
<p>只要是整数，在内存中存储的都是二进制的补码。<br>正数——原码、反码、补码都相同。</p>
<p>对于负数：<br>例如-2，的计算过程。</p>
<table>
<thead>
<tr>
<th>原码</th>
<th>–&gt;反码</th>
<th>–&gt;补码</th>
</tr>
</thead>
<tbody><tr>
<td>直接按照正负，写出二进制序列</td>
<td>原码符号位不变，其他位按位取反</td>
<td>反码+1</td>
</tr>
<tr>
<td>10000000 00000000 00000000 00000010</td>
<td>11111111 11111111 11111111 11111101</td>
<td>11111111 11111111 11111111 11111110</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>分支和循环之while语句</title>
    <url>/posts/8996f118.html</url>
    <content><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>这段代码的意思是一直打印hehe。<br><img src="/posts/8996f118/img1.png" alt="while语句图解"></p>
<h4 id="使用while语句打印1-10"><a href="#使用while语句打印1-10" class="headerlink" title="使用while语句打印1-10"></a>使用while语句打印1-10</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);</span><br><span class="line">        i = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="break函数"><a href="#break函数" class="headerlink" title="break函数"></a>break函数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//在屏幕上打印1-10,在i == 5时跳出循环，break</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">5</span>)</span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">//在循环中遇到break，就停止后期的所有循环，直接终止循环，所以：while中的break是用于永久终止循环的。</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);</span><br><span class="line">        i = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在循环中遇到break，就停止后期的所有循环，直接终止循环，所以：while中的break是用于永久终止循环的。<br>在屏幕上打印1-10,在i &#x3D;&#x3D; 5时跳出循环，break。</p>
<h3 id="continue函数"><a href="#continue函数" class="headerlink" title="continue函数"></a>continue函数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//在屏幕上打印1-10,打印到4，i=5时死循环了</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;=<span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">5</span>)</span><br><span class="line">           <span class="keyword">continue</span>;<span class="comment">//continue跳出本次循环。continue是用于终止本次循环的，也就是本次循环中的continue后边的代码不会再执行，而是直接跳转到while语句的判断部分进行下一次循环的入口判断。</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);</span><br><span class="line">        i = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>continue跳出本次循环。continue是用于终止本次循环的，也就是本次循环中的continue后边的代码不会再执行，而是直接跳转到while语句的判断部分进行下一次循环的入口判断。</p>
<h3 id="getchar函数和putchar函数"><a href="#getchar函数和putchar函数" class="headerlink" title="getchar函数和putchar函数"></a>getchar函数和putchar函数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//getchar</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ch = getchar();<span class="comment">//输入一个字符</span></span><br><span class="line">    <span class="built_in">putchar</span>(ch);<span class="comment">//打印ch字符</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,ch);<span class="comment">//和putchar效果是一样的。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>判断回文数</title>
    <url>/posts/789745e4.html</url>
    <content><![CDATA[<p>题目：一个5位数，判断它是不是回文数。即12321是回文数，个位与万位相同，十位与千位相同。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Judge</span><span class="params">(<span class="type">int</span> input)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (input/<span class="number">10000</span> == input %<span class="number">10</span> || ((input/<span class="number">100</span>)%<span class="number">10</span> == (input/<span class="number">10</span>)%<span class="number">10</span> ))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> input;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;input);</span><br><span class="line">    <span class="keyword">if</span> (Judge(input) == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;是回文数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;不是回文数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>判断一个数字是否为质数</title>
    <url>/posts/547712b4.html</url>
    <content><![CDATA[<p>题目：判断一个数字是否为质数。<br>程序分析：质数（prime number）又称素数，有无限个。一个大于1的自然数，除了1和它本身外，不能被其他自然数整除。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Prime_Number</span><span class="params">(<span class="type">int</span> input)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">2</span>; i&lt;input; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (input%i==<span class="number">0</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> input;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;input);</span><br><span class="line">    <span class="keyword">if</span> (Prime_Number(input) == <span class="number">1</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;不是素数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;是素数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串反转</title>
    <url>/posts/8de7ec78.html</url>
    <content><![CDATA[<p>题目：字符串反转，如将字符串“Hello World”反转为”dlroW olleH”</p>
<p>代码一：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Char_Reverse</span><span class="params">(<span class="type">char</span>* ch)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch[i] != <span class="string">&#x27;\0&#x27;</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> temp[i];</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> x = i;</span><br><span class="line">    <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;i; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp[j] = ch[x<span class="number">-1</span>];</span><br><span class="line">        x--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;i; j++) </span><br><span class="line">    &#123;</span><br><span class="line">        ch[j] = temp[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch[<span class="number">50</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,ch);</span><br><span class="line">    Char_Reverse(ch);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,ch);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是这段代码无法反转带空格的字符串，原因是scanf遇到空格就停止读取了。<br>解决这个问题，使用<code>%[^\n]</code>，表示读取除了换行符 \n 以外的所有字符，这样可以读取整行文本。</p>
<hr>
<p>代码二：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Char_Reverse</span><span class="params">(<span class="type">char</span>* ch)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch[i] != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> temp[i];</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> x = i;</span><br><span class="line">    <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;i; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp[j] = ch[x<span class="number">-1</span>];</span><br><span class="line">        x--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;i; j++) &#123;</span><br><span class="line">        ch[j] = temp[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch[<span class="number">50</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%[^\n]&quot;</span>,ch);</span><br><span class="line">    Char_Reverse(ch);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,ch);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里改进了scanf不能读取空格之后的问题。<br>输入Hello World<br>输出为dlroW olleH</p>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>喝汽水问题等</title>
    <url>/posts/b3acd648.html</url>
    <content><![CDATA[<h3 id="喝汽水问题"><a href="#喝汽水问题" class="headerlink" title="喝汽水问题"></a>喝汽水问题</h3><p>喝汽水，1瓶汽水1元，2个空瓶换一瓶汽水，给20元，可以喝多少汽水。</p>
<span id="more"></span>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">float</span> Money = <span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> Cola = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; Money&gt;=<span class="number">1</span>; Money--) &#123;</span><br><span class="line">        Cola++;</span><br><span class="line">        Money = Money + <span class="number">0.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Cola);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="调整数组使奇数全部位于偶数前面"><a href="#调整数组使奇数全部位于偶数前面" class="headerlink" title="调整数组使奇数全部位于偶数前面"></a>调整数组使奇数全部位于偶数前面</h3><p>调整数组使奇数全部位于偶数前面<br>使所有奇数位于数组前半部分，偶数位于后半部分</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">213</span>,<span class="number">12312</span>,<span class="number">3452</span>,<span class="number">1236</span>,<span class="number">764</span>,<span class="number">221</span>,<span class="number">1323</span>,<span class="number">4532</span>&#125;;</span><br><span class="line">    <span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = sz - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left&lt;right) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[left] % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; arr[right] % <span class="number">2</span> != <span class="number">0</span>)<span class="comment">//左边是偶数，并且右边是奇数</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> temp;</span><br><span class="line">            temp = arr[left];</span><br><span class="line">            arr[left] = arr[right];</span><br><span class="line">            arr[right] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">                <span class="keyword">if</span> (arr[left] % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (arr[right] % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]); i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> a = <span class="number">200</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> b = <span class="number">100</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> c = <span class="number">0</span>;</span><br><span class="line">    c = a + b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>,a+b,c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要进行整型提升：<br>a的二进制：00000000 00000000 00000000 11001000<br>b的二进制：00000000 00000000 00000000 01100100<br>加起来结果：00000000 00000000 00000001 00101100<br>c是unsigned char 型，只取后8为，即00101100<br>所以c的十进制是44<br>直接打印a+b不需要取后8位，为300<br>打印的结果是300 44</p>
<hr>
<h3 id="在屏幕上打印杨辉三角"><a href="#在屏幕上打印杨辉三角" class="headerlink" title="在屏幕上打印杨辉三角"></a>在屏幕上打印杨辉三角</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>][<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    arr[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//计算</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;=i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            arr[i][j] = arr[i<span class="number">-1</span>][j<span class="number">-1</span>] + arr[i<span class="number">-1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印出来</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (a=<span class="number">0</span>; a&lt;=i; a++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,arr[i][a]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="猜凶手"><a href="#猜凶手" class="headerlink" title="猜凶手"></a>猜凶手</h3><p>发生谋杀案，凶手是4人中的一个。有三人说真话，一人说假话。<br>A：不是我<br>B：是C<br>C：是D<br>D：C在胡说<br>写程序确定谁是凶手</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> killer = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (killer = <span class="string">&#x27;a&#x27;</span>; killer&lt;=<span class="string">&#x27;d&#x27;</span>; killer++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((killer != <span class="string">&#x27;a&#x27;</span>) + (killer == <span class="string">&#x27;c&#x27;</span>) + (killer == <span class="string">&#x27;d&#x27;</span>) + (killer != <span class="string">&#x27;d&#x27;</span>) == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;killer = %c\n&quot;</span>,killer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="赛马问题"><a href="#赛马问题" class="headerlink" title="赛马问题"></a>赛马问题</h3><p>有36只马，六个跑道，没有计时器，请赛马确定36匹马的前三名。<br>请问最少赛几次？</p>
<ul>
<li>36匹马，分为6组，分别跑，+六次 </li>
<li>让第一次获得第一名的六只马跑，+1次</li>
<li>让第二次获得第一名的组里的前三名、第二名组里的前2名、第三名跑，+1次</li>
<li>一共需要8次</li>
</ul>
<hr>
<h3 id="烧香问题"><a href="#烧香问题" class="headerlink" title="烧香问题"></a>烧香问题</h3><p>一种香，材质不均匀，但每根烧完刚好是1小时。<br>给2根香，确定15分钟的时间</p>
<ul>
<li>一根点燃两头，一根点燃一头  </li>
<li>第一根燃完即半小时,熄灭第二根</li>
<li>第二根两头点燃，烧完刚好是15分钟</li>
</ul>
<hr>
<p>5名运动员参加比赛：<br>A：B第二，我第三<br>B：我第二，E第四<br>C：我第一，D第二<br>D：C最后，我第三<br>E：我第四，A第一<br>每人说对一半，确定名次。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> d = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> e = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (a=<span class="number">1</span>; a&lt;=<span class="number">5</span>; a++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (b=<span class="number">1</span>; b&lt;=<span class="number">5</span>; b++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (c=<span class="number">1</span>; c&lt;=<span class="number">5</span>; c++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (d=<span class="number">1</span>; d&lt;=<span class="number">5</span>; d++) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (e=<span class="number">1</span>; e&lt;=<span class="number">5</span>; e++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (((b==<span class="number">2</span>) + (a==<span class="number">3</span>) == <span class="number">1</span>)&amp;&amp;</span><br><span class="line">                            ((b==<span class="number">2</span>) + (e==<span class="number">4</span>) == <span class="number">1</span>)&amp;&amp;</span><br><span class="line">                            ((c==<span class="number">1</span>) + (d==<span class="number">2</span>) == <span class="number">1</span>)&amp;&amp;</span><br><span class="line">                            ((c==<span class="number">5</span>) + (d==<span class="number">3</span>) == <span class="number">1</span>)&amp;&amp;</span><br><span class="line">                            ((e==<span class="number">4</span>) + (a==<span class="number">1</span>) == <span class="number">1</span>)&amp;&amp;</span><br><span class="line">                            (a*b*c*d*e==<span class="number">120</span>))</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">&quot;a = %d,b = %d,c = %d,d = %d,e = %d&quot;</span>,a,b,c,d,e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="字符串左旋"><a href="#字符串左旋" class="headerlink" title="字符串左旋"></a>字符串左旋</h3><p>实现一个函数，可以左旋字符串中的k个字符<br>例如：<br>ABCD左旋一个字符得到BCDA<br>ABCD左旋两个字符得到CDAB</p>
<p>方法一：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Xuan</span><span class="params">(<span class="type">char</span>* ch,<span class="type">int</span> sz,<span class="type">int</span> k)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> temp[k<span class="number">-1</span>];</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="comment">//设置个中间变量，把要左旋的的保存到这里</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;k; i++) &#123;</span><br><span class="line">        temp[i] = ch[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//把从k开始的字符往左边移，给temp留位置</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;=sz-k; i++) &#123;</span><br><span class="line">        ch[i] = ch[k+i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//把temp保存的值给ch后边</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;k; i++) &#123;</span><br><span class="line">        ch[sz-k+<span class="number">1</span>+i] = temp[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> ch[] = <span class="string">&quot;ABCDEFGH&quot;</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">3</span>;<span class="comment">//左旋的位数</span></span><br><span class="line">    <span class="type">int</span> i ;</span><br><span class="line">    <span class="type">int</span> sz = <span class="keyword">sizeof</span>(ch)/<span class="keyword">sizeof</span>(ch[<span class="number">0</span>]) - <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sz = %d\n&quot;</span>,sz);</span><br><span class="line">    Xuan(ch,sz,k);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;=sz; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>,ch[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法二：三步翻转法<br>例如一个字符串：abcdef<br>先分成两部分： ab cdef<br>把前后两部分倒序：bafedc<br>再全部反转：cdefab</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//三步翻转法</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">char</span>* left,<span class="type">char</span>* right)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(left != <span class="literal">NULL</span>);</span><br><span class="line">    assert(right != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">while</span> (left&lt;right) &#123;</span><br><span class="line">        <span class="type">char</span> tmp = *left;</span><br><span class="line">        *left = *right;</span><br><span class="line">        *right = tmp;</span><br><span class="line">        left++;</span><br><span class="line">        right--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">left_move</span><span class="params">(<span class="type">char</span>* arr,<span class="type">int</span> k)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(arr);</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(arr);</span><br><span class="line">    assert(k&lt;=len);</span><br><span class="line">    reverse(arr,arr+k<span class="number">-1</span>);<span class="comment">//逆序左边</span></span><br><span class="line">    reverse(arr+k,arr+len<span class="number">-1</span>);<span class="comment">//逆序右边</span></span><br><span class="line">    reverse(arr,arr+len<span class="number">-1</span>);<span class="comment">//逆序整体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> arr[] = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">    left_move(arr,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,arr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>写一个函数，判断一个字符串是否为另一个字符串旋转之后的字符串<br>例如：给定S1&#x3D;AABCD和S2&#x3D;BCDAA，返回1<br>给定S1&#x3D;ABCD和S2&#x3D;ACBD，返回0<br>AABCD左旋一个字符得到ABCDA</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">char</span>* left,<span class="type">char</span>* right)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(left != <span class="literal">NULL</span>);</span><br><span class="line">    assert(right != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">while</span> (left&lt;right) &#123;</span><br><span class="line">        <span class="type">char</span> tmp = *left;</span><br><span class="line">        *left = *right;</span><br><span class="line">        *right = tmp;</span><br><span class="line">        left++;</span><br><span class="line">        right--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="type">void</span> <span class="title function_">left_move</span><span class="params">(<span class="type">char</span>* arr,<span class="type">int</span> k)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(arr);</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(arr);</span><br><span class="line">    assert(k&lt;=len);</span><br><span class="line">    reverse(arr,arr+k<span class="number">-1</span>);<span class="comment">//逆序左边</span></span><br><span class="line">    reverse(arr+k,arr+len<span class="number">-1</span>);<span class="comment">//逆序右边</span></span><br><span class="line">    reverse(arr,arr+len<span class="number">-1</span>);<span class="comment">//逆序整体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">is_left_move</span><span class="params">(<span class="type">char</span>* s1,<span class="type">char</span>*s2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(s1);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;len; i++) &#123;</span><br><span class="line">        left_move(s1, <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> ret = <span class="built_in">strcmp</span>(s1, s2);</span><br><span class="line">        <span class="keyword">if</span> (ret == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> arr1[] = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">    <span class="type">char</span> arr2[] = <span class="string">&quot;cdefab&quot;</span>;</span><br><span class="line">    <span class="type">int</span> ret = is_left_move(arr1,arr2);</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;yes&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方法二：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">is_left_move</span><span class="params">(<span class="type">char</span>* str1,<span class="type">char</span>* str2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> len1 = <span class="built_in">strlen</span>(str1);</span><br><span class="line">    <span class="type">int</span> len2 = <span class="built_in">strlen</span>(str2);</span><br><span class="line">    <span class="keyword">if</span> (len1 != len2) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//1、在str1字符串中追加一个str1字符串</span></span><br><span class="line">    <span class="comment">//strcat(str1,str1);//err,strcat函数不能自己追加自己</span></span><br><span class="line">    <span class="built_in">strncat</span>(str1,str1,len1);</span><br><span class="line">    <span class="comment">//2、判断str2指向的字符串是否是str1指向的字符串的字串</span></span><br><span class="line">    <span class="comment">//strstr - 用于找子串</span></span><br><span class="line">    <span class="type">char</span> * ret = <span class="built_in">strstr</span>(str1, str2);</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> arr1[<span class="number">30</span>] = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">    <span class="type">char</span> arr2[] = <span class="string">&quot;cdefab&quot;</span>;</span><br><span class="line">    <span class="type">int</span> ret = is_left_move(arr1,arr2);</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;yes\n&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;no\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="杨氏矩阵"><a href="#杨氏矩阵" class="headerlink" title="杨氏矩阵"></a>杨氏矩阵</h3><p>有一个数字矩阵，矩阵从左往右是递增的，从上到下也是递增的，编写程序在这样的矩阵中查询某个数字是否存在。<br>要求：时间复杂度小于O(N)<br>时间复杂度小于O(N)就是说查询次数小于N次，也就是说不能遍历这个数组<br>假设一个杨氏矩阵<br>123<br>456<br>789</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">FindNum</span><span class="params">(<span class="type">int</span> arr[<span class="number">3</span>][<span class="number">3</span>],<span class="type">int</span> k,<span class="type">int</span> *px,<span class="type">int</span> *py)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> y = *py<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (x&lt;=*px<span class="number">-1</span> &amp;&amp; y&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[x][y] &gt; k) &#123;</span><br><span class="line">            y--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(arr[x][y] &lt; k)</span><br><span class="line">        &#123;</span><br><span class="line">            x++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            *px = x;</span><br><span class="line">            *py = y;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">3</span>][<span class="number">3</span>] = &#123;&#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>&#125;,&#123;<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>&#125;,&#123;<span class="number">77</span>,<span class="number">88</span>,<span class="number">99</span>&#125;&#125;;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">33</span>;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> y = <span class="number">3</span>;</span><br><span class="line">    <span class="comment">//返回型参数</span></span><br><span class="line">    <span class="type">int</span> ret = FindNum(arr,k,&amp;x,&amp;y);</span><br><span class="line">    <span class="keyword">if</span> (ret==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;我有K\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;下标是：%d %d&quot;</span>,x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;我没K\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>在有序数组中插入一个数字</title>
    <url>/posts/7de50bc.html</url>
    <content><![CDATA[<p>题目：有一个已经排好序的数组。现输入一个数，要求按原来的规律将它插入数组中。<br>程序分析：首先判断此数是否大于最后一个数，然后再考虑插入中间的数的情况，插入后此元素之后的数，依次后移一个位置。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Insert</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> input)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (arr[<span class="number">8</span>]&gt;input) &#123;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i]&gt;input)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> j;</span><br><span class="line">                <span class="keyword">for</span> (j=<span class="number">9</span>; j&gt;i; j--)</span><br><span class="line">                &#123;</span><br><span class="line">                    arr[j] = arr[j<span class="number">-1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                arr[i] = input;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        arr[<span class="number">9</span>] = input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">444</span>,<span class="number">555</span>,<span class="number">666</span>,<span class="number">777</span>,<span class="number">888</span>,<span class="number">999</span>&#125;;</span><br><span class="line">    <span class="type">int</span> input;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入要插入的数字:-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;input);</span><br><span class="line">    Insert(arr,input);</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ARR_LENGTH 10</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Insert</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> input)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (arr[ARR_LENGTH<span class="number">-2</span>]&gt;input) &#123;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;ARR_LENGTH; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i]&gt;input)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> j;</span><br><span class="line">                <span class="keyword">for</span> (j=ARR_LENGTH<span class="number">-1</span>; j&gt;i; j--)</span><br><span class="line">                &#123;</span><br><span class="line">                    arr[j] = arr[j<span class="number">-1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                arr[i] = input;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        arr[ARR_LENGTH<span class="number">-1</span>] = input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[ARR_LENGTH] = &#123;<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">444</span>,<span class="number">555</span>,<span class="number">666</span>,<span class="number">777</span>,<span class="number">888</span>,<span class="number">999</span>&#125;;</span><br><span class="line">    <span class="type">int</span> input;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入要插入的数字:-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;input);</span><br><span class="line">    Insert(arr,input);</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;ARR_LENGTH; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串排序</title>
    <url>/posts/db978449.html</url>
    <content><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Swap</span><span class="params">(<span class="type">char</span>* str1,<span class="type">char</span>* str2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> temp[<span class="number">20</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(temp, str1);</span><br><span class="line">    <span class="built_in">strcpy</span>(str1, str2);</span><br><span class="line">    <span class="built_in">strcpy</span>(str2, temp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch1[<span class="number">20</span>];</span><br><span class="line">    <span class="type">char</span> ch2[<span class="number">20</span>];</span><br><span class="line">    <span class="type">char</span> ch3[<span class="number">20</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入三个字符串:-&gt;\n&quot;</span>);</span><br><span class="line">    fgets(ch1, <span class="keyword">sizeof</span>(ch1), <span class="built_in">stdin</span>);</span><br><span class="line">    ch1[<span class="built_in">strcspn</span>(ch1, <span class="string">&quot;\n&quot;</span>)] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    fgets(ch2, <span class="keyword">sizeof</span>(ch2), <span class="built_in">stdin</span>);</span><br><span class="line">    ch2[<span class="built_in">strcspn</span>(ch2, <span class="string">&quot;\n&quot;</span>)] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    fgets(ch3, <span class="keyword">sizeof</span>(ch3), <span class="built_in">stdin</span>);</span><br><span class="line">    ch3[<span class="built_in">strcspn</span>(ch3, <span class="string">&quot;\n&quot;</span>)] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(ch1, ch2)&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        Swap(ch1, ch2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(ch2, ch3)&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        Swap(ch2, ch3);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(ch1, ch2)&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        Swap(ch1, ch2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n%s\n%s\n&quot;</span>,ch1,ch2,ch3);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串左旋和字符串右旋</title>
    <url>/posts/93d24db8.html</url>
    <content><![CDATA[<h3 id="字符串左旋"><a href="#字符串左旋" class="headerlink" title="字符串左旋"></a>字符串左旋</h3><p>题目：有n个整数，使其前面各数顺序向后移m个位置，最后m个数变成最前面的m个数。</p>
<p>思路：先把这个字符串的前半部分保存到一个新的字符串中，再把后半部分保存到另一个字符串中。最后，拼接这两个字符串。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Get_Front</span><span class="params">(<span class="type">char</span>* ch,<span class="type">int</span> input,<span class="type">int</span> length,<span class="type">char</span>* Front)</span><span class="comment">//获得前半部分</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;input; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Front[i] = ch[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Get_Behind</span><span class="params">(<span class="type">char</span>* ch,<span class="type">int</span> input,<span class="type">int</span> length,<span class="type">char</span>* Behind)</span><span class="comment">//获得后半部分</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=input; i&lt;length; i++) &#123;</span><br><span class="line">        Behind[j] = ch[i];</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Left</span><span class="params">(<span class="type">char</span>* ch,<span class="type">int</span> input)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> length = <span class="number">0</span>;<span class="comment">//字符串长度</span></span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch[length] != <span class="string">&#x27;\0&#x27;</span>)<span class="comment">//先看看ch里存了几个字符</span></span><br><span class="line">    &#123;</span><br><span class="line">        length++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> Front[<span class="number">100</span>];<span class="comment">//先定义一个字符串来存前边的字符串</span></span><br><span class="line">    <span class="type">char</span> Behind[<span class="number">100</span>];<span class="comment">//定义一个字符串存后半部分字符串</span></span><br><span class="line">    Get_Front(ch,input,length,Front);<span class="comment">//把前半部分存到Front里</span></span><br><span class="line">    Get_Behind(ch,input,length,Behind);<span class="comment">//把后半部分存到Behind里</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;length-input; i++) <span class="comment">//替换</span></span><br><span class="line">    &#123;</span><br><span class="line">        ch[i] = Behind[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=length-input; i&lt;length; i++)<span class="comment">//替换</span></span><br><span class="line">    &#123;</span><br><span class="line">        ch[length-input+x] = Front[x];</span><br><span class="line">        x++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入字符串:-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,ch);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入要左旋几个字符:-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;input);</span><br><span class="line">    Left(ch,input);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,ch);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>思路：先把这个字符串的后边的字符串保存到一个新的临时字符串中，再把后边的字符往前移，最后把新字符串接到后面。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Left</span><span class="params">(<span class="type">char</span>* ch,<span class="type">int</span> input)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> temp[input];</span><br><span class="line">    <span class="type">int</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch[length] != <span class="string">&#x27;\0&#x27;</span>)<span class="comment">//看一下输入的字符串长度是多少</span></span><br><span class="line">    &#123;</span><br><span class="line">        length++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;input; i++)<span class="comment">//先把要后移的字符串保存到一个临时字符串中</span></span><br><span class="line">    &#123;</span><br><span class="line">        temp[i] = ch[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=input; i&lt;length; i++)<span class="comment">//把后边要前移的字符串移动一下</span></span><br><span class="line">    &#123;</span><br><span class="line">        ch[i-input] = ch[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;input; i++) <span class="comment">//把之前保存的临时字符串赋值到原数组的最后</span></span><br><span class="line">    &#123;</span><br><span class="line">        ch[length-input+i] = temp[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入字符串:-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,ch);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入要左旋几个字符:-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;input);</span><br><span class="line">    Left(ch,input);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,ch);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="字符串右旋"><a href="#字符串右旋" class="headerlink" title="字符串右旋"></a>字符串右旋</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Right</span><span class="params">(<span class="type">char</span>* ch,<span class="type">int</span> input)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> temp[input];</span><br><span class="line">    <span class="type">int</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch[length] != <span class="string">&#x27;\0&#x27;</span>)<span class="comment">//看一下输入的字符串长度是多少</span></span><br><span class="line">    &#123;</span><br><span class="line">        length++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=length-input; i&lt;length; i++)<span class="comment">//先把要前移的字符串保存到一个临时字符串中</span></span><br><span class="line">    &#123;</span><br><span class="line">        temp[x] = ch[i];</span><br><span class="line">        x++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=length-input; i&gt;=<span class="number">0</span>; i--)<span class="comment">//把前边的字符串往后移，给临时字符串挪位置</span></span><br><span class="line">    &#123;</span><br><span class="line">        ch[i+input<span class="number">-1</span>] = ch[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;input; i++)<span class="comment">//把之前保存的临时字符串赋值到原数组的最前边</span></span><br><span class="line">    &#123;</span><br><span class="line">        ch[i] = temp[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入字符串:-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,ch);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入要右旋几个字符:-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;input);</span><br><span class="line">    Right(ch,input);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,ch);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>打印菱形图案</title>
    <url>/posts/67b370a.html</url>
    <content><![CDATA[<p>题目：打印出菱形图案<br>效果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   *</span><br><span class="line">  ***</span><br><span class="line"> *****</span><br><span class="line">*******</span><br><span class="line"> *****</span><br><span class="line">  ***</span><br><span class="line">   *</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 4 <span class="comment">//定义要打印的行数</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> row = <span class="number">1</span>;<span class="comment">//行</span></span><br><span class="line">    <span class="keyword">for</span> (row=<span class="number">1</span>; row&lt;=MAX; row++)<span class="comment">//打印上半部分</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> col = <span class="number">2</span>*row<span class="number">-1</span>;<span class="comment">//上半部分每行打印的星号个数</span></span><br><span class="line">        <span class="type">int</span> spcae = MAX - row;<span class="comment">//上半部分的空格数是定义的最大行数-现在行数</span></span><br><span class="line">        <span class="type">int</span> i;<span class="comment">//打印空格</span></span><br><span class="line">        <span class="type">int</span> j;<span class="comment">//打印*号</span></span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;spcae; i++)<span class="comment">//打印空格</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;col; j++)<span class="comment">//打印星号</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (row=<span class="number">1</span>; row&lt;MAX; row++)<span class="comment">//打印下半部分</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> col = <span class="number">2</span>*MAX-(<span class="number">2</span>*row+<span class="number">1</span>);<span class="comment">//下半部分每行打印的星号个数</span></span><br><span class="line">        <span class="type">int</span> spcae = row;<span class="comment">//下半部分的空格数和行数是相等的</span></span><br><span class="line">        <span class="type">int</span> i;<span class="comment">//打印空格</span></span><br><span class="line">        <span class="type">int</span> j;<span class="comment">//打印*号</span></span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;spcae; i++)<span class="comment">//打印空格</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;col; j++)<span class="comment">//打印星号</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>找到1000以内的完数</title>
    <url>/posts/3e82d11c.html</url>
    <content><![CDATA[<p>题目：一个数如果恰好等于它的因子之和，这个数就称为“完数“。<br>例如：6&#x3D;1+2+3.编程找出1000以内的所有完数。</p>
<p>如何找到一个数的所有因子？</p>
<ul>
<li>先来一个从1到小于这个数的循环，如果这个数字%循环次数等于0，那么这个数字就是这个数字的一个因数。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> Num;</span><br><span class="line">    <span class="keyword">for</span> (Num=<span class="number">1</span>; Num&lt;=<span class="number">1000</span>; Num++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">1</span>; j&lt;Num; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (Num%j==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sum = sum + j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum == Num) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,Num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>将一个正整数分解质因数</title>
    <url>/posts/b133b15f.html</url>
    <content><![CDATA[<p>题目：将一个正整数分解质因数。例如：输入90，打印出90&#x3D;2*3*3*5。</p>
<p>程序分析：对n进行分解质因数，应先找到一个最小的质数k(<code>n%k==0</code>)，然后按下述步骤完成：</p>
<ol>
<li>如果这个质数恰等于（小于的时候，继续执行循环）n，则说明分解质因数的过程已经结束，另外 打印出即可。</li>
<li>但n能被k整除，则应打印出k的值，并用n除以k的商，作为新的正整数n.重复执行第二步。</li>
<li>如果n不能被k整除，则用k+1作为k的值，重复执行第一步</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Cal</span><span class="params">(<span class="type">int</span> input)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> temp = input;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    <span class="type">int</span> i,a;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;=<span class="number">100</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (i=<span class="number">2</span>; i&lt;=temp; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (temp%i==<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    temp = temp / i;</span><br><span class="line">                    arr[j]=i;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,arr[j]);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (temp != <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=%d\n&quot;</span>,input);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一个正整数用于分解质因数:-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;input);</span><br><span class="line">    Cal(input);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>将一个数组逆序输出</title>
    <url>/posts/38902a79.html</url>
    <content><![CDATA[<p>题目：将一个数组逆序输出。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Reverse</span><span class="params">(<span class="type">char</span>* ch,<span class="type">int</span> sz)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> temp[sz];</span><br><span class="line">    <span class="keyword">for</span> (i=sz<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)<span class="comment">//先把逆序的数组保存到一个新的临时数组中</span></span><br><span class="line">    &#123;</span><br><span class="line">        temp[j] = ch[i];</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;sz; i++) <span class="comment">//把新的临时数组内容赋值给原数组</span></span><br><span class="line">    &#123;</span><br><span class="line">        ch[i] = temp[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> ch[] = <span class="string">&quot;abcdefghijsdfwdfasdfewfdqxsaefw&quot;</span>;</span><br><span class="line">    <span class="type">int</span> sz = <span class="keyword">sizeof</span>(ch)/<span class="keyword">sizeof</span>(ch[<span class="number">0</span>])<span class="number">-1</span>;</span><br><span class="line">    Reverse(ch,sz);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,ch);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>打印9乘9乘法口诀表</title>
    <url>/posts/f2d99d20.html</url>
    <content><![CDATA[<p>1 * 1 &#x3D; 1  <br>2 * 1 &#x3D; 2  2 * 2 &#x3D; 4  <br>3 * 1 &#x3D; 3  3 * 2 &#x3D; 6  3 * 3 &#x3D; 9  <br>4 * 1 &#x3D; 4  4 * 2 &#x3D; 8  4 * 3 &#x3D; 12 4 * 4 &#x3D; 16 <br>5 * 1 &#x3D; 5  5 * 2 &#x3D; 10 5 * 3 &#x3D; 15 5 * 4 &#x3D; 20 5 * 5 &#x3D; 25 <br>6 * 1 &#x3D; 6  6 * 2 &#x3D; 12 6 * 3 &#x3D; 18 6 * 4 &#x3D; 24 6 * 5 &#x3D; 30 6 * 6 &#x3D; 36 <br>7 * 1 &#x3D; 7  7 * 2 &#x3D; 14 7 * 3 &#x3D; 21 7 * 4 &#x3D; 28 7 * 5 &#x3D; 35 7 * 6 &#x3D; 42 7 * 7 &#x3D; 49 <br>8 * 1 &#x3D; 8  8 * 2 &#x3D; 16 8 * 3 &#x3D; 24 8 * 4 &#x3D; 32 8 * 5 &#x3D; 40 8 * 6 &#x3D; 48 8 * 7 &#x3D; 56 8 * 8 &#x3D; 64 <br>9 * 1 &#x3D; 9  9 * 2 &#x3D; 18 9 * 3 &#x3D; 27 9 * 4 &#x3D; 36 9 * 5 &#x3D; 45 9 * 6 &#x3D; 54 9 * 7 &#x3D; 63 9 * 8 &#x3D; 72 9 * 9 &#x3D; 81</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> i,j,sum;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=<span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">1</span>; j&lt;=i; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d * %d = %-2d &quot;</span>,i,j,sum=i*j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>把三个整数从小到大排序</title>
    <url>/posts/3a7b9f2b.html</url>
    <content><![CDATA[<p>题目：输入三个整数x,y,z，请把这三个数由小到大输出。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> x,y,z,temp;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入x,y,z:-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d,%d,%d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">    <span class="keyword">if</span> (x&gt;y) &#123;</span><br><span class="line">        temp = x;</span><br><span class="line">        x = y;</span><br><span class="line">        y = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (y&gt;z) &#123;</span><br><span class="line">        temp = y;</span><br><span class="line">        y = z;</span><br><span class="line">        z = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x&gt;y) &#123;</span><br><span class="line">        temp = x;</span><br><span class="line">        x = y;</span><br><span class="line">        y = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%d,%d&quot;</span>,x,y,z);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>指针详解</title>
    <url>/posts/8c9e7bfb.html</url>
    <content><![CDATA[<p>指针的概念：<br>指针就是个变量，用来存放地址，地址唯一标识一块内存空间。<br>指针的大小是固定的4&#x2F;8字节，取决于32位&#x2F;64位平台。<br>指针是类型，指针的类型决定了指针+-整数的步长，指针解引用操作的时候的权限。<br>指针的运算。</p>
<span id="more"></span>
<p>参见：<a href="https://blog.zmyu.cc/posts/89734f24.html">初识指针</a></p>
<h3 id="字符指针"><a href="#字符指针" class="headerlink" title="字符指针"></a>字符指针</h3><p>一般使用：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> ch = <span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">    <span class="type">char</span>* pc = &amp;ch;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> arr[] = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">    <span class="type">char</span>* pc = arr;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,arr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,pc);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印arr和打印pc的结果是一致的。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span>* p = <span class="string">&quot;abcdef&quot;</span>;<span class="comment">//&quot;abcdef&quot;常量字符串，把a的地址赋给了p，即把首地址给了p</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,*p);<span class="comment">//打印的结果是a</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,*p+<span class="number">2</span>);<span class="comment">//打印的结果是c</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,p);<span class="comment">//打印的结果是abcdef，是由于通过a的地址，打印出了这个字符串(%s是打印字符串)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span>* p = <span class="string">&quot;abcdef&quot;</span>;<span class="comment">//常量字符串</span></span><br><span class="line">    *p = <span class="string">&#x27;W&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的写法是错误的。因为abcdef是常量字符串，不能修改，下面的代码是修正后的。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* p = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">    <span class="comment">//*p = &#x27;W&#x27;;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> arr1[] = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">    <span class="type">char</span> arr2[] = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">    <span class="type">char</span>* p1 = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">    <span class="type">char</span>* p2 = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (arr1 == arr2) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;arr1 == arr2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;arr1 != arr2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是<code>arr1 != arr2</code>，因为<code>if (arr1 == arr2) </code>比较的不是数组的内容，而是数组的地址，而两个数组的地址不会相等。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> arr1[] = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">    <span class="type">char</span> arr2[] = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">    <span class="type">char</span>* p1 = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">    <span class="type">char</span>* p2 = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (p1 == p2) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;p1 == p2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;p1 != p2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是<code>p1 == p2</code>，因为指向的都是同一个常量字符串，常量字符串不会被修改，为了节约内存空间，内存中不会存两份，地址是一致的，所以相等。<br><code>char* p1</code>和<code>const char* p1</code>是一致的。</p>
<h3 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h3><p>指针数组本质是数组，是用来存放指针的。<br><code>int* parr[4];</code> 整型指针数组，用来存放整型指针的数组。<br><code>char* pch[4];</code>字符型指针数组，用来存放字符指针的数组。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> c = <span class="number">30</span>;</span><br><span class="line">    <span class="type">int</span> d = <span class="number">40</span>;</span><br><span class="line">    <span class="type">int</span>* arr[<span class="number">4</span>] = &#123;&amp;a,&amp;b,&amp;c,&amp;d&#125;;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,*(arr[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是10 20 30 40</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr1[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="type">int</span> arr2[] = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    <span class="type">int</span> arr3[] = &#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line">    <span class="type">int</span>* parr[] = &#123;arr1,arr2,arr3&#125;;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j&lt;<span class="number">5</span>; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,*(parr[i]+j));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是：<br>1 2 3 4 5 <br>2 3 4 5 6 <br>3 4 5 6 7</p>
<h3 id="数组指针"><a href="#数组指针" class="headerlink" title="数组指针"></a>数组指针</h3><p>数组指针本质是指针。<br><code>int *p = NULL;</code>  p是整型指针 - 指向整型的指针 - 可以存放整型的地址<br><code>char * pc = NULL;</code> pc是字符指针 - 指向字符的指针 - 可以存放字符的地址</p>
<p>数组指针 就是指向数组的指针 - 可以存放数组的地址。<br><code>arr</code> - 首元素地址<br><code>&amp;arr[0]</code> - 首元素地址<br><code>&amp;arr</code> - 数组的地址</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="type">int</span> (*p)[<span class="number">10</span>] = &amp;arr;<span class="comment">//数组指针 - 数组的地址存起来 - p就是数组指针，首先和*结合</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的p就是数组指针。就是指向数组的指针 - 可以存放数组的地址。</p>
<p><code>int (*p)[10]</code>p先和星号*结合，在和[]结合。<br>先结合的就是本质，后结合的就是类型。</p>
<p>数组指针的使用：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="type">int</span> (*p)[<span class="number">10</span>] = &amp;arr;<span class="comment">//数组指针 - 数组的地址存起来 - p就是数组指针，首先和*结合</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,(*p)[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一般而言，数组指针最好在二维数组中使用才更方便。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print1</span><span class="params">(<span class="type">int</span> arr[<span class="number">3</span>][<span class="number">5</span>],<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;x; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;y; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,arr[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print2</span><span class="params">(<span class="type">int</span> (*p)[<span class="number">5</span>],<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;x; i++) &#123;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; y; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,*(*(p+i)+j));<span class="comment">//也可以写成(*(p + i))[j]</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">3</span>][<span class="number">5</span>] = &#123; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;,&#123;<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>&#125; &#125;;</span><br><span class="line">    print1(arr,<span class="number">3</span>,<span class="number">5</span>);<span class="comment">//arr - 数组名 - 首元素地址</span></span><br><span class="line">    print2(arr,<span class="number">3</span>,<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p><code>int arr[5];</code> arr是一个5个元素的整型数组<br><code>int *parr1[10];</code>parr1是一个数组，数组有10个元素，每个元素的类型是int*，parr是指针数组<br><code>int (*parr2)[10];</code>parr2是一个指针，该指针指向一个数组，数组有10个元素，每个元素的类型是int，parr2是数组指针<br><code>int (*parr3[10])[5];</code>parr3是一个数组，该数组有10个元素，每个元素是一个数组指针，该数组指针指向的数组有5个元素，每个元素是int</p>
<p>判断是指针数组还是数组指针？<br>——根据[ ]的优先级比*的优先级高的原则判断。</p>
<h3 id="数组参数、指针参数"><a href="#数组参数、指针参数" class="headerlink" title="数组参数、指针参数"></a>数组参数、指针参数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span>* arr2[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    test(arr);</span><br><span class="line">    test2(arr2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>void test(int arr[])&#123;...&#125;</code>、<code>void test(int arr[10])&#123;...&#125;</code>、<code>void test(int *arr)&#123;...&#125;</code> 上面的三种传参方法都是可以的。可以写数组名，也可以使用数组的地址。<br><code>void test2(int *arr[2])</code>、<code>void test2(int **arr)</code>上面的两种写法都可以，可以是一级指针，也可以是二级指针。</p>
<h4 id="二维数组传参"><a href="#二维数组传参" class="headerlink" title="二维数组传参"></a>二维数组传参</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> arr[<span class="number">3</span>][<span class="number">5</span>])</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> arr[][<span class="number">5</span>])</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">3</span>][<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    test(arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>void test(int arr[3][5])</code>和<code>void test(int arr[][5])</code>都是可以的，在传参是，二维数组的行可以省略。<br>但是，<code>void test(int arr[3][])</code>写法是错误的，二维数组的列不能省略。<br><code>void test(int arr[][])</code>也是错误的，二维数组不能省略列，也不能都省略。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> (*arr)[<span class="number">5</span>])</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">3</span>][<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    test(arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结：二维数组传参，函数形参可以省略第一个[]中的数字。<br>因为对一个二维数组，可以不知道有多少行，但必须得知道一行有几个元素。</p>
<h4 id="一级指针传参"><a href="#一级指针传参" class="headerlink" title="一级指针传参"></a>一级指针传参</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> *p,<span class="type">int</span> sz)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;sz; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*(p+i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">    <span class="type">int</span> *p = arr;</span><br><span class="line">    <span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    print(p, sz);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test1</span><span class="params">(<span class="type">int</span>* p)</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>* p1 = &amp;a;</span><br><span class="line">test1(&amp;a);</span><br><span class="line">test1(p1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果函数变量是指针形式，比如<code>int *p</code>，可以传递地址，比如&amp;a或者直接传递指针（<code>p1</code>）</p>
<h4 id="二级指针传参"><a href="#二级指针传参" class="headerlink" title="二级指针传参"></a>二级指针传参</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span>** ptr)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,**ptr);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> *p = &amp;n;</span><br><span class="line">    <span class="type">int</span> **pp = &amp;p;</span><br><span class="line">    test(pp);</span><br><span class="line">    test(&amp;p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>传递的pp和&amp;p都是二级指针，使用二级指针接收（<code>int** ptr</code>）</p>
<p>使用<code>int** ptr</code>函数的参数是二级指针可以接收二级指针和一级指针，还可以传指针数组。<br>指针数组相当于是二级指针</p>
<h3 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h3><p>函数指针就是指向函数的指针，存放函数地址的第一个指针。<br>&amp;函数名和函数名都是函数的地址。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> z = <span class="number">0</span>;</span><br><span class="line">    z = x + y;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,&amp;Add);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,Add);<span class="comment">//&amp;函数名和函数名都是函数的地址.</span></span><br><span class="line">    <span class="type">int</span> (*pa)(<span class="type">int</span>,<span class="type">int</span>) = Add;<span class="comment">//函数指针，把函数的地址存到pa里 </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,(*pa)(<span class="number">2</span>,<span class="number">3</span>));<span class="comment">//打印的结果是5，证明pa中存的是函数的地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Print</span><span class="params">(<span class="type">char</span>* str)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span> (*p)(<span class="type">char</span>*) = Print;</span><br><span class="line">    (*p)(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> z = <span class="number">0</span>;</span><br><span class="line">    z = x + y;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> (*pa)(<span class="type">int</span>,<span class="type">int</span>) = Add;<span class="comment">//函数指针，把函数的地址存到pa里</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,(pa)(<span class="number">2</span>,<span class="number">3</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,(*pa)(<span class="number">2</span>,<span class="number">3</span>));<span class="comment">//打印的结果是5，证明pa中存的是函数的地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,(**pa)(<span class="number">2</span>,<span class="number">3</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,(***pa)(<span class="number">2</span>,<span class="number">3</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的四种调用方式都是可以的，打印的结果都是5，但不建议使用后面两种。<br>*pa是对pa的解引用，找到对应的函数。<br>对于函数，*pa前的*可以省略，对于结果无影响。<br>后两种虽然结果是正确的，但是这种写法是没有意义的。</p>
<h3 id="函数指针数组"><a href="#函数指针数组" class="headerlink" title="函数指针数组"></a>函数指针数组</h3><p>函数指针数组就是把一些函数的地址存在一个数组里。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//先定义加、减、乘、除四个函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Sub</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x - y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Mul</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Div</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x / y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> (*parr[<span class="number">4</span>])(<span class="type">int</span>,<span class="type">int</span>) = &#123;Add,Sub,Mul,Div&#125;;<span class="comment">//函数指针数组</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">4</span>; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,parr[i](<span class="number">2</span>,<span class="number">3</span>));<span class="comment">//分别进行加、减、乘、除</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是5，-1，6，0</p>
<p>函数指针的用途：转移表（比如计算器)</p>
<hr>
<p><code>char* my_strcpy(char* dest,const char* src);</code><br>1、写一个函数指针pf，指向my_strcpy。<br><code>char* (*pf)(char*,const char*);</code></p>
<p>2、写一个函数指针数组pfArr，能够存放4个my_strcpy函数的地址。<br><code>char* (*pfArr[4])(char*,const char*);</code></p>
<hr>
<p>函数指针数组实现计算器</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*************************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;***   1.add   2.sub   ***\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;***   3.mul   4.div   ***\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;***   5.XOR   0.exit  ***\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*************************\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Sub</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x - y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Mul</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Div</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x / y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">XOR</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x ^ y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//pfArr是函数指针数组 - 叫转移表</span></span><br><span class="line">    <span class="type">int</span> (*pfArr[<span class="number">6</span>])(<span class="type">int</span>,<span class="type">int</span>) = &#123;<span class="number">0</span>,Add,Sub,Mul,Div,XOR&#125;;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        menu();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请选择：-&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;input);</span><br><span class="line">        <span class="keyword">if</span> (input &gt;= <span class="number">1</span> &amp;&amp; input &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;请输入两个操作数:-&gt;&quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">            <span class="type">int</span> ret = pfArr[input](x,y);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ret);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(input == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;退出\n&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;选择错误\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (input);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上例中，<code>pfArr</code>是函数指针数组 - 叫转移表</p>
<hr>
<h4 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h4><p>回调函数就是一个通过函数指针调用的函数。<br>如果把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用来调用其他所指向的函数时，我们就说这是回调函数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">char</span> *str)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hehe:%s&quot;</span>,str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">void</span> (*p)(<span class="type">char</span>*))</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;test\n&quot;</span>);</span><br><span class="line">    p(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    test(print);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用回调函数实现计算器</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*************************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;***   1.add   2.sub   ***\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;***   3.mul   4.div   ***\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;***   5.XOR   0.exit  ***\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*************************\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Sub</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x - y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Mul</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Div</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x / y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">XOR</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x ^ y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Calc</span><span class="params">(<span class="type">int</span> (*pf)(<span class="type">int</span>,<span class="type">int</span>))</span><span class="comment">//回调函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入两个操作数:-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,pf(x,y));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        menu();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请选择：-&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;input);</span><br><span class="line">        <span class="keyword">switch</span> (input) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;加法:&quot;</span>);</span><br><span class="line">                Calc(Add);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;减法:&quot;</span>);</span><br><span class="line">                Calc(Sub);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;乘法：&quot;</span>);</span><br><span class="line">                Calc(Mul);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;除法：&quot;</span>);</span><br><span class="line">                Calc(Div);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;XOR：&quot;</span>);</span><br><span class="line">                Calc(XOR);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;退出\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;输入非法\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (input);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="指向函数指针数组的指针"><a href="#指向函数指针数组的指针" class="headerlink" title="指向函数指针数组的指针"></a>指向函数指针数组的指针</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> (*p)[<span class="number">10</span>] = &amp;arr;<span class="comment">//取出数组的地址</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> (*pf)(<span class="type">int</span>,<span class="type">int</span>);<span class="comment">//函数指针</span></span><br><span class="line">    <span class="type">int</span> (*pfArr[<span class="number">4</span>])(<span class="type">int</span>,<span class="type">int</span>);<span class="comment">//pfArr是一个数组，函数指针的数组</span></span><br><span class="line">    <span class="comment">//pfArr是一个指向[函数指针数组]的指针</span></span><br><span class="line">    <span class="type">int</span> (*(*PPfArr)[<span class="number">4</span>])(<span class="type">int</span>,<span class="type">int</span>) = &amp;pfArr;</span><br><span class="line">    <span class="comment">//ppfArr是一个数组指针，指针指向的数组有4个元素</span></span><br><span class="line">    <span class="comment">//指向数组的每个元素的类型是一个函数指针int(*)(int,int)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>数据的存储</title>
    <url>/posts/c7b8a29b.html</url>
    <content><![CDATA[<h3 id="数据的类型"><a href="#数据的类型" class="headerlink" title="数据的类型"></a>数据的类型</h3><table>
<thead>
<tr>
<th>char</th>
<th>字符数据类型</th>
</tr>
</thead>
<tbody><tr>
<td>short</td>
<td>短整型</td>
</tr>
<tr>
<td>int</td>
<td>整型</td>
</tr>
<tr>
<td>long</td>
<td>长整型</td>
</tr>
<tr>
<td>long long</td>
<td>更长的整型</td>
</tr>
<tr>
<td>float</td>
<td>单精度浮点型</td>
</tr>
<tr>
<td>double</td>
<td>双精度浮点型</td>
</tr>
</tbody></table>
<p>C语言数据类型分为两类：内置类型，就是上面的类型，和自定义类型（构造类型）。</p>
<span id="more"></span>
<p>类型的意义：</p>
<ul>
<li>使用这个类型开辟内存空间的大小</li>
<li>如何看待内存空间的视角</li>
</ul>
<hr>
<h3 id="类型的基本分类"><a href="#类型的基本分类" class="headerlink" title="类型的基本分类"></a>类型的基本分类</h3><h4 id="整型家族："><a href="#整型家族：" class="headerlink" title="整型家族："></a>整型家族：</h4><p>char</p>
<ul>
<li>unsigned char</li>
<li>signed char</li>
</ul>
<p>short</p>
<ul>
<li>unsigned short [int]</li>
<li>signed short [int]</li>
</ul>
<p>int</p>
<ul>
<li>unsigned int</li>
<li>signed int</li>
</ul>
<p>long</p>
<ul>
<li>unsigned long [int]</li>
<li>signed long [int]</li>
</ul>
<p>[int]：这个可以省略</p>
<h4 id="浮点型家族"><a href="#浮点型家族" class="headerlink" title="浮点型家族"></a>浮点型家族</h4><p><code>float</code> 单精度浮点型<br><code>double</code> 双精度浮点型</p>
<h4 id="构造类型"><a href="#构造类型" class="headerlink" title="构造类型"></a>构造类型</h4><p>数组类型<br>结构体类型 <code>struct</code><br>枚举类型 <code>enum</code><br>联合类型 <code>union</code></p>
<h4 id="指针类型"><a href="#指针类型" class="headerlink" title="指针类型"></a>指针类型</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int* pi</span><br><span class="line">char* pc</span><br><span class="line">float* pf</span><br><span class="line">void* pv</span><br></pre></td></tr></table></figure>
<h4 id="空类型"><a href="#空类型" class="headerlink" title="空类型"></a>空类型</h4><p>void表示空类型（无类型）<br>通常应用于函数的返回类型，函数的参数，指针类型。</p>
<hr>
<h3 id="整型在内存中的存储"><a href="#整型在内存中的存储" class="headerlink" title="整型在内存中的存储"></a>整型在内存中的存储</h3><p>对于整型：在内存中存储的是二进制的补码。</p>
<h4 id="原码、反码、补码"><a href="#原码、反码、补码" class="headerlink" title="原码、反码、补码"></a>原码、反码、补码</h4><p>参见：<a href="https://blog.zmyu.cc/posts/fb35e44.html">原码、反码、补码</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int a = 20;</span><br><span class="line">int b = -10;</span><br></pre></td></tr></table></figure>
<p>对于a：<br>原码 - 00000000 00000000 00000000 00010100<br>反码 - 00000000 00000000 00000000 00010100<br>补码 - 00000000 00000000 00000000 00010100<br>在内存中：0x00000014（16进制，根据补码转换）<br>对于b：<br>原码 - 10000000 00000000 00000000 00001010<br>反码 - 11111111 11111111 11111111 11110101<br>补码 - 11111111 11111111 11111111 11110110<br>在内存中：0xfffffff6</p>
<h4 id="大小端介绍"><a href="#大小端介绍" class="headerlink" title="大小端介绍"></a>大小端介绍</h4><p>什么是大端小端？<br>大端模式：将数据低位保存在内存高地址中，数据高位保存在内存的低地址中<br>小端模式：将数据低位保存在内存低地址中，数据高位保存在内存的高地址中</p>
<p>写代码判断当前机器的字节序(判断大端存储还是小端存储)：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span>* p = (<span class="type">char</span>*)&amp;a;</span><br><span class="line">    <span class="keyword">if</span>(*p == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;小端\n&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;大端\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>输出什么？</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">signed</span> <span class="type">char</span> b = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> c = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d,b = %d,c = %d&quot;</span>,a,b,c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出的结果是：a &#x3D; -1,b &#x3D; -1,c &#x3D; 255<br>char分为signed char和unsigned char，都是1个字节，8个bit位.<br>存的是有符号数，内存中最高的位就是符号位<br>signed char的范围是：-128-127<br>unsigned char的范围是：0-255</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a = <span class="number">-128</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出的结果是4294967168。<br>-128的二进制序列：<br>原码 - 10000000 00000000 00000000 10000000<br>反码 - 11111111 11111111 11111111 01111111<br>补码 - 11111111 11111111 11111111 10000000<br>补码取8比特位：10000000<br><code>%u</code>打印10进制无符号数字。<br>整型提升：11111111 11111111 11111111 10000000（补码）<br>十进制打印上面的二进制数：4294967168</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">-20</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> j = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i+j);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是-10。<br>先按照补码的形式进行计算，最后格式化成有符号整数。<br>先计算i：<br>原码 - 10000000 00000000 00000000 00010100<br>反码 - 11111111 11111111 11111111 11101011<br>补码 - 11111111 11111111 11111111 11101100<br>计算j：（原码、反码、补码一样）<br>原码 - 00000000 00000000 00000000 00001010<br>反码 - 00000000 00000000 00000000 00001010<br>补码 - 00000000 00000000 00000000 00001010<br>i的反码+j的反码是结果的补码<br>补码 - 11111111 11111111 11111111 11110110<br>反码 - 11111111 11111111 11111111 11110101<br>原码 - 10000000 00000000 00000000 00001010<br>将结果的原码转换成有符号整数，是-10</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">9</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于i的类型是unsigned int，i的值永远不会小于0，程序死循环。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">1000</span>];</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">1000</span>; i++) &#123;</span><br><span class="line">        a[i] = <span class="number">-1</span> - i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="built_in">strlen</span>(a));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是255，因为char只能存255。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">255</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hello\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="浮点数在内存中的存储"><a href="#浮点数在内存中的存储" class="headerlink" title="浮点数在内存中的存储"></a>浮点数在内存中的存储</h3><p>3.14、1E10。<br>浮点数类型包括float、double、long double类型。</p>
<p>浮点数和整数在计算机中存储的方法是不一样的。</p>
<p>根据IEEE754，二进制浮点数表示方法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(-1)^S * M * 2^E</span><br></pre></td></tr></table></figure>
<p><code>-(1)^S</code>表示符号位，当S&#x3D;0，V为正数；当S&#x3D;1，V为负数。<br><code>M</code>表示有效数字，大于等于1，小于2。<br><code>2^E</code>表示指数位</p>
<p>例如计算浮点数9.0：<br>9.0先转换成二进制形式：1001.0<br>即<code>(-1)^0* 1.001 * 2^3</code><br>S&#x3D;0，M&#x3D;1.001，E&#x3D;3。<br>1&lt;&#x3D;M&lt;2，M只能是1点几的形式，所以在内存中不保存1，只保留小数部分。</p>
<p>对于32位浮点数，最高位是S，中间8位是E，最后23位是M</p>
<p>对于64位浮点数，最高位是S，中间11位是E，最后52位是M</p>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>操作符</title>
    <url>/posts/e4552cdf.html</url>
    <content><![CDATA[<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul>
<li>算数操作符</li>
<li>移位操作符</li>
<li>位操作符</li>
<li>赋值操作符</li>
<li>单目操作符</li>
<li>关系操作符</li>
<li>逻辑操作符</li>
<li>条件操作符</li>
<li>逗号操作符</li>
<li>下标引用、函数调用和结构成员</li>
</ul>
<span id="more"></span>

<hr>
<h3 id="算数操作符"><a href="#算数操作符" class="headerlink" title="算数操作符"></a>算数操作符</h3><p>+、-、*、&#x2F;、%<br><code>int a = 5 / 2;</code>商2余1，a &#x3D; 2<br><code>int a = 5 % 2;</code> a &#x3D; 1<br><code>float a = 5.0 / 2;</code> a &#x3D; 2.500000<br>取模%的左右两边数字必须都是整数，例如<code>5.0 % 2</code>是不合法的。<br>除了取模%操作符之外，其他几个操作符都必须作用于整数和浮点数<br>对于&#x2F;操作符，如果两边都是整数，执行整数除法，只要两边有浮点数，就执行浮点数除法。</p>
<hr>
<h3 id="移位操作符"><a href="#移位操作符" class="headerlink" title="移位操作符"></a>移位操作符</h3><p><code>&lt;&lt;</code> 左移位操作符;<br><code>&gt;&gt;</code> 右移位操作符。<br><strong>移的是二进制位</strong>。<br>左移位操作符规则：左边抛弃，右边补0。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">    <span class="type">int</span> a = <span class="number">16</span>;</span><br><span class="line">    <span class="type">int</span> b = a &gt;&gt; <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,b);</span><br></pre></td></tr></table></figure>
<p>打印的结果是4。<br>右移1位有除2的效果，左移1位有乘2的效果。<br>警告⚠️：</p>
<ul>
<li>对于移位运算符，不要移动负数位（<code>num&gt;&gt;-1</code>），这个标准是未定义的。</li>
<li>操作数必须是整数。<br>相关：<a href="https://blog.zmyu.cc/posts/d3c4a0cd.html#%E7%A7%BB%E4%BD%8D%E6%93%8D%E4%BD%9C%E7%AC%A6">移位操作符</a>、<a href="https://blog.zmyu.cc/posts/fb35e44.html">原码、补码、反码</a></li>
</ul>
<hr>
<h3 id="位操作符"><a href="#位操作符" class="headerlink" title="位操作符"></a>位操作符</h3><p>位是指二进制位，操作数必须是整数</p>
<ul>
<li>&amp; 按位与</li>
<li>| 按位或</li>
<li>^ 按位异或</li>
</ul>
<h4 id="amp-按位与"><a href="#amp-按位与" class="headerlink" title="&amp; 按位与"></a>&amp; 按位与</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">    <span class="type">int</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> c = a &amp; b;</span><br></pre></td></tr></table></figure>
<p>a的二进制位是00000000 00000000 00000000 00000011<br>b的二进制位是00000000 00000000 00000000 00000101<br>按位与的结果是00000000 00000000 00000000 00000001，有0则0，全1为1。</p>
<h4 id="按位或"><a href="#按位或" class="headerlink" title="| 按位或"></a>| 按位或</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">    <span class="type">int</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> c = a | b;</span><br></pre></td></tr></table></figure>
<p>a的二进制位是00000000 00000000 00000000 00000011<br>b的二进制位是00000000 00000000 00000000 00000101<br>按位或的结果是00000000 00000000 00000000 00000111，有1则1，全0为0。</p>
<h4 id="按位异或"><a href="#按位异或" class="headerlink" title="^ 按位异或"></a>^ 按位异或</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">    <span class="type">int</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> c = a ^ b;</span><br></pre></td></tr></table></figure>
<p>a的二进制位是00000000 00000000 00000000 00000011<br>b的二进制位是00000000 00000000 00000000 00000101<br>按位或的结果是00000000 00000000 00000000 00000110，有1则1，全1为0。</p>
<hr>
<p>题目：a &#x3D; 3，b &#x3D; 5，交换两个变量的值，不使用第三个变量（即a &#x3D; 5,b &#x3D; 3）</p>
<p>加减法-数值过大可能溢出</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">5</span>;</span><br><span class="line">    a = a + b;</span><br><span class="line">    b = a - b;</span><br><span class="line">    a = a - b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>异或法（一个数与自身异或等于0，一个数与0异或不变）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">5</span>;</span><br><span class="line">    a = a ^ b;</span><br><span class="line">    b = a ^ b;</span><br><span class="line">    a = a ^ b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>题目：编写代码，求一个整数存储在内存中二进制1的个数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> count =<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;求一个整数存储在内存中二进制1的个数\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一个整数：-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">    <span class="keyword">while</span> (a) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        a = a / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,count);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="赋值操作符"><a href="#赋值操作符" class="headerlink" title="赋值操作符"></a>赋值操作符</h3><p>&#x3D; 就是赋值操作符，当一个变量已经存在，想更改它的值，就用赋值操作符</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line">a = <span class="number">20</span>;</span><br></pre></td></tr></table></figure>
<p><code>a = 20;</code>中的<code>=</code>就是赋值操作符。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> c = <span class="number">30</span>;</span><br><span class="line">a = b = c + <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p><code>a = x = c + 1;</code>是<strong>连续赋值</strong>，这种写法是不推荐的。<br>可以改写成</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> c = <span class="number">30</span>;</span><br><span class="line">b = c + <span class="number">1</span>;</span><br><span class="line">a = b;</span><br></pre></td></tr></table></figure>
<p>警告⚠️：赋值操作符是一个等号&#x3D;，判断操作符是两个等号==。</p>
<h4 id="复合赋值符"><a href="#复合赋值符" class="headerlink" title="复合赋值符"></a>复合赋值符</h4><ul>
<li>+&#x3D;</li>
<li>-&#x3D;</li>
<li>\*&#x3D;</li>
<li>&#x2F;&#x3D;</li>
<li>%&#x3D;</li>
<li><blockquote>
<blockquote>
<p>&#x3D;</p>
</blockquote>
</blockquote>
</li>
<li>&lt;&lt;&#x3D;</li>
<li>&amp;&#x3D;</li>
<li>|&#x3D;</li>
<li>^&#x3D;</li>
</ul>
<hr>
<h3 id="单目操作符"><a href="#单目操作符" class="headerlink" title="单目操作符"></a>单目操作符</h3><p>只有一个操作数的操作符</p>
<table>
<thead>
<tr>
<th>!</th>
<th>逻辑反操作</th>
</tr>
</thead>
<tbody><tr>
<td>-</td>
<td>负值</td>
</tr>
<tr>
<td>+</td>
<td>正值</td>
</tr>
<tr>
<td>&amp;</td>
<td>取地址</td>
</tr>
<tr>
<td><a href="https://blog.zmyu.cc/posts/d3c4a0cd.html#%E6%93%8D%E4%BD%9C%E7%AC%A6%E4%B9%8Bsizeof">sizeof</a></td>
<td>操作数的类型长度（字节单位）</td>
</tr>
<tr>
<td><a href="https://blog.zmyu.cc/posts/d3c4a0cd.html#%E6%93%8D%E4%BD%9C%E7%AC%A6%E4%B9%8B%E6%8C%89%E4%BD%8D%E5%8F%96%E5%8F%8D%EF%BD%9E">~</a></td>
<td>对一个数的二进制位按位取反</td>
</tr>
<tr>
<td><a href="https://blog.zmyu.cc/posts/d3c4a0cd.html#%E6%93%8D%E4%BD%9C%E7%AC%A6%E4%B9%8B%E5%89%8D%E7%BD%AE%E5%90%8E%E7%BD%AE-%E3%80%81">–</a></td>
<td>前置、后置–</td>
</tr>
<tr>
<td><a href="https://blog.zmyu.cc/posts/d3c4a0cd.html#%E6%93%8D%E4%BD%9C%E7%AC%A6%E4%B9%8B%E5%89%8D%E7%BD%AE%E5%90%8E%E7%BD%AE-%E3%80%81">++</a></td>
<td>前置、后置++</td>
</tr>
<tr>
<td>*</td>
<td>间接访问操作符（解引用操作符）</td>
</tr>
<tr>
<td><a href="https://blog.zmyu.cc/posts/d3c4a0cd.html#%E6%93%8D%E4%BD%9C%E7%AC%A6%E4%B9%8B-%E7%B1%BB%E5%9E%8B-%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2">(类型)</a></td>
<td>强制类型转换</td>
</tr>
</tbody></table>
<hr>
<h3 id="关系操作符"><a href="#关系操作符" class="headerlink" title="关系操作符"></a>关系操作符</h3><table>
<thead>
<tr>
<th>&gt;</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>&gt;&#x3D;</td>
<td></td>
</tr>
<tr>
<td>&lt;</td>
<td></td>
</tr>
<tr>
<td>&lt;&#x3D;</td>
<td></td>
</tr>
<tr>
<td>!&#x3D;</td>
<td>用于测试“不相等”</td>
</tr>
<tr>
<td>&#x3D;&#x3D;</td>
<td>用于测试“相等”</td>
</tr>
</tbody></table>
<hr>
<h3 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h3><table>
<thead>
<tr>
<th>&amp;&amp;</th>
<th>逻辑与</th>
</tr>
</thead>
<tbody><tr>
<td>||</td>
<td>逻辑或</td>
</tr>
</tbody></table>
<ul>
<li>逻辑与&amp;&amp;操作符，如果左侧为假，不管右侧是什么，都不再计算。</li>
<li>逻辑或||操作符，如果左侧为真，不管右侧是什么，都不再计算。<br>区分逻辑与和按位与<br>1 &amp; 2  –&gt; 0<br>1 &amp;&amp; 2 –&gt; 1</li>
</ul>
<p>区分逻辑或和按位或<br>1 | 2 –&gt;3<br>1 || 2 –&gt; 1</p>
<ul>
<li><code>&amp;&amp;</code>一个条件为假，结果为假</li>
<li><code>||</code>一个条件为真，结果为真</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>,a = <span class="number">0</span>,b = <span class="number">2</span>,c = <span class="number">3</span>,d = <span class="number">4</span>;</span><br><span class="line">i = a++ &amp;&amp; ++b &amp;&amp; d++;</span><br><span class="line"><span class="comment">//i = a++ || ++b || d++;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n b = %d\n c = %d\n d = %d\n&quot;</span>,a,b,c,d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是1，2，3，4</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>,a = <span class="number">0</span>,b = <span class="number">2</span>,c = <span class="number">3</span>,d = <span class="number">4</span>;</span><br><span class="line"><span class="comment">//i = a++ &amp;&amp; ++b &amp;&amp; d++;</span></span><br><span class="line">i = a++ || ++b || d++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n b = %d\n c = %d\n d = %d\n&quot;</span>,a,b,c,d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是1，2，3，4</p>
<hr>
<h3 id="条件操作符"><a href="#条件操作符" class="headerlink" title="条件操作符"></a>条件操作符</h3><p><a href="https://blog.zmyu.cc/posts/d3c4a0cd.html#%E6%9D%A1%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%AC%A6%EF%BC%88%E4%B8%89%E7%9B%AE%E6%93%8D%E4%BD%9C%E7%AC%A6%EF%BC%89">条件操作符</a></p>
<hr>
<h3 id="逗号表达式"><a href="#逗号表达式" class="headerlink" title="逗号表达式"></a>逗号表达式</h3><p><code>exp1,exp2,exp3,...expn</code><br>逗号表达式，从左往右执行，整个表达式的结果是最后一个表达式的结果。</p>
<hr>
<h3 id="下标引用、函数调用和结构成员"><a href="#下标引用、函数调用和结构成员" class="headerlink" title="下标引用、函数调用和结构成员"></a>下标引用、函数调用和结构成员</h3><p>1、[]下标引用操作符<br>操作数：一个数组名 + 一个索引值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">10</span>];<span class="comment">//创建数组</span></span><br><span class="line">arr[<span class="number">9</span>] = <span class="number">10</span>;<span class="comment">//实用下标引用操作符</span></span><br></pre></td></tr></table></figure>
<p>[]的两个操作数是arr和9</p>
<p>2、( )函数调用操作符</p>
<p>3、访问一个结构的成员</p>
<ul>
<li>.    结构体.成员名</li>
<li>-&gt;  结构体指-&gt;成员名</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//里面是成员变量</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">char</span> id[<span class="number">20</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//使用struct Stu这个类型创建了一个学生变量s1，并初始化</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> <span class="title">s1</span> =</span> &#123;<span class="string">&quot;张三&quot;</span>,<span class="number">20</span>,<span class="string">&quot;121312312&quot;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span>* <span class="title">ps</span> =</span> &amp;s1;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,(*ps).name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,ps-&gt;name);</span><br><span class="line"><span class="comment">//结构体指针-&gt;成员</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,s1.name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,s1.age);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,s1.id);</span><br><span class="line"><span class="comment">//结构体.成员名（点.操作符）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="表达式求值"><a href="#表达式求值" class="headerlink" title="表达式求值"></a>表达式求值</h3><h4 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h4><p>为了获得精度，表达式中的字符和短整型操作数在使用之前被转换为普通整型，这种转换叫整型提升。</p>
<p>如何进行整型提升？<br>——整型提升是按照变量的数据类型的符号位来提升的。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="comment">//3的2进制序列：00000000 00000000 00000000 00000011</span></span><br><span class="line">    <span class="comment">//a的值：00000011</span></span><br><span class="line">    <span class="type">char</span> b = <span class="number">127</span>;</span><br><span class="line">    <span class="comment">//127的2进制序列：00000000 00000000 00000000 01111111</span></span><br><span class="line">    <span class="comment">//b的值：01111111</span></span><br><span class="line">    <span class="type">char</span> c = a + b;</span><br><span class="line">    <span class="comment">//a和b如何相加：为了获得精度，表达式中的字符和短整型操作数在使用之前被转换为普通整型，这种转换叫整型提升。</span></span><br><span class="line">    <span class="comment">//如何进行整型提升？</span></span><br><span class="line">    <span class="comment">//——整型提升是按照变量的数据类型的符号位来提升的</span></span><br><span class="line">    <span class="comment">//a：00000000 00000000 00000000 00000011</span></span><br><span class="line">    <span class="comment">//b：00000000 00000000 00000000 01111111</span></span><br><span class="line">    <span class="comment">//a + b =00000000 00000000 00000000 10000010</span></span><br><span class="line">    <span class="comment">//截断后 c = 10000010</span></span><br><span class="line">    <span class="comment">//对c整型提升：</span></span><br><span class="line">    <span class="comment">//11111111 11111111 11111111 10000010 - 补码</span></span><br><span class="line">    <span class="comment">//11111111 11111111 11111111 10000001 - 反码</span></span><br><span class="line">    <span class="comment">//10000000 00000000 00000000 01111110 - 原码</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,c);<span class="comment">//打印的结果是-126</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="算数转换"><a href="#算数转换" class="headerlink" title="算数转换"></a>算数转换</h4><p>如果某个操作符的各个操作数属于不同类型，那么除非其中一个操作数的转换为另一个操作数的类型，否则操作无法进行。<br>警告：算数转换要合理，否则会有问题。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">folat f = <span class="number">3.14</span>;</span><br><span class="line"><span class="type">int</span> num = f;<span class="comment">//隐式转换，会有精度丢失。</span></span><br></pre></td></tr></table></figure>

<h4 id="操作符的属性"><a href="#操作符的属性" class="headerlink" title="操作符的属性"></a>操作符的属性</h4><p>复杂表达式求值有三个因素影响：<br>1、操作符的优先级<br>2、操作符的结合性<br>3、是否控制结合顺序</p>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>字符函数和字符串函数</title>
    <url>/posts/25cf3d7e.html</url>
    <content><![CDATA[<p>求字符串长度</p>
<ul>
<li>strlen</li>
</ul>
<p>长度不受限制的字符串函数</p>
<ul>
<li>strcpy</li>
<li>strcat</li>
<li>strcmp</li>
</ul>
<span id="more"></span>

<p>长度受限制的字符串函数</p>
<ul>
<li>strncpy</li>
<li>strncat</li>
<li>strncmp</li>
</ul>
<p>字符串查找</p>
<ul>
<li>strstr</li>
<li>strtok</li>
</ul>
<p>错误信息报告</p>
<ul>
<li>strerror</li>
</ul>
<p>字符操作</p>
<p>内存操作函数</p>
<ul>
<li>memcpy</li>
<li>memmove</li>
<li>memset</li>
<li>memcmp</li>
</ul>
<hr>
<p>C语言字符串通常放在常量字符串和字符数组中。</p>
<h3 id="strlen"><a href="#strlen" class="headerlink" title="strlen"></a>strlen</h3><p>strlen函数是用来求字符串长度的<br><code>size_t strlen(const char *string)</code><br>返回类型是<code>size_t</code>就是<code>unsigned int</code>，即无符号整型，因为返回的长度不会是负数。根据这个特性，不能用两个strlen的返回值相减，这样得到的结果不是想要的。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(<span class="string">&quot;abcdef&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,len);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>字符串len有6个元素，打印的结果是6。<br>strlen的原理就是求出一个字符串中<code>\0</code>元素之前的元素个数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//错误示范！</span></span><br><span class="line">    <span class="type">char</span> arr[] = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>&#125;;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(arr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,len);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的打印结果是随机值，因为arr这个字符串数组中没有<code>\0</code>，strlen会一直增加，直到它找到了下一个<code>\0</code>。</p>
<p>模拟实现strlen：<br>1、计数器方法<br>2、递归方法<br>3、指针-指针的方法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">my_strlen</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    assert(str != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">while</span> (*str != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        count++;</span><br><span class="line">        str++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> len = my_strlen(<span class="string">&quot;abcdef&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,len);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="strcpy"><a href="#strcpy" class="headerlink" title="strcpy"></a>strcpy</h3><p><code>char* strcpy(char * destination,const char * source);</code><br>字符串拷贝，从源头拷贝到目的地。<br>注意⚠️：<br>原字符串必须以<code>\0</code>结束。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> arr1[] = <span class="string">&quot;abcdefghijkl&quot;</span>;</span><br><span class="line">    <span class="type">char</span> arr2[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(arr1,arr2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n%s&quot;</span>,arr1,arr2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是hello和hello。<br>拷贝时把arr2中的<code>hello</code>和<code>\0</code>一并拷贝到了arr1中</p>
<p>模拟实现strcpy：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="type">char</span>* <span class="title function_">my_strcpy</span><span class="params">(<span class="type">char</span>* dest,<span class="type">const</span> <span class="type">char</span>* src)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(dest != <span class="literal">NULL</span>);</span><br><span class="line">    assert(src != <span class="literal">NULL</span>);<span class="comment">//验证来源和目的地的指针不是空指针</span></span><br><span class="line">    <span class="type">char</span>* ret = dest;<span class="comment">//拷贝src指向的字符串到dest指向的空间，包含\0</span></span><br><span class="line">    <span class="keyword">while</span> (*dest++ = *src++)</span><br><span class="line">    &#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;<span class="comment">//返回目的空间的起始位置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> arr1[] = <span class="string">&quot;abcdefghijkl&quot;</span>;<span class="comment">//dest</span></span><br><span class="line">    <span class="type">char</span> arr2[] = <span class="string">&quot;hello&quot;</span>;<span class="comment">//src</span></span><br><span class="line">    my_strcpy(arr1,arr2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n%s&quot;</span>,arr1,arr2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="strcat"><a href="#strcat" class="headerlink" title="strcat"></a>strcat</h3><p>字符串追加。<br><code>char * strcat (char * destination, const char * source);</code><br>注意⚠️：目的地一定足够大，能放下追加的字符串<br>源头一定要以\0结尾<br>使用strcat，不能自己给自己追加（即arr不能又追加arr）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> arr1[<span class="number">30</span>] = <span class="string">&quot;hello&quot;</span>;<span class="comment">//目的地一定足够大，能放下追加的字符串</span></span><br><span class="line">    <span class="type">char</span> arr2[] = <span class="string">&quot;world&quot;</span>;<span class="comment">//</span></span><br><span class="line">    <span class="built_in">strcat</span>(arr1,arr2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,arr1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是helloworld</p>
<p>模拟实现strcat：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="type">char</span>* <span class="title function_">my_strcat</span><span class="params">(<span class="type">char</span>* dest ,<span class="type">const</span> <span class="type">char</span>* src)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>* ret = dest;</span><br><span class="line">    assert(dest != <span class="literal">NULL</span>);</span><br><span class="line">    assert(src != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">//1、找到目的字符串的\0</span></span><br><span class="line">    <span class="keyword">while</span> (*dest != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        dest++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2、追加</span></span><br><span class="line">    <span class="keyword">while</span> (*dest++ = *src++) &#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> arr1[<span class="number">30</span>] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="type">char</span> arr2[] = <span class="string">&quot;world&quot;</span>;</span><br><span class="line">    my_strcat(arr1,arr2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,arr1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="strcmp"><a href="#strcmp" class="headerlink" title="strcmp"></a>strcmp</h3><p><code>int strcmp (const char * str1,const char * str2);</code><br>字符串比较。对应字符比较，即先比较首字符，相等就往后比。</p>
<table>
<thead>
<tr>
<th></th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>str1 &lt; str2</td>
<td>&lt;0</td>
</tr>
<tr>
<td>str1 = str2<br></td>
<td>0</td>
</tr>
<tr>
<td>str1 &gt; str2<br></td>
<td>&gt;0</td>
</tr>
<tr>
<td>返回值根据不同编译器可能会不同，但符合返回值规律。</td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> *p1 = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">    <span class="type">char</span> *p2 = <span class="string">&quot;ghijk&quot;</span>;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">strcmp</span>(p1,p2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ret);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回的结果是-6（或任何一个负数），原因是a的ASCII值比g小，返回小于0的值。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> *p1 = <span class="string">&quot;kbcdef&quot;</span>;</span><br><span class="line">    <span class="type">char</span> *p2 = <span class="string">&quot;ghijk&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(p1,p2) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;p1 &gt; p2\n&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(p1,p2) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;p1 = p2\n&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;p1 &lt; p2\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>模拟实现strcmp：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">my_strcmp</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str1, <span class="type">const</span> <span class="type">char</span>* str2)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(str1 != <span class="literal">NULL</span>);</span><br><span class="line">    assert(str2 != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">while</span> (*str1 == *str2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (*str1 == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        str1++;</span><br><span class="line">        str2++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (*str1 &gt; *str2) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> *p1 = <span class="string">&quot;dbcdef&quot;</span>;</span><br><span class="line">    <span class="type">char</span> *p2 = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">    <span class="type">int</span> ret = my_strcmp(p1, p2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ret = %d\n&quot;</span>,ret);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="strncpy"><a href="#strncpy" class="headerlink" title="strncpy"></a>strncpy</h3><p><code>char *strncpy(char *strDest,const cahr *strSource,size_t count);</code><br><code>size_t count</code>的单位是字节<br>拷贝num个字符从原字符串到目标空间。<br>如果原字符串的长度小于num，则拷贝完原字符串后，在后边追加\0，直到第num个。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> arr1[<span class="number">5</span>] = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    <span class="type">char</span> arr2[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="built_in">strncpy</span>(arr1,arr2, <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,arr1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是hell</p>
<hr>
<h3 id="strncat"><a href="#strncat" class="headerlink" title="strncat"></a>strncat</h3><p><code>char *strncat(char *strDest,const char *strSource,size_t count);</code><br>追加num个字符从Source到Dest（拷贝到Dest后面）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> arr1[<span class="number">30</span>] = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">    <span class="type">char</span> arr2[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="built_in">strncat</span>(arr1,arr2, <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,arr1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是abcdefhell</p>
<hr>
<h3 id="strncmp"><a href="#strncmp" class="headerlink" title="strncmp"></a>strncmp</h3><p><code>int strncmp(const char *string 1,const char *string 2,size_t count);</code><br>字符串比较。<br><code>size_t count</code>是比较的字符数</p>
<table>
<thead>
<tr>
<th></th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>string1 &lt; string2</td>
<td>&lt;0</td>
</tr>
<tr>
<td>string1 = string2<br></td>
<td>0</td>
</tr>
<tr>
<td>string1 &gt; string2<br></td>
<td>&gt;0</td>
</tr>
</tbody></table>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *p1 = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *p2 = <span class="string">&quot;abcdaaa&quot;</span>;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">strncmp</span>(p1,p2, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ret);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是4（不同编译器可能打印结果不同，但都大于0）</p>
<hr>
<h3 id="strstr"><a href="#strstr" class="headerlink" title="strstr"></a>strstr</h3><p><code>char *strstr(const char *string,const char *strCharSet)</code><br>查找子字符串。<br>查找子串是否存在，存在返回<strong>第一次出现的起始地址</strong>，不存在返回NULL<br><code>const char *string</code>是要查找的字符串（在这个字符串里查找）<br><code>const char *strCharSet</code>是要找的字符串</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *p1 = <span class="string">&quot;abcdefghijk&quot;</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *p2 = <span class="string">&quot;defa&quot;</span>;</span><br><span class="line">    <span class="type">char</span>* ret = <span class="built_in">strstr</span>(p1, p2);<span class="comment">//在p1里找p2存在否，存在返回p2的起始位置，不存在返回空指针（NULL）</span></span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;没找到\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;子串存在，是:%s\n&quot;</span>,ret);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查找子串是否存在，存在返回<strong>第一次出现的起始地址</strong>，不存在返回NULL<br>模拟实现strstr：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="type">char</span>* <span class="title function_">my_strstr</span><span class="params">(<span class="type">char</span>* p1,<span class="type">const</span> <span class="type">char</span>* p2)</span></span><br><span class="line">&#123;</span><br><span class="line">    assert(p1 != <span class="literal">NULL</span>);</span><br><span class="line">    assert(p2 != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="type">char</span> *s1 = p1;</span><br><span class="line">    <span class="type">char</span> *s2 = p2;</span><br><span class="line">    <span class="type">char</span> *current = (<span class="type">char</span>*)p1;</span><br><span class="line">    <span class="keyword">if</span> (*p2 == <span class="string">&#x27;\0&#x27;</span>) <span class="comment">//如果p2是空指针，则返回p1的地址</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">char</span>*)p1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//开始查找</span></span><br><span class="line">    <span class="keyword">while</span> (*current)</span><br><span class="line">    &#123;</span><br><span class="line">        s1 = current;</span><br><span class="line">        s2 = (<span class="type">char</span>*)p2;</span><br><span class="line">        <span class="keyword">while</span> ((*s1 != <span class="string">&#x27;\0&#x27;</span>) &amp;&amp; (*s2 != <span class="string">&#x27;\0&#x27;</span>) &amp;&amp; (*s1 == *s2))</span><br><span class="line">        &#123;</span><br><span class="line">            s1++;</span><br><span class="line">            s2++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (*s2 == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> current;</span><br><span class="line">        &#125;</span><br><span class="line">        current++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;<span class="comment">//找不到了</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *p1 = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *p2 = <span class="string">&quot;def&quot;</span>;</span><br><span class="line">    <span class="type">char</span>* ret = my_strstr(p1, p2);<span class="comment">//在p1里找p2存在否，存在返回p2的起始位置，不存在返回空指针（NULL）</span></span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;没找到\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;子串存在，是:%s\n&quot;</span>,ret);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="strtok"><a href="#strtok" class="headerlink" title="strtok"></a>strtok</h3><p><code>char * strtok (char *str, const char * sep);</code><br><code>sep</code>参数是个字符串，定义了作为分隔的字符集合<br>    例如一个ip地址，<code>192.168.123.234</code>，它就是由点.分隔的<br>    或者一个邮箱<code>example@eee.com</code>，它就是由@和.分隔的<br><code>str</code>就是要被分隔的字符串，其中有或者没有 <code>sep</code> 中的字符都行。</p>
<p><code>strtok</code>在<code>str</code>中找到了<code>sep</code>中规定的字符，就把这个字符改成<code>\0</code>，并返回指向这个标记的指针。<br>例如<code>example@eee.com</code>返回<code>example</code>，再次调用，在之前的前提下，寻找下个标记，找到了.点，并返回下个首字符，即<code>eee</code></p>
<p>一般使用strtok函数，都要临时拷贝一份，切割拷贝的那份，避免原数据找不到了</p>
<p>strtok函数的第一个参数不是NULL，函数找到str中第一个标记，strtok函数保存它在字符串中的位置。</p>
<p>strtok函数的第一个参数是NULL，函数在同一个字符串中被保存的位置开始，查找下一个标记。</p>
<p>字符串中没有更多标记，返回NULL</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> arr[] = <span class="string">&quot;example@eee.com&quot;</span>;</span><br><span class="line">    <span class="type">char</span> *p = <span class="string">&quot;@.&quot;</span>;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">//先把arr拷贝一份，切割拷贝的字符串</span></span><br><span class="line">    <span class="built_in">strcpy</span>(buf, arr);</span><br><span class="line">    <span class="comment">//切割buf中的字符串</span></span><br><span class="line">    <span class="type">char</span>* ret = strtok(buf, p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,ret);</span><br><span class="line">    <span class="comment">//再次切割，找到第二个</span></span><br><span class="line">    ret = strtok(<span class="literal">NULL</span>, p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,ret);</span><br><span class="line">    <span class="comment">//第三次切割</span></span><br><span class="line">    ret = strtok(<span class="literal">NULL</span>, p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,ret);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">example</span><br><span class="line">eee</span><br><span class="line">com</span><br></pre></td></tr></table></figure>

<p>上面代码的改进：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> arr[] = <span class="string">&quot;example@eee.com&quot;</span>;</span><br><span class="line">    <span class="type">char</span> *p = <span class="string">&quot;@.&quot;</span>;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">//先把arr拷贝一份，切割拷贝的字符串</span></span><br><span class="line">    <span class="built_in">strcpy</span>(buf, arr);</span><br><span class="line">    <span class="type">char</span> *ret = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (ret = strtok(arr,p); ret != <span class="literal">NULL</span>; ret = strtok(<span class="literal">NULL</span>, p))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,ret);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面函数的for循环初始化部分<code>ret = strtok(arr,p)</code>只会运行一次，后面都会运行<code>ret = strtok(NULL, p)</code>。</p>
<hr>
<h3 id="strerror"><a href="#strerror" class="headerlink" title="strerror"></a>strerror</h3><p>把错误码转换成所对应的错误信息<br><code>char * strerror(int errnum);</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>* str = strerror(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,str);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是：Undefined error: 0</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>* str = strerror(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,str);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是：Operation not permitted</p>
<p>errno：是全局错误码的变量，当C语言库函数在执行过程中出现错误，会把错误码给errno中。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE* pf = fopen(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (pf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;打开成功\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是：No such file or directory</p>
<hr>
<h3 id="字符分类函数"><a href="#字符分类函数" class="headerlink" title="字符分类函数"></a>字符分类函数</h3><p>使用需要引用头文件<code>#include &lt;ctype.h&gt;</code></p>
<table>
<thead>
<tr>
<th>函数</th>
<th>如果它的参数符合下列条件就返回真</th>
</tr>
</thead>
<tbody><tr>
<td>iscntrl</td>
<td>任何控制字符</td>
</tr>
<tr>
<td>isspace</td>
<td>空白字符：空格’ ‘，换页’\f’，换行’\n’，回车’\r’，制表符’\t’或垂直制表符’\v’</td>
</tr>
<tr>
<td>isdigit</td>
<td>十进制数字 0-9</td>
</tr>
<tr>
<td>isxdigit</td>
<td>十六进制数字，包括所有十进制数字，小写字母a-f，大写字母A-F</td>
</tr>
<tr>
<td>islower</td>
<td>小写字母a-z</td>
</tr>
<tr>
<td>isupper</td>
<td>大写字母A-Z</td>
</tr>
<tr>
<td>isalpha</td>
<td>字母a-z或A-Z</td>
</tr>
<tr>
<td>isalnum</td>
<td>字母或着数字a-z，A-Z，0-9</td>
</tr>
<tr>
<td>ispunct</td>
<td>标点符号，任何不属于数字或者字母的图形字符（可打印）</td>
</tr>
<tr>
<td>isgraph</td>
<td>任何图形字符</td>
</tr>
<tr>
<td>isprint</td>
<td>任何可打印字符，包括图形字符和空白字符</td>
</tr>
<tr>
<td>是真就返回非0，假就返回0。</td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch = <span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">islower</span>(ch);<span class="comment">//判断ch是不是小写字符</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ch是小写字符，返回1</p>
<hr>
<h3 id="字符转换"><a href="#字符转换" class="headerlink" title="字符转换"></a>字符转换</h3><p>使用需要引用头文件<code>#include &lt;ctype.h&gt;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int tolower(int c);//转小写</span><br><span class="line">int toupper(int c);//转大写</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> &lt;string.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">tolower</span>(<span class="string">&#x27;Q&#x27;</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(ch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Q被tolower函数转换成小写q，打印的结果是小写q </p>
<hr>
<h3 id="memcpy"><a href="#memcpy" class="headerlink" title="memcpy"></a>memcpy</h3><p><code>void* mencpy (void * destination , const void * source ,size_t num);</code><br>内存拷贝，可以拷贝任意类型的变量。<br>C语言标准规定，memcpy只处理不重叠的拷贝，重叠的拷贝要使用<code>memmove</code>。（但有些编译器的memcpy也可以处理重叠拷贝）</p>
<p>strlen的局限性：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr1[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="type">int</span> arr2[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">//strcpy(arr2, arr1);//不能把整型地址赋给字符型指针，只能拷贝首元素</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用memcpy：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr1[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="type">int</span> arr2[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">memcpy</span>(arr2, arr1, <span class="keyword">sizeof</span>(arr1));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>arr1的内容被拷贝到了arr2中去</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr1[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="type">int</span> arr2[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">S</span> <span class="title">arr3</span>[] =</span> &#123;&#123;<span class="string">&quot;张三&quot;</span>,<span class="number">20</span>&#125;,&#123;<span class="string">&quot;李四&quot;</span>,<span class="number">22</span>&#125;&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">S</span> <span class="title">arr4</span>[3] =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">memcpy</span>(arr2, arr1, <span class="keyword">sizeof</span>(arr1));</span><br><span class="line">    <span class="built_in">memcpy</span>(arr4, arr3, <span class="keyword">sizeof</span>(arr3));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>模拟实现memcpy：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">void</span>* <span class="title function_">my_memcpy</span><span class="params">(<span class="type">void</span>* dest,<span class="type">const</span> <span class="type">void</span>* src,<span class="type">size_t</span> num)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span>* ret = dest;</span><br><span class="line">    assert(dest != <span class="literal">NULL</span>);</span><br><span class="line">    assert(src != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">while</span> (num--)</span><br><span class="line">    &#123;</span><br><span class="line">        *(<span class="type">char</span>*)dest = *(<span class="type">char</span>*)src;</span><br><span class="line">        dest = (<span class="type">char</span>*)dest + <span class="number">1</span>;</span><br><span class="line">        src = (<span class="type">char</span>*)src + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr1[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="type">int</span> arr2[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">S</span> <span class="title">arr3</span>[] =</span> &#123;&#123;<span class="string">&quot;张三&quot;</span>,<span class="number">20</span>&#125;,&#123;<span class="string">&quot;李四&quot;</span>,<span class="number">22</span>&#125;&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">S</span> <span class="title">arr4</span>[3] =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    my_memcpy(arr2, arr1, <span class="keyword">sizeof</span>(arr1));</span><br><span class="line">    my_memcpy(arr4, arr3, <span class="keyword">sizeof</span>(arr3));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="memmove"><a href="#memmove" class="headerlink" title="memmove"></a>memmove</h3><p><code>void *memmove (void *dest,const void *src,size_t count);</code><br>用于处理mencpy不能处理的重叠拷贝。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    memmove(arr+<span class="number">2</span>, arr, <span class="number">20</span>);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span> ;i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是：1 2 1 2 3 4 5 8 9 10</p>
<p>模拟实现memmove：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span>  </span></span><br><span class="line"><span class="type">void</span>* <span class="title function_">my_memmove</span><span class="params">(<span class="type">void</span>* dest ,<span class="type">const</span> <span class="type">void</span>* src,<span class="type">size_t</span> count)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span>* ret = dest;</span><br><span class="line">    assert(dest != <span class="literal">NULL</span>);</span><br><span class="line">    assert(src != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (dest &lt; src) &#123;</span><br><span class="line">        <span class="comment">//从前往后拷贝</span></span><br><span class="line">        <span class="keyword">while</span> (count--)</span><br><span class="line">        &#123;</span><br><span class="line">            *(<span class="type">char</span>*)dest = *(<span class="type">char</span>*)src;</span><br><span class="line">            dest = (<span class="type">char</span>*)dest + <span class="number">1</span>;</span><br><span class="line">            src = (<span class="type">char</span>*)src + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//从后往前拷贝</span></span><br><span class="line">        <span class="keyword">while</span> (count--) &#123;</span><br><span class="line">            *((<span class="type">char</span>*)dest+count) = *((<span class="type">char</span>*)src+count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    my_memmove(arr,arr+<span class="number">2</span>,<span class="number">20</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="memcmp"><a href="#memcmp" class="headerlink" title="memcmp"></a>memcmp</h3><p>内存比较。<br><code>int memcmp (const void * ptr1 ,const void * ptr2 ,size_t num);</code><br><code>size_t num</code>是比较字节的个数。</p>
<table>
<thead>
<tr>
<th></th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>stri1 &lt; str2</td>
<td>&lt;0</td>
</tr>
<tr>
<td>str1 = str2<br></td>
<td>0</td>
</tr>
<tr>
<td>str1 &gt; str2<br></td>
<td>&gt;0</td>
</tr>
</tbody></table>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr1[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="type">int</span> arr2[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">memcmp</span>(arr1, arr2, <span class="number">8</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ret);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>比较前8字节，即1，2这两个整型。打印的结果是0</p>
<hr>
<h3 id="memset"><a href="#memset" class="headerlink" title="memset"></a>memset</h3><p>修改字节。<br><code>void *memset(void *dest,int c,size_t count);</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> arr[<span class="number">10</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="built_in">memset</span>(arr, <span class="string">&#x27;#&#x27;</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面是一个错误示范：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">memset</span>(arr, <span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>memset(arr, 1, 10);</code>不会让数组内的10个整型改为1，而是会让相邻的10个字节的内存改为1</p>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>操作符练习</title>
    <url>/posts/da238f3f.html</url>
    <content><![CDATA[<h3 id="统计一个数字的二进制中1的个数"><a href="#统计一个数字的二进制中1的个数" class="headerlink" title="统计一个数字的二进制中1的个数"></a>统计一个数字的二进制中1的个数</h3><p>例如：15的二进制是0000 1111，有4个1<br>方法1:</p>
<span id="more"></span>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;计算一个数字的二进制中1的个数\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一个数字:-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    y = x;</span><br><span class="line">    <span class="keyword">if</span> (x&gt;=<span class="number">0</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ( x % <span class="number">2</span> == <span class="number">1</span> ) </span><br><span class="line">            &#123;</span><br><span class="line">                a++;</span><br><span class="line">            &#125;</span><br><span class="line">            x = x / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        x = -(x);</span><br><span class="line">        <span class="keyword">while</span>(x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ( x % <span class="number">2</span> == <span class="number">1</span> ) &#123;</span><br><span class="line">                a++;</span><br><span class="line">            &#125;</span><br><span class="line">            x = x / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        a = <span class="number">32</span> - a;</span><br><span class="line">        a = a + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d的二进制中有%d个1\n&quot;</span>,y,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方法2:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;计算一个数字的二进制中1的个数\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一个数字:-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    y = x;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++) </span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">if</span> (((x &gt;&gt; i) &amp; <span class="number">1</span>) == <span class="number">1</span>) <span class="comment">//这一步得到这个数字的二进制中的1位数字是1还是0</span></span><br><span class="line">       &#123;</span><br><span class="line">            a++;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d的二进制中有%d个1\n&quot;</span>,y,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方法3:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;计算一个数字的二进制中1的个数\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一个数字:-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    y = x;</span><br><span class="line">    <span class="keyword">while</span> (x) &#123;</span><br><span class="line">        x = x &amp; (x<span class="number">-1</span>);</span><br><span class="line">        a++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d的二进制中有%d个1\n&quot;</span>,y,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相关：<a href="https://zhuanlan.zhihu.com/p/138518019">负数的二进制计算</a></p>
<hr>
<h3 id="统计两个数字的二进制中不同位数的个数"><a href="#统计两个数字的二进制中不同位数的个数" class="headerlink" title="统计两个数字的二进制中不同位数的个数"></a>统计两个数字的二进制中不同位数的个数</h3><p>方法1:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;计算两个数字的二进制中不同位的个数\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入两个数字:-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">    <span class="keyword">for</span> (a = <span class="number">0</span>; a&lt;<span class="number">32</span>; a++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (((x&gt;&gt;a) &amp; <span class="number">1</span>) != ((y&gt;&gt;a) &amp; <span class="number">1</span>)) &#123;</span><br><span class="line">            b++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;有%d个不同的位数\n&quot;</span>,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方法2:利用按位异或^的特性统计二进制中1的个数。<br>相关：<a href="https://blog.zmyu.cc/posts/e4552cdf#%E6%8C%89%E4%BD%8D%E5%BC%82%E6%88%96">按位异或</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> c;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;计算两个数字的二进制中不同位的个数\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入两个数字:-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">    c = x ^ y;</span><br><span class="line">    <span class="keyword">while</span>(c)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ( c % <span class="number">2</span> == <span class="number">1</span> )</span><br><span class="line">                    &#123;</span><br><span class="line">                        b++;</span><br><span class="line">                    &#125;</span><br><span class="line">                c = c / <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;有%d个不同的位数\n&quot;</span>,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="打印二进制的奇数位和偶数位"><a href="#打印二进制的奇数位和偶数位" class="headerlink" title="打印二进制的奇数位和偶数位"></a>打印二进制的奇数位和偶数位</h3><p>获取一个整数二进制的所有偶数位和奇数位，分别打印出二进制序列。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;打印二进制的奇数位和偶数位\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入数字:-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;奇数位：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (a = <span class="number">30</span>; a&gt;=<span class="number">0</span>; a -= <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,(x&gt;&gt;a)&amp;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;偶数位：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (a = <span class="number">31</span>; a&gt;=<span class="number">0</span>; a -= <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,(x&gt;&gt;a)&amp;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="使用指针打印数组内容"><a href="#使用指针打印数组内容" class="headerlink" title="使用指针打印数组内容"></a>使用指针打印数组内容</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span>* p = arr;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;=sz; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,*p+i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>相关：<a href="https://blog.zmyu.cc/posts/e4552cdf.html#%E6%8C%89%E4%BD%8D%E5%BC%82%E6%88%96">交换两个变量的值，不使用第三个变量</a></p>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>最大公约数和最小公倍数</title>
    <url>/posts/ee2f5b4f.html</url>
    <content><![CDATA[<p>题目：输入两个正整数m和n，求其最大公约数和最小公倍数。</p>
<p>最大公约数（Greatest Common Divisor, GCD）是指两个或多个整数共有约数中最大的一个。例如，12和30的公约数有1、2、3、6，其中6就是12和30的最大公约数‌。</p>
<p>（1）最小公倍数&#x3D;两个数的积&#x2F;最大公约数<br>（2）求最大公约数用辗转相除法（又名欧几里德算法）</p>
<p>思路：通过两个函数分别计算这两个数字的最大公约数和最小公倍数。</p>
<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">GCD</span><span class="params">(<span class="type">int</span> m,<span class="type">int</span> n)</span><span class="comment">//求最大公约数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (n&gt;m)<span class="comment">//始终让m里面的数字是大的</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> temp;</span><br><span class="line">        temp = n;</span><br><span class="line">        n = m;</span><br><span class="line">        m = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//开始辗转相除</span></span><br><span class="line">    <span class="type">int</span> remainder = m % n;<span class="comment">//余数</span></span><br><span class="line">    <span class="keyword">while</span> (remainder) &#123;</span><br><span class="line">        m = n;</span><br><span class="line">        n = remainder;</span><br><span class="line">        remainder = m % n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">LCM</span><span class="params">(<span class="type">int</span> gcd,<span class="type">int</span> m,<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (m*n/gcd);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> m,n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入两个正整数m和n，求其最大公约数和最小公倍数:-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d,%d&quot;</span>,&amp;m,&amp;n);</span><br><span class="line">    <span class="type">int</span> gcd = GCD(m,n);</span><br><span class="line">    <span class="type">int</span> lcm = LCM(gcd,m,n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最大公约数是:%d\n&quot;</span>,gcd);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最小公倍数是:%d&quot;</span>,lcm);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>数组练习</title>
    <url>/posts/8dd99bf5.html</url>
    <content><![CDATA[<p>创建一个整型数组，完成对数组的操作<br>1、实现函数<code>init()</code>初始化数组为全0；<br>2、实现<code>print()</code>打印数组的每个元素；<br>3、实现<code>reverse()</code>函数完成对数组的逆置。</p>
<span id="more"></span>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">(<span class="type">int</span> arr[],<span class="type">int</span> sz)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;sz; i++) &#123;</span><br><span class="line">        arr[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> arr[],<span class="type">int</span> sz)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;sz; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">int</span> arr[],<span class="type">int</span> sz)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,x,y;</span><br><span class="line">    x = sz<span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> temp[sz];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;sz; i++) &#123;</span><br><span class="line">        temp[i] = arr[x];</span><br><span class="line">        x--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (y=<span class="number">0</span>; y&lt;sz; y++) &#123;</span><br><span class="line">        arr[y] = temp[y];</span><br><span class="line">    &#125;</span><br><span class="line">    print(temp,sz);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//    init(arr,sz);</span></span><br><span class="line"><span class="comment">//    print(arr,sz);</span></span><br><span class="line">    reverse(arr,sz);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>交换数组：将数组A的内容和数组B的内容进行交换（数组一样大）。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> A[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="type">int</span> B[<span class="number">10</span>] = &#123;<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>&#125;;</span><br><span class="line">    <span class="type">int</span> C[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> sz = <span class="keyword">sizeof</span>(A)/<span class="keyword">sizeof</span>(A[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;sz; i++) &#123;</span><br><span class="line">        C[i] = A[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;sz; i++) &#123;</span><br><span class="line">        A[i] = B[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;sz; i++) &#123;</span><br><span class="line">        B[i] = C[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;sz; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,A[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;sz; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,B[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>条件运算符（三目运算符）的嵌套</title>
    <url>/posts/8cf273af.html</url>
    <content><![CDATA[<p>题目：利用条件运算符的嵌套来完成此题：学习成绩&gt;&#x3D;90分的同学用A表示，60-89分之间的用B表示，60分以下的用C表示。<br>程序分析：（a&gt;b）？a:b这是条件运算符的基本例子。<br>参考：<a href="https://blog.zmyu.cc/posts/d3c4a0cd.html#%E6%9D%A1%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%AC%A6%EF%BC%88%E4%B8%89%E7%9B%AE%E6%93%8D%E4%BD%9C%E7%AC%A6%EF%BC%89">条件运算符</a></p>
<hr>
<p>使用一个三目运算符：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> grade;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入成绩:-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;input);</span><br><span class="line">    <span class="keyword">if</span> (input&gt;=<span class="number">60</span>) &#123;</span><br><span class="line">        grade = (input&gt;=<span class="number">90</span>) ? <span class="string">&#x27;A&#x27;</span> : <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        grade = <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,grade);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>改进后的代码（使用三目运算符的嵌套）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> grade;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入成绩:-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;input);</span><br><span class="line">    grade = (input&gt;=<span class="number">90</span>)? <span class="string">&#x27;A&#x27;</span> : (input&gt;=<span class="number">60</span>) ? <span class="string">&#x27;B&#x27;</span> : <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,grade);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>数组</title>
    <url>/posts/340249a9.html</url>
    <content><![CDATA[<p>数组是一组相同类型元素的集合。<br><code>type_t arr_name [const_n]</code><br>type_t 指的就是数组的元素类型。<br>const_n 是一个常量表达式，用来指定数组的大小。</p>
<span id="more"></span>

<hr>
<p><code>int arr[10];</code><br>创建一个数组，存放整型变量，10个<br><code>char arr2[5];</code><br>创建一个数组-存放字符-5个</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n = <span class="number">5</span>;</span><br><span class="line"><span class="type">char</span> ch[n];</span><br></pre></td></tr></table></figure>
<p>上面的方式是不行的，方括号内必须是常量表达式，不能是变量。<br><code>float arr4[1];</code><br>创建一个数组，存放float型数据，1个<br><code>double arr5[3];</code><br>创建double型数组，存放3个数据</p>
<hr>
<h3 id="数组的初始化"><a href="#数组的初始化" class="headerlink" title="数组的初始化"></a>数组的初始化</h3><p><code>int arr[10] = &#123;1,2,3&#125;;</code><br>上面是一个<strong>不完全初始化</strong>，只有前三个是1，2，3，剩下的元素默认是0。<br><code>char arr2[5] = &#123;&#39;a&#39;,&#39;b&#39;&#125;;</code><br>上面是一个char型数组的不完全初始化，前两个分别是a,b，剩下的默认是0。<br><code>char arr2[5] = “ab”;</code><br>上面是一个char型数组的不完全初始化，前三个分别是a,b,\0，剩下的默认是0。<br><code>char arr2[] = “abcdef”;</code><br>上面的数组根据初始化内容确定数组大小，大小是7，分别是abcdef和\0。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> arr[] = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,<span class="keyword">sizeof</span>(arr));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(arr));</span><br></pre></td></tr></table></figure>
<p>打印的结果是7 6，sizeof计算\0，strlen不计算\0。<br>1、strlen和sizeof没有什么关联。<br>2、strlen只能求字符串长度。<br>3、sizeof是计算变量、数组、类型的大小，单位是字节。<br>4、strlen是库函数，需要引用头文件，sizeof是操作符，不需要引用库文件。</p>
<p>总结：<br>数组是使用下标来访问的，下标是从0开始。<br>数组的大小可以通过计算得到。<br><code>int sz = sizeof(arr)/sizeof(arr[0]);</code></p>
<h3 id="一维数组在内存中的使用"><a href="#一维数组在内存中的使用" class="headerlink" title="一维数组在内存中的使用"></a>一维数组在内存中的使用</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;sz; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&amp;arr[%d] = %p\n&quot;</span>,i,&amp;arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是：<br>&amp;arr[0] &#x3D; 0x16fdff1b0<br>&amp;arr[1] &#x3D; 0x16fdff1b4<br>&amp;arr[2] &#x3D; 0x16fdff1b8<br>&amp;arr[3] &#x3D; 0x16fdff1bc<br>&amp;arr[4] &#x3D; 0x16fdff1c0<br>&amp;arr[5] &#x3D; 0x16fdff1c4<br>&amp;arr[6] &#x3D; 0x16fdff1c8<br>&amp;arr[7] &#x3D; 0x16fdff1cc<br>&amp;arr[8] &#x3D; 0x16fdff1d0<br>&amp;arr[9] &#x3D; 0x16fdff1d4</p>
<p>通过上面的结果得知，数组在内存中连续存放。</p>
<hr>
<h3 id="二维数组的创建和初始化"><a href="#二维数组的创建和初始化" class="headerlink" title="二维数组的创建和初始化"></a>二维数组的创建和初始化</h3><h4 id="二维数组的创建："><a href="#二维数组的创建：" class="headerlink" title="二维数组的创建："></a>二维数组的创建：</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">3</span>][<span class="number">4</span>];<span class="comment">//创建一个三行四列的数组</span></span><br><span class="line"><span class="type">char</span> arr[<span class="number">3</span>][<span class="number">5</span>];</span><br><span class="line"><span class="type">double</span> arr[<span class="number">2</span>][<span class="number">4</span>];</span><br></pre></td></tr></table></figure>
<h4 id="二维数组的初始化："><a href="#二维数组的初始化：" class="headerlink" title="二维数组的初始化："></a>二维数组的初始化：</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">3</span>][<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;<span class="comment">//第一行存不下就去第二行</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">3</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;&#125;;<span class="comment">//第一行放1，2，3，0，第二行放4，5，0，0，第三行全是0</span></span><br></pre></td></tr></table></figure>
<p>二维数组不完全初始化，后面的值默认是0。<br><code>int arr[][] = &#123;1,2,3,4,5,6,7,8&#125;;</code><br>上面的写法是错误的，列不能省略，行可以。<br><code>int arr[3][] = &#123;&#123;1,2,3,4&#125;,&#123;5,6,7,8&#125;&#125;;</code><br>上面的写法是错误的，列不能省略，行可以。<br><code>int arr[][4] = &#123;&#123;1,2,3,4&#125;,&#123;5,6,7,8&#125;&#125;;</code><br>上面的写法是可以的，行可以省略。</p>
<h4 id="二维数组的使用："><a href="#二维数组的使用：" class="headerlink" title="二维数组的使用："></a>二维数组的使用：</h4><p>二维数组通过下标使用。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">3</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;&#125;;<span class="comment">//创建一个三行四列的数组</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;<span class="number">4</span>;j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,arr[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是：<br>1 2 3 0 <br>4 5 0 0 <br>0 0 0 0</p>
<h4 id="二维数组在内存中的存储"><a href="#二维数组在内存中的存储" class="headerlink" title="二维数组在内存中的存储"></a>二维数组在内存中的存储</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">3</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;&#125;;<span class="comment">//创建一个三行四列的数组</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;<span class="number">4</span>;j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;&amp;arr[%d][%d] = %p\n&quot;</span>,i,j,&amp;arr[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是：<br>&amp;arr[0][0] &#x3D; 0x16fdff278<br>&amp;arr[0][1] &#x3D; 0x16fdff27c<br>&amp;arr[0][2] &#x3D; 0x16fdff280<br>&amp;arr[0][3] &#x3D; 0x16fdff284<br>&amp;arr[1][0] &#x3D; 0x16fdff288<br>&amp;arr[1][1] &#x3D; 0x16fdff28c<br>&amp;arr[1][2] &#x3D; 0x16fdff290<br>&amp;arr[1][3] &#x3D; 0x16fdff294<br>&amp;arr[2][0] &#x3D; 0x16fdff298<br>&amp;arr[2][1] &#x3D; 0x16fdff29c<br>&amp;arr[2][2] &#x3D; 0x16fdff2a0<br>&amp;arr[2][3] &#x3D; 0x16fdff2a4</p>
<p>二维数组和一维数组一样，也是连续的。</p>
<hr>
<p>数组一是用来存储数据，二是用来传递参数。</p>
<h3 id="数组作为函数参数"><a href="#数组作为函数参数" class="headerlink" title="数组作为函数参数"></a>数组作为函数参数</h3><p>往往我们在写代码的时候，会将数组作为参数传个函数，比如：我要实现一个冒泡排序（这里要讲算法思想）函数将一个整形数组排序。</p>
<h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>假设一组数据：10，9，8，7，6，5，4，3，2，1（10和9比较）<br>比较一次：9，10，8，7，6，5，4，3，2，1（10和8比较）<br>比较两次：9，8，10，7，6，5，4，3，2，1<br>比较三次：9，8，7，10，6，5，4，3，2，1<br>……<br>9，8，7，6，5，4，3，2，1，10</p>
<p>上面的一趟冒泡排序让10回到了最终位置，下面可以对其他数字冒泡排序。<br>9，8，7，6，5，4，3，2，1，10<br>8，9，7，6，5，4，3，2，1，10<br>8，7，9，6，5，4，3，2，1，10<br>……<br>8，7，6，5，4，3，2，1，9，10<br>对每个数字进行冒泡排序，最终效果<br>……<br>1，2，3，4，5，6，7，8，9，10</p>
<p>10个元素进行冒泡排序，需要进行9趟（n-1趟）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bubble_sort</span><span class="params">(<span class="type">int</span> arr[],<span class="type">int</span> sz)</span><span class="comment">//此时数组元素个数可以不指定</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//首先确定冒泡排序趟数</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//int sz = sizeof(arr)/sizeof(arr[0]);</span></span><br><span class="line">    <span class="comment">//不可以在这里计算数组个数，在主函数里计算，因为arr数组没有完全传过来,只传了arr首元素地址。</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;sz; i++) &#123;</span><br><span class="line">        <span class="type">int</span> flag = <span class="number">1</span>;<span class="comment">//假设本次排序已经有序了</span></span><br><span class="line">        <span class="comment">//每一趟冒泡排序内容</span></span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; sz - <span class="number">1</span> - i ; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="type">int</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                flag = <span class="number">0</span>;<span class="comment">//本次排序的数据不有序</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">//跳出冒泡排序循环</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">912</span>,<span class="number">813</span>,<span class="number">713</span>,<span class="number">226</span>,<span class="number">235</span>,<span class="number">4421</span>,<span class="number">313</span>,<span class="number">2131</span>,<span class="number">144</span>,<span class="number">1110</span>&#125;;</span><br><span class="line">    <span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">//对arr进行排序，升序。</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    bubble_sort(arr,sz);<span class="comment">//冒泡排序函数</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;sz; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>break语句只用于for和switch循环。</p>
<hr>
<h3 id="数组名是什么？"><a href="#数组名是什么？" class="headerlink" title="数组名是什么？"></a>数组名是什么？</h3><p>——数组名是首元素地址（有2个例外）<br>1、sizeof内部单独放数组名<br>此时数组名表示整个数组，计算整个数组大小，单位是字节。<br>2、&amp;arr，取地址数组名<br>数组名代表整个数组，取出的是整个数组的地址。</p>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>求1!+2!+3!+...+20!的和</title>
    <url>/posts/57ac09ac.html</url>
    <content><![CDATA[<p>题目：求1!+2!+3!+…+20!的和</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="title function_">Factorial</span><span class="params">(<span class="type">int</span> input)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (input&gt;<span class="number">0</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> input*Factorial(input<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="title function_">Factorial_Sum</span><span class="params">(<span class="type">int</span> max)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (max&gt;<span class="number">0</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Factorial(max)+Factorial_Sum(max<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> max = <span class="number">20</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ret = Factorial_Sum(max);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.0llu&quot;</span>,ret);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>枚举和共用体</title>
    <url>/posts/33091014.html</url>
    <content><![CDATA[<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>枚举就是一一列举<br>比如：一周有7天、性别有男女、一个月有30天，都可以一一列举</p>
<span id="more"></span>

<h3 id="枚举类型的定义"><a href="#枚举类型的定义" class="headerlink" title="枚举类型的定义"></a>枚举类型的定义</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Sex</span>//枚举类型</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Male,</span><br><span class="line">    Female,</span><br><span class="line">    Secret<span class="comment">//枚举的可能取值 - 常量</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Sex</span> <span class="title">s</span> =</span> Male;<span class="comment">//这里只能赋Male、Female、Secret规定的三个值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%d,%d&quot;</span>,Male,Female,Secret);<span class="comment">//打印的结果是0,1,2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="枚举的优点"><a href="#枚举的优点" class="headerlink" title="枚举的优点"></a>枚举的优点</h3><p>枚举相比<code>#define</code>的优点有哪些？</p>
<ul>
<li>增加代码的可读性和可维护性</li>
<li>和#define定义的标识符比较，枚举有类型检查，更严谨。（define只是替换）</li>
<li>防止命名污染</li>
<li>便于调试</li>
<li>使用方便，一次可以定义多个变量</li>
</ul>
<h2 id="联合（共用体）"><a href="#联合（共用体）" class="headerlink" title="联合（共用体）"></a>联合（共用体）</h2><p>联合也是一种特殊的自定义类型，这种类型定义的变量也包含了一系列的成员，特征是这些成员共用一块空间（所以联合也叫共用体）</p>
<h3 id="联合类型的定义"><a href="#联合类型的定义" class="headerlink" title="联合类型的定义"></a>联合类型的定义</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">Un</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">Un</span> <span class="title">u</span>;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(u));<span class="comment">//4</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,&amp;u);<span class="comment">//0x16fdff1c8</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,&amp;(u.c));<span class="comment">//0x16fdff1c8</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,&amp;(u.i));<span class="comment">//0x16fdff1c8</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面可以知道，u这个联合变量，占4字节，并且u里面的int和char类型的地址是一样的。</p>
<h3 id="联合的特点"><a href="#联合的特点" class="headerlink" title="联合的特点"></a>联合的特点</h3><p>联合的成员共用一块内存空间，这样一个联合变量的大小，至少是最大成员的大小（因为联合至少得有保存那个成员的能力）</p>
<h4 id="判断当前计算机的大小端存储："><a href="#判断当前计算机的大小端存储：" class="headerlink" title="判断当前计算机的大小端存储："></a>判断当前计算机的大小端存储：</h4><p>参考：<a href="https://blog.zmyu.cc/posts/c7b8a29b.html#%E5%A4%A7%E5%B0%8F%E7%AB%AF%E4%BB%8B%E7%BB%8D">大小端介绍</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">check_sys</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">Un</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">    &#125;u;</span><br><span class="line">    u.i = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//返回1，小端</span></span><br><span class="line">    <span class="comment">//返回0，大端</span></span><br><span class="line">    <span class="keyword">return</span> u.c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ret = check_sys();</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span> == ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;小端\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;大端\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="联合大小的计算"><a href="#联合大小的计算" class="headerlink" title="联合大小的计算"></a>联合大小的计算</h3><ul>
<li>联合大小最小是最大成员的大小。</li>
<li>当最大成员大小不是最大对齐数的整数倍的时候，对齐到最大对齐数的整数倍。<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">Un</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">char</span> arr[<span class="number">5</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">Un</span> <span class="title">u</span>;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(u));<span class="comment">//8</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
u的大小是8，是由于字符型的数组arr占5个字节，浪费3字节，对齐到8字节，是最大的成员，占8字节。</li>
</ul>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>求S=a+aa+aaa+aaaa+a...a</title>
    <url>/posts/cfa34226.html</url>
    <content><![CDATA[<p>题目：求S&#x3D;a+aa+aaa+aaaa+a…a的值，a是数字。<br>例如2+22+222+2222+22222（此时共有5个数相加），几个数相加和相加的数字由键盘输入。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a,b,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> temp=<span class="number">0</span>,temp2;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入这个数字:-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入几位数字相加:-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;b);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;b; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = <span class="built_in">pow</span>(<span class="number">10</span>,i) + temp;</span><br><span class="line">        a = <span class="number">2</span>*temp;</span><br><span class="line">        sum = sum + a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>相关：<a href="https://legacy.cplusplus.com/reference/cmath/pow/?kw=pow">pow语法</a></p>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>求利润</title>
    <url>/posts/7dc94531.html</url>
    <content><![CDATA[<p>题目：企业发放的奖金根据利润提成。<br>利润低于或等于10万元时，奖金可提10%；<br>利润高于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可提成7.5%；<br>20万到40万之间时，高于20万元的部分，可提成5%；<br>40万到60万之间时高于40万元的部分，可提成3%；<br>60万到100万之间时，高于60万元的部分，可提成1.5%；<br>高于100万元时，超过100万元的部分按1%提成。<br>从键盘输入当月利润数，求应发放奖金总数？</p>
<p>思路：根据输入的利润数，使用if语句判断利润的范围，然后根据不同情况进行计算。</p>
<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> bonus = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入利润：-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;input);</span><br><span class="line">    <span class="keyword">if</span> (input&lt;=<span class="number">100000</span>)<span class="comment">//利润低于或等于10万元时，奖金可提10%；</span></span><br><span class="line">    &#123;</span><br><span class="line">        bonus = input * <span class="number">0.1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (input&lt;=<span class="number">200000</span>)<span class="comment">//利润高于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可提成7.5%；</span></span><br><span class="line">    &#123;</span><br><span class="line">        bonus = <span class="number">100000</span> * <span class="number">0.1</span> + (input - <span class="number">100000</span>) * <span class="number">0.075</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (input&lt;=<span class="number">400000</span>)<span class="comment">//20万到40万之间时，高于20万元的部分，可提成5%；</span></span><br><span class="line">    &#123;</span><br><span class="line">        bonus = <span class="number">100000</span> * <span class="number">0.1</span> + <span class="number">100000</span> * <span class="number">0.075</span> + (input - <span class="number">200000</span>) * <span class="number">0.05</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (input&lt;=<span class="number">600000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        bonus = <span class="number">100000</span> * <span class="number">0.1</span> + <span class="number">100000</span> * <span class="number">0.075</span> + <span class="number">200000</span> * <span class="number">0.05</span> + (input - <span class="number">400000</span>) * <span class="number">0.03</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (input&lt;=<span class="number">1000000</span>)<span class="comment">//60万到100万之间时，高于60万元的部分，可提成1.5%；</span></span><br><span class="line">    &#123;</span><br><span class="line">        bonus = <span class="number">100000</span> * <span class="number">0.1</span> + <span class="number">100000</span> * <span class="number">0.075</span> + <span class="number">200000</span> * <span class="number">0.05</span> + <span class="number">200000</span> * <span class="number">0.03</span> + (input - <span class="number">600000</span>) * <span class="number">0.015</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//高于100万元时，超过100万元的部分按1%提成。</span></span><br><span class="line">    &#123;</span><br><span class="line">        bonus = <span class="number">100000</span> * <span class="number">0.1</span> + <span class="number">100000</span> * <span class="number">0.075</span> + <span class="number">200000</span> * <span class="number">0.05</span> + <span class="number">200000</span> * <span class="number">0.03</span> + <span class="number">400000</span> * <span class="number">0.015</span> +(input - <span class="number">1000000</span>) * <span class="number">0.01</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,bonus);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>改进上面的代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> bonus = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> bonus1 = <span class="number">100000</span> * <span class="number">0.1</span>;</span><br><span class="line">    <span class="type">int</span> bonus2 = bonus1 + <span class="number">100000</span> * <span class="number">0.075</span>;</span><br><span class="line">    <span class="type">int</span> bonus3 = bonus2 + <span class="number">200000</span> * <span class="number">0.05</span>;</span><br><span class="line">    <span class="type">int</span> bonus4 = bonus3 + <span class="number">200000</span> * <span class="number">0.03</span>;</span><br><span class="line">    <span class="type">int</span> bonus5 = bonus4 + <span class="number">400000</span> * <span class="number">0.015</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入利润：-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;input);</span><br><span class="line">    <span class="keyword">if</span> (input&lt;=<span class="number">100000</span>)<span class="comment">//利润低于或等于10万元时，奖金可提10%；</span></span><br><span class="line">    &#123;</span><br><span class="line">        bonus = input * <span class="number">0.1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (input&lt;=<span class="number">200000</span>)<span class="comment">//利润高于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可提成7.5%；</span></span><br><span class="line">    &#123;</span><br><span class="line">        bonus = bonus1 + (input - <span class="number">100000</span>) * <span class="number">0.075</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (input&lt;=<span class="number">400000</span>)<span class="comment">//20万到40万之间时，高于20万元的部分，可提成5%；</span></span><br><span class="line">    &#123;</span><br><span class="line">        bonus = bonus2 + (input - <span class="number">200000</span>) * <span class="number">0.05</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (input&lt;=<span class="number">600000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        bonus = bonus3 + (input - <span class="number">400000</span>) * <span class="number">0.03</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (input&lt;=<span class="number">1000000</span>)<span class="comment">//60万到100万之间时，高于60万元的部分，可提成1.5%；</span></span><br><span class="line">    &#123;</span><br><span class="line">        bonus = bonus4 + (input - <span class="number">600000</span>) * <span class="number">0.015</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//高于100万元时，超过100万元的部分按1%提成。</span></span><br><span class="line">    &#123;</span><br><span class="line">        bonus = bonus5 +(input - <span class="number">1000000</span>) * <span class="number">0.01</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,bonus);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>求一个数字的位数并逆序打印</title>
    <url>/posts/320ed515.html</url>
    <content><![CDATA[<p>题目：给一个不低于5位的正整数，要求：一、求它是几位数，二、逆序打印出各位数字。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Cal_Digit</span><span class="params">(<span class="type">int</span> input)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> digit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (input&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        input = input / <span class="number">10</span>;<span class="comment">//每次除10，digit+1，直到input等于0为止</span></span><br><span class="line">        digit++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> digit;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="type">void</span> <span class="title function_">Reverse_Print</span><span class="params">(<span class="type">int</span> input,<span class="type">int</span> digit)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;逆序后：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (; digit&gt;<span class="number">0</span>; digit--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> Last_Nun = input%<span class="number">10</span>;<span class="comment">//找到最后一位数</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,Last_Nun);</span><br><span class="line">        input = input / <span class="number">10</span>;<span class="comment">//除以10，舍弃最后一位数，得到新的数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> input;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;input);</span><br><span class="line">    <span class="type">int</span> digit = Cal_Digit(input);<span class="comment">//计算数字的位数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;这个数字是 %d 位数\n&quot;</span>,digit);</span><br><span class="line">    Reverse_Print(input,digit);<span class="comment">//逆序打印</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>求平方数</title>
    <url>/posts/9c140ef3.html</url>
    <content><![CDATA[<p>一个整数，它加上100后是一个完全平方数，再加上 168又是一个完全平方数，请问该数是多少？</p>
<p>思路：先来一个while(1)死循环，每次这个数(num)自增，这两个完全平方数必定都小于num+这个完全平方数，设计两个for循环，让这两个完全平方数自增。当符合条件时，跳出while死循环。</p>
<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        num++;</span><br><span class="line">        <span class="keyword">for</span> (a=<span class="number">0</span>; a&lt;num+<span class="number">100</span>; a++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (b=<span class="number">0</span>; b&lt;num+<span class="number">168</span>; b++) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((num+<span class="number">100</span> == a*a)&amp;&amp;(num+<span class="number">168</span> == b*b)) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d,%d,%d&quot;</span>,a,b,num);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>求矩阵对角线元素和</title>
    <url>/posts/c2c40989.html</url>
    <content><![CDATA[<p>题目：求一个3*3矩阵对角线元素之和</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Cal_Matrix</span><span class="params">(<span class="type">int</span> arr[<span class="number">3</span>][<span class="number">3</span>])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>,j=<span class="number">0</span>; i&lt;<span class="number">3</span>,j&lt;<span class="number">3</span>; i++,j++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum = arr[i][j] + sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">3</span>][<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;=<span class="number">2</span>; i++)<span class="comment">//往二维数组里添加数据</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;=<span class="number">2</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;arr[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,Cal_Matrix(arr));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>求输入的日期是一年中的第几天</title>
    <url>/posts/6803d08.html</url>
    <content><![CDATA[<p>题目：输入某年某月某日，判断这一天是这一年的第几天？</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> year,mon,date;</span><br><span class="line">    <span class="type">int</span> day = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入年月日:-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d,%d,%d&quot;</span>,&amp;year,&amp;mon,&amp;date);</span><br><span class="line">    day = date;</span><br><span class="line">    mon = mon - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">switch</span> (mon) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">            day = day + <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">            day = day + <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">            day = day + <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            day = day + <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">            day = day + <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            day = day + <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            day = day + <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            day = day + <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            day = day + <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            day = day + <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">if</span> ((year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span> )|| year % <span class="number">400</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                day = day + <span class="number">29</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                day = day + <span class="number">28</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            day = day + <span class="number">31</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;这是这一年的第 %d 天&quot;</span>,day);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>猴子吃桃问题</title>
    <url>/posts/e242ea52.html</url>
    <content><![CDATA[<p>猴子吃桃问题：</p>
<ul>
<li>猴子第一天摘下若干个桃子，当即吃了一半，还不瘾，又多吃了一个。第二天早上又将剩下的桃子吃掉一半，又多吃了一个。以后每天早上都吃了前一天剩下的一半零一个。到第10天早上想再吃时，见只剩下一个桃子了。求第一天共摘了多少。</li>
</ul>
<p>递归解决：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Cal_Peach</span><span class="params">(<span class="type">int</span> day,<span class="type">int</span> Left_Peach)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (day==<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (Left_Peach + <span class="number">1</span>) * <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> temp = (Left_Peach+<span class="number">1</span>)*<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> Cal_Peach(--day, temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> day = <span class="number">9</span>;</span><br><span class="line">    <span class="type">int</span> Left_Peach = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> Peach = Cal_Peach(day,Left_Peach);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Peach);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>for循环解决：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> day;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (day=<span class="number">9</span>; day&gt;=<span class="number">1</span>; day--)</span><br><span class="line">    &#123;</span><br><span class="line">        y = ( x + <span class="number">1</span> ) * <span class="number">2</span>;</span><br><span class="line">        x = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,y);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>文件操作</title>
    <url>/posts/95495db.html</url>
    <content><![CDATA[<h3 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h3><p>数据文件分为文本文件和二进制文件。<br>数据在内存中以二进制的形式存储，如果不加以转换的输出到外存，就是二进制文件。<br>以ASCII字符的形式存储的文件就是文本文件。</p>
<span id="more"></span>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10000</span>;</span><br><span class="line">    FILE* pf = fopen(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;wb&quot;</span>);<span class="comment">//wb的意思是以二进制的形式写文件text.txt</span></span><br><span class="line">    fwrite(&amp;a, <span class="number">4</span>, <span class="number">1</span>, pf);</span><br><span class="line">    fclose(pf);</span><br><span class="line">    pf = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="文件指针"><a href="#文件指针" class="headerlink" title="文件指针"></a>文件指针</h3><p>一般通过FILE的指针来维护这个FILE结构的变量。<br>文件指针变量：<code>FILE* pf</code></p>
<h3 id="文件打开关闭"><a href="#文件打开关闭" class="headerlink" title="文件打开关闭"></a>文件打开关闭</h3><p>文件在读写之前先打开文件，在使用结束之后关闭文件。<br>在编写程序时，在打开文件的同时，会返回一个<code>FILE*</code>类型的指针变量指向该文件。<br>用<code>fopen</code>打开文件，用<code>fclose</code>关闭文件。<br><code>FILE* fopen (const char *filename, const char* mode);</code><br><code>int fclose (FILE* stream);</code></p>
<p>文件打开方式：</p>
<table>
<thead>
<tr>
<th>文件使用方式</th>
<th>含义</th>
<th>如果指定文件不存在</th>
</tr>
</thead>
<tbody><tr>
<td>“r”（只读）</td>
<td>为了输入文件，打开一个已经存在的文本文件</td>
<td>出错</td>
</tr>
<tr>
<td>“w”（只写）</td>
<td>为了输出数据，打开一个文本文件</td>
<td>建立新文件</td>
</tr>
<tr>
<td>“a”（追加）</td>
<td>向文本末尾添加数据</td>
<td>出错</td>
</tr>
<tr>
<td>“rb”（只读）</td>
<td>为了输入数据，打开一个二进制文件</td>
<td>出错</td>
</tr>
<tr>
<td>“wb”（只写）</td>
<td>为了输出数据，打开一个二进制文件</td>
<td>建立新文件</td>
</tr>
<tr>
<td>“ab”（追加）</td>
<td>向一个二进制文件尾添加数据</td>
<td>出错</td>
</tr>
<tr>
<td>“r+”（读写）</td>
<td>为了读和写，打开一个文本文件</td>
<td>出错</td>
</tr>
<tr>
<td>“w+”（读写）</td>
<td>为了读和写，建立一个新文件</td>
<td>建立新文件</td>
</tr>
<tr>
<td>“a+”（读写）</td>
<td>打开一个文件，在文件尾读写</td>
<td>建立新文件</td>
</tr>
<tr>
<td>“rb+”（读写）</td>
<td>为了读和写，打开一个二进制文件</td>
<td>出错</td>
</tr>
<tr>
<td>“wb+”（读写）</td>
<td>为了读和写，新建一个二进制文件</td>
<td>建立新文件</td>
</tr>
<tr>
<td>“ab+”（读写）</td>
<td>打开一个二进制文件，在文件尾进行读写</td>
<td>建立新文件</td>
</tr>
</tbody></table>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//打开文件text.txt</span></span><br><span class="line">    FILE* pf = fopen(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (pf == <span class="literal">NULL</span>)<span class="comment">//打开失败</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,strerror(errno));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打开成功</span></span><br><span class="line">    <span class="comment">//读文件</span></span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    fclose(pf);</span><br><span class="line">    pf = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="文件的顺序读写"><a href="#文件的顺序读写" class="headerlink" title="文件的顺序读写"></a>文件的顺序读写</h3><table>
<thead>
<tr>
<th>功能</th>
<th>函数名</th>
<th>适用于</th>
</tr>
</thead>
<tbody><tr>
<td>字符输入函数</td>
<td>fgetc</td>
<td>所有输入流</td>
</tr>
<tr>
<td>字符输出函数</td>
<td>fputc</td>
<td>所有输出流</td>
</tr>
<tr>
<td>文本行输入函数</td>
<td>fgets</td>
<td>所有输入流</td>
</tr>
<tr>
<td>文本行输出函数</td>
<td>fputs</td>
<td>所有输出流</td>
</tr>
<tr>
<td>格式化输入函数</td>
<td>fscanf</td>
<td>所有输入流</td>
</tr>
<tr>
<td>格式化输出函数</td>
<td>fprintf</td>
<td>所有输出流</td>
</tr>
<tr>
<td>二进制输入</td>
<td>fread</td>
<td>文件</td>
</tr>
<tr>
<td>二进制输出</td>
<td>fwrite</td>
<td>文件</td>
</tr>
</tbody></table>
<h4 id="fputc"><a href="#fputc" class="headerlink" title="fputc"></a>fputc</h4><p>字符输出。<br><code>int fputc ( int character, FILE * stream );</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE* pfWrite = fopen(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (pfWrite == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,strerror(errno));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//写文件</span></span><br><span class="line">    fputc(<span class="string">&#x27;H&#x27;</span>, pfWrite);</span><br><span class="line">    fputc(<span class="string">&#x27;e&#x27;</span>, pfWrite);</span><br><span class="line">    fputc(<span class="string">&#x27;l&#x27;</span>, pfWrite);</span><br><span class="line">    fputc(<span class="string">&#x27;l&#x27;</span>, pfWrite);</span><br><span class="line">    fputc(<span class="string">&#x27;o&#x27;</span>, pfWrite);</span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    fclose(pfWrite);</span><br><span class="line">    pfWrite = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行后，test.txt内容改为<code>Hello</code>。先前的内容被抹去。<br><code>fputc</code>一次会写入一个字符。</p>
<h4 id="fgetc"><a href="#fgetc" class="headerlink" title="fgetc"></a>fgetc</h4><p>字符输入。<br><code>int fgetc ( FILE * stream );</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE* pfRead = fopen(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (pfRead == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,strerror(errno));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//读文件</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,fgetc(pfRead));<span class="comment">//H</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,fgetc(pfRead));<span class="comment">//e</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,fgetc(pfRead));<span class="comment">//l</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,fgetc(pfRead));<span class="comment">//l</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,fgetc(pfRead));<span class="comment">//0</span></span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    fclose(pfRead);</span><br><span class="line">    pfRead = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>fgetc一次读一个字符。<br>test.txt的内容是：<code>Hello</code></p>
<h4 id="fgets"><a href="#fgets" class="headerlink" title="fgets"></a>fgets</h4><p>文本行输入。<br><code>char * fgets ( char * str, int num, FILE * stream );</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">1024</span>] = &#123;<span class="number">1</span>&#125;;</span><br><span class="line">    FILE* pf = fopen(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (pf == <span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,strerror(errno));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//读文件</span></span><br><span class="line">    fgets(buf,<span class="number">1024</span>,pf);<span class="comment">//fgets会读取到最后的换行符，所以打印时不用加\n就会换行，加了\n就换两行</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,buf);<span class="comment">//Hello</span></span><br><span class="line">    fgets(buf,<span class="number">1024</span>,pf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,buf);<span class="comment">//World</span></span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    fclose(pf);</span><br><span class="line">    pf = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>text.txt原先的内容是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello</span><br><span class="line">World</span><br></pre></td></tr></table></figure>
<p>一个<code>fgets</code>会读取一行文本至最后，<code>fgets</code>会读取到最后的换行符，所以打印时不用加\n就会换行，加了<code>\n</code>就换两行。<br>想要读取两行文本，就用两个<code>fgets</code>。</p>
<h4 id="fputs"><a href="#fputs" class="headerlink" title="fputs"></a>fputs</h4><p>文本行输出。<br><code>int fputs(const char *string,FILE *stream);</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    FILE* pf = fopen(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (pf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,strerror(errno));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//写文件</span></span><br><span class="line">    <span class="built_in">fputs</span>(<span class="string">&quot;hello\n&quot;</span>, pf);</span><br><span class="line">    <span class="built_in">fputs</span>(<span class="string">&quot;world&quot;</span>, pf);</span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    fclose(pf);</span><br><span class="line">    pf = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行程序后，test.txt的内容为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello</span><br><span class="line">world</span><br></pre></td></tr></table></figure>
<p>使用<code>fputs</code>函数，想在文件中换行需要自己输入<code>\n</code>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    fgets(buf,<span class="number">1024</span>,<span class="built_in">stdin</span>);<span class="comment">//从标准输入流读取信息（键盘）</span></span><br><span class="line">    <span class="built_in">fputs</span>(buf, <span class="built_in">stdout</span>);<span class="comment">//输出到标准输出流（屏幕）</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="fscanf"><a href="#fscanf" class="headerlink" title="fscanf"></a>fscanf</h4><p>格式化的输入数据。<br><code>int fscnaf(FILE *stream,const char *format[,arguments]...);</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">float</span> f;</span><br><span class="line">    <span class="type">char</span> arr[<span class="number">10</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">S</span> <span class="title">s</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    FILE* pf = fopen(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (pf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//以格式化输入数据</span></span><br><span class="line">    <span class="built_in">fscanf</span>(pf, <span class="string">&quot;%d %f %s&quot;</span>,&amp;(s.n),&amp;(s.f),&amp;(s.arr));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %f %s\n&quot;</span>,s.n,s.f,s.arr);</span><br><span class="line">    fclose(pf);</span><br><span class="line">    pf = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>test.txt的内容是：<code>100 3.140000 Hello</code><br>程序运行后，屏幕上输出：<code>100 3.140000 Hello</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">float</span> f;</span><br><span class="line">    <span class="type">char</span> arr[<span class="number">10</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">S</span> <span class="title">s</span> =</span>&#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="built_in">fscanf</span>(<span class="built_in">stdin</span>, <span class="string">&quot;%d %f %s&quot;</span>,&amp;(s.n),&amp;(s.f),&amp;(s.arr));<span class="comment">//从标准输入流获取数据（键盘）</span></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">&quot;%d %f %s&quot;</span>,s.n,s.f,s.arr);<span class="comment">//从标准输出流输出数据（屏幕）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="fprintf"><a href="#fprintf" class="headerlink" title="fprintf"></a>fprintf</h4><p>以格式化的形式写文件。<br><code>int fprintf ( FILE * stream, const char * format, ... );</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">float</span> f;</span><br><span class="line">    <span class="type">char</span> arr[<span class="number">10</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">S</span> <span class="title">s</span> =</span> &#123;<span class="number">100</span>,<span class="number">3.14</span>,<span class="string">&quot;Hello&quot;</span>&#125;;</span><br><span class="line">    FILE* pf = fopen(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (pf == <span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//以格式化的形式写文件</span></span><br><span class="line">    <span class="built_in">fprintf</span>(pf, <span class="string">&quot;%d %f %s&quot;</span>,s.n,s.f,s.arr);</span><br><span class="line">    fclose(pf);</span><br><span class="line">    pf = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行后，test.txt被改为：<code>100 3.140000 Hello</code></p>
<h4 id="fread"><a href="#fread" class="headerlink" title="fread"></a>fread</h4><p>以二进制的形式读文件。<br><code>size_t fread ( void * ptr, size_t size, size_t count, FILE * stream );</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">double</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">S</span> <span class="title">s</span> =</span>&#123; <span class="number">0</span> &#125;;</span><br><span class="line">    FILE* pf = fopen(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (pf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//二进制形式读文件</span></span><br><span class="line">    fread(&amp;s, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> S), <span class="number">1</span>, pf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s %d %lf\n&quot;</span>,s.name,s.age,s.score);</span><br><span class="line">    fclose(pf);</span><br><span class="line">    pf = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>test.txt的内容为<code>张三 12 111.999000</code><br>输出的结果是<code>张三 12 111.999000</code></p>
<h4 id="fwirte"><a href="#fwirte" class="headerlink" title="fwirte"></a>fwirte</h4><p>以二进制的形式写文件。<br><code>size_t fwrite ( const void * ptr, size_t size, size_t count, FILE * stream );</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">double</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">S</span> <span class="title">s</span> =</span> &#123;<span class="string">&quot;张三&quot;</span>,<span class="number">12</span>,<span class="number">111.999</span>&#125;;</span><br><span class="line">    FILE* pf = fopen(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (pf == <span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//二进制形式写文件</span></span><br><span class="line">    fwrite(&amp;s, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> S), <span class="number">1</span>, pf);</span><br><span class="line">    fclose(pf);</span><br><span class="line">    pf = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序运行后，test.txt的内容被改为<code>张三 12 111.999000</code></p>
<h3 id="文件的随机读写"><a href="#文件的随机读写" class="headerlink" title="文件的随机读写"></a>文件的随机读写</h3><h4 id="fseek"><a href="#fseek" class="headerlink" title="fseek"></a>fseek</h4><p>根据文件指针的位置和偏移量来定位文件指针。<br><code>int fseek (FILE* stream , long int offset , int origin );</code><br><code>long int offset</code>是偏移量，<code>int origin</code>是文件指针的当前位置。</p>
<p>test.txt文件的内容是<code>abcdef</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE* pf = fopen(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (pf == <span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//1、定位文件指针</span></span><br><span class="line">    fseek(pf, <span class="number">1</span>, SEEK_CUR);</span><br><span class="line">    <span class="comment">//2、读取文件</span></span><br><span class="line">    <span class="type">int</span> ch = fgetc(pf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,ch);<span class="comment">//b</span></span><br><span class="line">    fclose(pf);</span><br><span class="line">    pf = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ftell"><a href="#ftell" class="headerlink" title="ftell"></a>ftell</h4><p>返回文件指针相对于起始位置的偏移量。<br><code>long int ftell (FILE *stream);</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE* pf = fopen(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (pf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    fgetc(pf);</span><br><span class="line">    <span class="comment">//读取文件</span></span><br><span class="line">    <span class="type">int</span> pos = ftell(pf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,pos);</span><br><span class="line">    fclose(pf);</span><br><span class="line">    pf = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是1</p>
<h4 id="rewind"><a href="#rewind" class="headerlink" title="rewind"></a>rewind</h4><p>让文件指针位置回到文件的起始位置<br><code>void rewind (FILE* stream);</code></p>
<p>test.txt文件的内容是<code>abcdef</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE* pf = fopen(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (pf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ch = fgetc(pf);<span class="comment">//读取的结果是a</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>,ch);</span><br><span class="line">    <span class="comment">//2、读取文件</span></span><br><span class="line">    rewind(pf);</span><br><span class="line">    ch = fgetc(pf);<span class="comment">//还是a</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>,ch);</span><br><span class="line">    fclose(pf);</span><br><span class="line">    pf = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="文件结束的判定"><a href="#文件结束的判定" class="headerlink" title="文件结束的判定"></a>文件结束的判定</h3><h4 id="被错误使用的feof"><a href="#被错误使用的feof" class="headerlink" title="被错误使用的feof"></a>被错误使用的feof</h4><p>在文件读取的过程中，不能用feof的返回值判断文件是否读取结束。<br>这个函数是用于当文件读取结束时，判断时读取失败结束，还是遇到文件尾结束。</p>
<p>test.txt文件的内容是<code>abcdef</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE* pf = fopen(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (pf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;open file test.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ch = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((ch = fgetc(pf)) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(ch);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ferror(pf)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;error\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (feof(pf))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;end of file\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(pf);</span><br><span class="line">    pf = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是<code>abcdefend of file</code></p>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>求分数序列和</title>
    <url>/posts/57d6473f.html</url>
    <content><![CDATA[<p>题目：有一分数序列：2&#x2F;1,3&#x2F;2,5&#x2F;3,8&#x2F;5,13&#x2F;8,21&#x2F;13…求出这个数列的前20项之和。<br>程序分析：请抓住分子与分母的变化规律。</p>
<p>递归解决：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">float</span> <span class="title function_">Cal</span><span class="params">(<span class="type">float</span> a,<span class="type">float</span> b,<span class="type">int</span> count)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (count&lt;=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">float</span> temp = b/a;</span><br><span class="line">        <span class="type">float</span> c = a + b;</span><br><span class="line">        <span class="keyword">return</span> (temp + Cal(b, c, count<span class="number">-1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(</span></span><br><span class="line"><span class="params">&#123;</span></span><br><span class="line"><span class="params">    <span class="type">float</span> a = <span class="number">1</span>;</span></span><br><span class="line"><span class="params">    <span class="type">float</span> b = <span class="number">2</span>;</span></span><br><span class="line"><span class="params">    <span class="type">int</span> count = <span class="number">20</span>;</span></span><br><span class="line"><span class="params">    <span class="type">float</span> ret = Cal(a,b,count);</span></span><br><span class="line"><span class="params">    <span class="built_in">printf</span>(<span class="string">&quot;%lf&quot;</span>,ret);</span></span><br><span class="line"><span class="params">    <span class="keyword">return</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="params">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>弹跳球问题</title>
    <url>/posts/64f58741.html</url>
    <content><![CDATA[<p>题目：一球从100米高度自由落下，每次落地后反跳回原高度的一半，再落下，求它在第10次落地时，共经过多少米？第10次反弹多高？</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">float</span> height = <span class="number">100</span>;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="type">float</span> distance = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (count=<span class="number">1</span>; count&lt;=<span class="number">10</span>; count++)</span><br><span class="line">    &#123;</span><br><span class="line">        distance = height + distance;</span><br><span class="line">        height = height / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;第%d次落地，下次高度：%lf，总距离：%lf\n&quot;</span>,count,height,distance);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>约瑟夫环</title>
    <url>/posts/ecc7cefb.html</url>
    <content><![CDATA[<p>题目：有n个人围成一圈，顺序排号。<br>从第一个人开始报数（从1到3报数），凡报到3的人退出圈子，问最后留下的是原来第几号的那位。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Cal_Josephus</span><span class="params">(<span class="type">int</span> input,<span class="type">int</span>* arr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> stay = input;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (stay&gt;<span class="number">1</span>)<span class="comment">//当现在留下的人数大于1的时候，一直循环</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;input; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j==<span class="number">3</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                arr[i] = <span class="number">0</span>;</span><br><span class="line">                j = <span class="number">0</span>;</span><br><span class="line">                stay--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (arr[i] != <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ret++;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> * argv[])</span> &#123;</span><br><span class="line">    <span class="type">int</span> input;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;input);</span><br><span class="line">    <span class="type">int</span> arr[input];</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">for</span> (x=<span class="number">0</span>; x&lt;input; x++)<span class="comment">//先把整个数组都赋值1，代表现在留下</span></span><br><span class="line">    &#123;</span><br><span class="line">        arr[x] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ret = Cal_Josephus(input,arr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;留下的是第%d个人&quot;</span>,ret);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>翻转输出一个整数</title>
    <url>/posts/3b13ca96.html</url>
    <content><![CDATA[<p>题目：输入一个整数，并将其反转后输出。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> input;</span><br><span class="line">    <span class="type">int</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;input);</span><br><span class="line">    <span class="keyword">while</span> (input != <span class="number">0</span>) &#123;</span><br><span class="line">        k = input % <span class="number">10</span>;</span><br><span class="line">        m = m * <span class="number">10</span> + k;</span><br><span class="line">        input = input / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,m);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>生成101到200之间的素数</title>
    <url>/posts/f9d87d54.html</url>
    <content><![CDATA[<p>题目：判断101到200之间的素数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">101</span>; i&lt;=<span class="number">200</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">2</span>; j&lt;i ;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i%j == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>方法二：调用函数解决</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Is_Prime</span><span class="params">(<span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (j=<span class="number">2</span>; j&lt;i; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i%j==<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">101</span>; i&lt;=<span class="number">200</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> ret = Is_Prime(i);</span><br><span class="line">        <span class="keyword">if</span> (ret == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>统计输入的符的字母、空格、数字和其他字符数</title>
    <url>/posts/b65d89a4.html</url>
    <content><![CDATA[<p>题目：输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> Letter = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> Num = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> Space = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> Others = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (c!=<span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((c&gt;=<span class="number">65</span> &amp;&amp; c&lt;=<span class="number">90</span>) || (c&gt;=<span class="number">97</span> &amp;&amp; c&lt;=<span class="number">122</span>))<span class="comment">//这个字符是英文字符</span></span><br><span class="line">        &#123;</span><br><span class="line">            Letter++;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)<span class="comment">//这个字符是数字</span></span><br><span class="line">        &#123;</span><br><span class="line">            Num++;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Space++;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Others++;</span><br><span class="line">        &#125;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Letter = %d \nNumber = %d \nSpace = %d \nOthers = %d \n&quot;</span>,Letter,Num,Space,Others);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结：</p>
<ul>
<li>想要判断一个字符，本质上是判断这个字符的ASCII码，可以直接拿这个字符和ASCII码比较，不用加单引号，但想拿它和另一个字符比较，另一个字符必须加单引号。（可能是字符加了单引号就转换成了ASCII码？）</li>
<li><code>&amp;&amp;</code>一个条件为假，结果为假</li>
<li><code>||</code>一个条件为真，结果为真<br>参考：<a href="https://blog.zmyu.cc/posts/e4552cdf.html#%E9%80%BB%E8%BE%91%E6%93%8D%E4%BD%9C%E7%AC%A6">逻辑操作符</a></li>
</ul>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言100道经典题-求1、2、3、4能组成多少个不同且无重复的三位数</title>
    <url>/posts/5a3f4090.html</url>
    <content><![CDATA[<p>题目：有1、2、3、4这4个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？</p>
<p>思路：1、2、3、4能组成无重复数字的三位数最小是123，最大是432，根据这个，设计一个for循环，最小是123，最大是432，在循环中，计算出这个当前数字的个位、十位和百位数字都是什么，用if进行筛选，选出个位十位百位这三个数字不相等的数字，再选出这3个数字都小于4的数字。</p>
<span id="more"></span>

<hr>
<p>方法一：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>,c=<span class="number">0</span>,count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">123</span>; i&lt;=<span class="number">432</span>; i++) &#123;</span><br><span class="line">        a = i % <span class="number">10</span>;<span class="comment">//取这个数字的各位</span></span><br><span class="line">        c = i / <span class="number">100</span>;<span class="comment">//计算出这个数字的百位</span></span><br><span class="line">        b = ( i - ( c * <span class="number">100</span> )) / <span class="number">10</span>;<span class="comment">//计算这个数字的十位</span></span><br><span class="line">        <span class="keyword">if</span> (a!=b &amp;&amp; a != c &amp;&amp; b != c)<span class="comment">//首先，a,b,c三个数字不相等</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a &lt;= <span class="number">4</span> &amp;&amp; b &lt;= <span class="number">4</span> &amp;&amp; c &lt;=<span class="number">4</span> &amp;&amp; a != <span class="number">0</span> &amp;&amp; b != <span class="number">0</span> &amp;&amp; c != <span class="number">0</span>)<span class="comment">//其次，a,b,c三个数字都必须小于等于4且大于0</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);</span><br><span class="line">                count++;<span class="comment">//计次</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nCount = %d\n&quot;</span>,count);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出的结果是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123 124 132 134 142 143 213 214 231 234 241 243 312 314 321 324 341 342 412 413 421 423 431 432 </span><br><span class="line">Count = 24</span><br></pre></td></tr></table></figure>
<hr>
<p>方法二：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a,b,c;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (a=<span class="number">1</span>; a&lt;=<span class="number">4</span>; a++) <span class="comment">//先用三个for循环获得这4个数字组成的3位数的所有组和</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (b=<span class="number">1</span>; b&lt;=<span class="number">4</span>; b++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (c=<span class="number">1</span>; c&lt;=<span class="number">4</span>; c++) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (a != b &amp;&amp; a != c &amp;&amp; b != c) <span class="comment">//在这4个数的组合中筛选各不相等的</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d%d%d &quot;</span>,a,b,c);</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nCount = %d\n&quot;</span>,count);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123 124 132 134 142 143 213 214 231 234 241 243 312 314 321 324 341 342 412 413 421 423 431 432 </span><br><span class="line">Count = 24</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>指针详解练习</title>
    <url>/posts/2ba5285b.html</url>
    <content><![CDATA[<p>数组名是首元素地址，但是有2个例外，sizeof（数组名单独放在内部）和&amp;数组名，它们两个表示整个数组，此外都是数组首元素。</p>
<span id="more"></span>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(a));<span class="comment">//sizeof(数组名) - 计算的是数组总大小 - 单位是字节 - 16</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(a+<span class="number">0</span>));<span class="comment">//打印的结果是4或8，这里是个指针，不符合sizeof(数组名)这种情况，a+0还是首元素地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(*a));<span class="comment">//打印的结果是4，首元素地址解引用，求的就是首元素的大小，int型的大小是4</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(a+<span class="number">1</span>));<span class="comment">//打印的结果是4或8，结果和a+0是一样的，只不过不是第一个元素地址，而是第二个元素的地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(a[<span class="number">1</span>]));<span class="comment">//打印的结果是4，计算的是第二个元素的大小</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(&amp;a));<span class="comment">//打印的结果是4或8，&amp;a取出的是数组的地址，数组地址的大小就是4或8</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(*&amp;a));<span class="comment">//打印的结果是16，取地址取出来又解引用，按照sizeof(数组名)计算</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(&amp;a+<span class="number">1</span>));<span class="comment">//打印的结果是4或8，数组的地址+1，跳过一个数组，计算的还是一个地址的大小，4或8字节</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(&amp;a[<span class="number">0</span>]));<span class="comment">//4或8，第一个元素的地址的大小</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(&amp;a[<span class="number">0</span>]+<span class="number">1</span>));<span class="comment">//4或8，第二个元素的地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>用<code>&#39; &#39;</code>单引号括起来的字符型数组，最后没有<code>\0</code>，例如下面的数组，只有a,b,c,d,e,f六个元素。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> arr[] = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(arr));<span class="comment">//sizeof(数组名) - 计算的是数组总大小 - 单位是字节 - 大小是6字节</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(arr + <span class="number">0</span>));<span class="comment">//打印的结果是4或8，这里是首元素地址，地址的大小都是4或8字节</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(*arr));<span class="comment">//打印的结果是1，对arr解引用，就是arr首元素大小</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(arr[<span class="number">1</span>]));<span class="comment">//打印的结果是1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(&amp;arr));<span class="comment">//打印的结果是4或8，&amp;arr取出的是数组的地址，数组地址的大小就是4或8</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(&amp;arr+<span class="number">1</span>));<span class="comment">//打印的结果是4或8，数组的地址+1，跳过一个数组，计算的还是一个地址的大小，4或8字节</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(&amp;arr[<span class="number">0</span>]+<span class="number">1</span>));<span class="comment">//第二个元素的地址，地址大小是4或8字节</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>用<code>&#39; &#39;</code>单引号括起来的字符型数组，最后没有<code>\0</code>，例如下面的数组，只有a,b,c,d,e,f六个元素。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> arr[] = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(arr));<span class="comment">//随机值，strlen计数直到遇见一个\0止</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(arr + <span class="number">0</span>));<span class="comment">//随机值，arr+0和arr是一样的，都是计数直到遇见一个\0为止</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(*arr));<span class="comment">//报错，*arr不是地址，strlen()括号内需要地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(arr[<span class="number">1</span>]));<span class="comment">//报错，arr[1]不是地址，strlen()括号内需要地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(&amp;arr));<span class="comment">//随机值，虽然传送地址过去，但arr数组最后一个不是\0</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(&amp;arr+<span class="number">1</span>));<span class="comment">//随机值，跳过arr数组，知道找到下一个\0</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(&amp;arr[<span class="number">0</span>]+<span class="number">1</span>));<span class="comment">//随机值，从第二个开始找\0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>用<code>&quot; &quot;</code>双引号括起来的字符型数组，最后还有一个<code>\0</code>。例如下面的数组，有a,b,c,d,e,f,\0七个元素。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> arr[] = &#123;<span class="string">&quot;abcdef&quot;</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(arr));<span class="comment">//sizeof(数组名) - 计算的是数组所占空间大小 - 单位是字节 - 大小是7字节 - 最后有一个\0</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(arr + <span class="number">0</span>));<span class="comment">//打印的结果是4或8，这里是首元素地址，地址的大小都是4或8字节</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(*arr));<span class="comment">//打印的结果是1，对arr解引用，就是arr首元素大小</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(arr[<span class="number">1</span>]));<span class="comment">//打印的结果是1，第二个元素的大小</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(&amp;arr));<span class="comment">//打印的结果是4或8，&amp;arr取出的是数组的地址，数组地址的大小就是4或8</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(&amp;arr+<span class="number">1</span>));<span class="comment">//打印的结果是4或8，数组的地址+1，跳过一个数组，计算的还是一个地址的大小，4或8字节</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(&amp;arr[<span class="number">0</span>]+<span class="number">1</span>));<span class="comment">//第二个元素的地址，地址大小是4或8字节</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> arr[] = &#123;<span class="string">&quot;abcdef&quot;</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(arr));<span class="comment">//strlen(数组名) - strlen 计算到\0止，数组最后有一个\0,打印的结果是6</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(arr + <span class="number">0</span>));<span class="comment">//首元素地址开始找\0,打印的结果是6，和上面的意思是一样的</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(*arr));<span class="comment">//报错，*arr不是地址，strlen内部需要输入地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(arr[<span class="number">1</span>]));<span class="comment">//报错，arr[1]不是地址，strlen()括号内需要地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(&amp;arr));<span class="comment">//结果是6，strlen找到\0停止计数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(&amp;arr+<span class="number">1</span>));<span class="comment">//随机值，不知道下一个数组的长度。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(&amp;arr[<span class="number">0</span>]+<span class="number">1</span>));<span class="comment">//结果是5，从第二个元素开始计数，6-1 = 5</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>p里面存放常量字符串中a的地址，常量字符串里包含a,b,c,d,e,f,\0。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> *p = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(p));<span class="comment">//打印的结果是4或8，指针相当于地址，就是字符串中a的指针的大小。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(p + <span class="number">1</span>));<span class="comment">//p+1就是字符串中第二个字符的地址，即b的地址，地址的大小就是4或8</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(*p));<span class="comment">//打印的结果是1，*p就是字符串第一个字符</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(p[<span class="number">0</span>]));<span class="comment">//打印的结果是1，就是字符串中第一个字符。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(&amp;p));<span class="comment">//打印的结果是4或8，就是首元素的地址，地址都是4或8</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(&amp;p+<span class="number">1</span>));<span class="comment">//打印的结果是4或8，就是第二个元素的地址，地址都是4或8</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(&amp;p[<span class="number">0</span>]+<span class="number">1</span>));<span class="comment">//先取到了a的地址，再加1，就是b的地址，就是4或8</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> *p = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(p));<span class="comment">//打印的结果是6，p里面存的就是a的地址，即从a找到\0</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(p + <span class="number">1</span>));<span class="comment">//p+1就是字符串中第二个字符的地址，即b的地址，打印的结果就是6-1=5</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(*p));<span class="comment">//报错，*p解引用后不是地址了，strlen内需要地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(p[<span class="number">0</span>]));<span class="comment">//报错，p[0]不是地址，strlen内需要地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(&amp;p));<span class="comment">//随机值，&amp;p是二级指针</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(&amp;p+<span class="number">1</span>));<span class="comment">//随机值，&amp;p是二级指针，二级指针+1是这个二级指针的下一个空间</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(&amp;p[<span class="number">0</span>]+<span class="number">1</span>));<span class="comment">//打印的结果是5，即从b开始数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>二维数组的大小：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">3</span>][<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(a));<span class="comment">//3*4*4=48，sizeof内放数组名，计算数组总大小</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(a[<span class="number">0</span>][<span class="number">0</span>]));<span class="comment">//第一行第一个元素的大小，4字节</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(a[<span class="number">0</span>]));<span class="comment">//计算的是第一行元素大小，四个整型元素，4*4=16</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(a[<span class="number">0</span>] + <span class="number">1</span>));<span class="comment">//计算的是第一行第二个元素的地址，占4或8字节,a[0]是第一行数组名，此时是首元素的地址，就是第一行第一个元素的地址。a[0] + 1就是第一行第二个元素的地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(*(a[<span class="number">0</span>] + <span class="number">1</span>)));<span class="comment">//4，第一行第二个元素（不是地址），整型占4字节</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(a+<span class="number">1</span>));<span class="comment">//占4字节或8字节。a是二维数组的数组名，a是首元素地址，二维数组的首元素是第一行（把二维数组看成1维数组）。加1就是第二行的地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(*(a+<span class="number">1</span>)));<span class="comment">//16字节，对第二行地址解引用，就等价于a[1]。就是第二行的大小。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(&amp;a[<span class="number">0</span>]+<span class="number">1</span>));<span class="comment">//第二行的地址，占4或8字节</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(*(&amp;a[<span class="number">0</span>]+<span class="number">1</span>)));<span class="comment">//16字节，对第二行地址解引用。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(*a));<span class="comment">//16字节，*a是第一行的地址的解引用，4*4</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(a[<span class="number">3</span>]));<span class="comment">//16字节，虽然野指针，第四行元素大小（虽然没有）。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>总结：</p>
<ul>
<li>sizeof(数组名)，这里的数组名表示整个数组，计算的是整个数组的大小。</li>
<li>&amp;数组名，这里的数组名表示的是整个数组，取出的是整个数组的地址。</li>
<li>除此之外，所有的数组名都表示首元素的地址。</li>
</ul>
<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="type">int</span> *ptr = (<span class="type">int</span> *)(&amp;a + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%d\n&quot;</span>,*(a + <span class="number">1</span>),*(ptr - <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是2,5<br><code>&amp;a + 1</code>跳过整个数组，进入下一个数组，<code>(int *)</code>转换成整型指针。<br><code>(ptr - 1)</code>整型指针-1，向前挪动4字节，再解引用，也就是5.</p>
<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> Num;</span><br><span class="line">    <span class="type">char</span> *pcName;</span><br><span class="line">    <span class="type">short</span> sDate;</span><br><span class="line">    <span class="type">char</span> cha[<span class="number">2</span>];</span><br><span class="line">    <span class="type">short</span> sBa[<span class="number">4</span>];</span><br><span class="line">&#125;* p;</span><br><span class="line"></span><br><span class="line"><span class="comment">//假设p的值为0x100000,求下面的值</span></span><br><span class="line"><span class="comment">//已知结构体Test的类型的变量大小是20字节</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,p +<span class="number">0x1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,(<span class="type">unsigned</span> <span class="type">long</span>)p + <span class="number">0x1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,(<span class="type">unsigned</span> <span class="type">int</span>*)p + <span class="number">0x1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>printf(&quot;%p\n&quot;,p +0x1);</code> p+0x1就相当于是p+1，先看p的类型，是结构体指针类型，就是跳过一个结构体，也就是0x100000+20，结果是0x100014<br><code>printf(&quot;%p\n&quot;,(unsigned long)p + 0x1);</code> 就是整型+1，先把0x100000转换成10进制，即1048576+1，再转换成16进制，也就是0x100001。<br><code>printf(&quot;%p\n&quot;,(unsigned int*)p + 0x1);</code>，强转成无符号整型指针，+1跳过一个无符号整型的大小，即4字节，也就是0x100004。<br>指针+-整数，取决于指针类型。</p>
<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    <span class="type">int</span> *ptr1 = (<span class="type">int</span> *)(&amp;a+<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> *ptr2 = (<span class="type">int</span> *)((<span class="type">int</span>)a+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%x%x&quot;</span>,ptr1[<span class="number">-1</span>],*ptr2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ptr1是一个指针，指向a后面的一个地址。也就是4<br><code>((int)a+1)</code>将a的地址强制转换为整数，再加1。最后<code>(int *)</code>再转换为地址。即0x02000000</p>
<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">3</span>][<span class="number">2</span>] = &#123;(<span class="number">0</span>,<span class="number">1</span>),(<span class="number">2</span>,<span class="number">3</span>),(<span class="number">4</span>,<span class="number">5</span>)&#125;;</span><br><span class="line">    <span class="type">int</span> *p;</span><br><span class="line">    p = a[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,p[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>nt a[3][2] = &#123;(0,1),(2,3),(4,5)&#125;;</code>数组内有逗号表达式，<br>即<code>a[0][0] = 1,a[0][1] = 3,a[1][0] =5</code>，后面没有初始化，默认为0<br><code>p = a[0];</code>a[0]是第一行数组名，即a[0][0]的地址存到p中<br>打印的结果是1。</p>
<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> aa[<span class="number">2</span>][<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="type">int</span> *ptr1 = (<span class="type">int</span>*)(&amp;aa+<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> *ptr2 = (<span class="type">int</span>*)(*(aa+<span class="number">1</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%d\n&quot;</span>,*(ptr1<span class="number">-1</span>),*(ptr2<span class="number">-1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于ptr1:<br><code>(&amp;aa+1)</code>相当于是跳过了这个二维数组，也就是10后面的那一个指针，是一个数组指针。<br><code>(int*)</code> 把这个数组指针强转成了整型指针。<br>对于ptr2:<br><code>aa</code>表示二维数组的第一行，+1就进入了第二行。<br>对它进行解引用，拿到了第二行的首元素的地址，即6<br>ptr2就是6的指针。<br>结果就是10，5</p>
<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *a[] = &#123;<span class="string">&quot;work&quot;</span>,<span class="string">&quot;at&quot;</span>,<span class="string">&quot;alibaba&quot;</span>&#125;;</span><br><span class="line">    <span class="type">char</span>**pa = a;</span><br><span class="line">    pa++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,*pa);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>char *p = &quot;abcdef&quot;</code>这种写法是把这个常量字符串的首字母a的地址放到p指针里面去。</p>
<p><code>char *a[] = &#123;&quot;work&quot;,&quot;at&quot;,&quot;alibaba&quot;&#125;;</code> 这句的意思就是把w、a、a（首字母）的地址放到a这个char型数组里。<br><code>char**pa = a;</code>表示把数组a的首元素地址放到pa里。<br><code>pa++</code>也就是第二个元素的首字母地址。<br>打印的结果是at</p>
<hr>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> pulArray[] = &#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> *pulPtr;</span><br><span class="line">    pulPtr = pulArray;</span><br><span class="line">    *(pulPtr + <span class="number">3</span>) += <span class="number">3</span>;   </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%d\n&quot;</span>,*pulPtr,*(pulPtr + <span class="number">3</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>pulPtr = pulArray;</code>就是把pulArray这个数组的首元素地址赋给pulPtr。<br><code>*(pulPtr + 3)</code>就是先把pulPtr的地址+3，也就是从pulArray的首元素往后数三个元素，也就是9这个元素的地址。再解引用，也就是9。最后9+&#x3D;，即12。也就是原先9这个元素的地址变成了12。</p>
<hr>
<h3 id="字符串逆序"><a href="#字符串逆序" class="headerlink" title="字符串逆序"></a>字符串逆序</h3><p>写一个函数，可以逆序一个字符串的内容。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Reverse</span><span class="params">(<span class="type">char</span>* arr,<span class="type">int</span> sz)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = sz<span class="number">-1</span>;</span><br><span class="line">    <span class="type">char</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (left = <span class="number">0</span>;left&lt;sz/<span class="number">2</span>;left++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = arr[left];</span><br><span class="line">        arr[left] = arr[right];</span><br><span class="line">        arr[right] = temp;</span><br><span class="line">        right--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> arr[] = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;j&#x27;</span>&#125;;</span><br><span class="line">    <span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    Reverse(arr,sz);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;sz; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>,arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="计算a-aa-aaa-aaaa-aaaaa的前5项之和，a是数字"><a href="#计算a-aa-aaa-aaaa-aaaaa的前5项之和，a是数字" class="headerlink" title="计算a+aa+aaa+aaaa+aaaaa的前5项之和，a是数字"></a>计算a+aa+aaa+aaaa+aaaaa的前5项之和，a是数字</h3><p>S_n&#x3D;2+22+222+2222+22222，中n&#x3D;5,x&#x3D;2</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Sn = 2 + 22+ 222 + 2222 + 22222\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;上述x = 2,n = 5\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入x和n:-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;n);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">        ret = ret*<span class="number">10</span> + x;</span><br><span class="line">        sum = sum+ ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="求1-100000之间的自幂数"><a href="#求1-100000之间的自幂数" class="headerlink" title="求1-100000之间的自幂数"></a>求1-100000之间的自幂数</h3><p>一个数字有n位数，每一位的n次方之和等于它本身。<br>例如153 &#x3D; 1^3 + 5^3 + 3^3.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i &lt;= <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//先知道是几位数</span></span><br><span class="line">        <span class="type">int</span> n = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> tmp = i;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (tmp /= <span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//计算每一位的n次方之和 sum</span></span><br><span class="line">        tmp = i;</span><br><span class="line">        <span class="keyword">while</span> (tmp) &#123;</span><br><span class="line">            sum = sum + <span class="built_in">pow</span>(tmp % <span class="number">10</span>,n);</span><br><span class="line">            tmp /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//比较</span></span><br><span class="line">        <span class="keyword">if</span> (i == sum) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>求一个数字的次方：<code>pow(数字,次方数)</code></p>
<hr>
<h3 id="打印菱形"><a href="#打印菱形" class="headerlink" title="打印菱形"></a>打印菱形</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">      *</span><br><span class="line">     ***</span><br><span class="line">    *****</span><br><span class="line">   *******</span><br><span class="line">  *********</span><br><span class="line"> ***********</span><br><span class="line">*************</span><br><span class="line"> ***********</span><br><span class="line">  *********</span><br><span class="line">   *******</span><br><span class="line">    *****</span><br><span class="line">     ***</span><br><span class="line">      *</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> line = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;line);<span class="comment">//7</span></span><br><span class="line">    <span class="comment">//打印上部分</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;line; i++) &#123;</span><br><span class="line">        <span class="comment">//打印空格</span></span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j&lt;line-i<span class="number">-1</span>; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//打印星号</span></span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;<span class="number">2</span>*i+<span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印下部分</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;line<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//打印空格</span></span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j&lt;=i; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//打印星号</span></span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;<span class="number">2</span>*(line<span class="number">-1</span>-i)<span class="number">-1</span>; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>输入字母判断星期几</title>
    <url>/posts/7a563932.html</url>
    <content><![CDATA[<p>题目：请输入星期几的第一个字母来判断一下是星期几，如果第一个字母一样，则继续判断第二个字母。<br>程序分析：用情况语句比较好，如果第一个字母一样，则判断用情况语句或if语句判断第二个字母。<br>monday tuesday wednesday thursday friday saturday sunday</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> i;</span><br><span class="line">    <span class="type">char</span> j;</span><br><span class="line">    i = getchar();</span><br><span class="line">    <span class="keyword">switch</span> (i) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;m&#x27;</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Monday&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;t&#x27;</span>:</span><br><span class="line">            <span class="keyword">while</span> (getchar() != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;在输入一个字母:-&gt;&quot;</span>);</span><br><span class="line">            j = getchar();</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="string">&#x27;u&#x27;</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Tuesday&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Thursday&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Wednesday&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;f&#x27;</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Friday&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">            <span class="keyword">while</span> (getchar() != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;在输入一个字母:-&gt;&quot;</span>);</span><br><span class="line">            j = getchar();</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Saturday&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Sunday&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>输入和输出学生数据</title>
    <url>/posts/3cfdc69b.html</url>
    <content><![CDATA[<p>题目：编写input()和output()函数输入和输出学生的数据记录。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>//先定义一个学生结构体</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span> sex[<span class="number">10</span>];</span><br><span class="line">    <span class="type">char</span> Phone[<span class="number">20</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">S</span>[1000];</span><span class="comment">//新建一个结构体数组</span></span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;<span class="comment">//计数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">input</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">S1</span>;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入名字:-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,S1.name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入年龄:-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;S1.age);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入性别:-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,S1.sex);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入电话:-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,S1.Phone);</span><br><span class="line">    S[count] = S1;</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">output</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;name:%s age:%d sex:%s phone:%s\n&quot;</span>,S[i].name,S[i].age,S[i].sex,S[i].Phone);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1.输入数据 2.输出数据 0.退出:-&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;i);</span><br><span class="line">        <span class="keyword">switch</span> (i) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                input();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                output();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>递归输出年龄</title>
    <url>/posts/be527f81.html</url>
    <content><![CDATA[<p>题目：有5个人坐在一起，问第五个人多少岁？他说比第4个人大2岁。<br>问第4个人岁数，他说比第3个人大2岁。<br>问第三个人，又说比第2人大两岁。<br>问第2个人，说比第一个人大两岁。最后问第一个人，他说是10岁。<br>请问第五个人多大？<br>程序分析：利用递归的方法，递归分为回推和递推两个阶段。要想知道第五个人岁数，需知道第四人的岁数，依次类推，推到第一人（10岁），再往回推。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Cal_Age</span><span class="params">(<span class="type">int</span> age,<span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (i==<span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Cal_Age(age+<span class="number">2</span>,++i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> First_Age = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> Fifth_Age = Cal_Age(First_Age,i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Fifth_Age);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>递归反向输出字符</title>
    <url>/posts/8c06528c.html</url>
    <content><![CDATA[<p>题目：利用递归函数调用方式，将所输入的5个字符，以相反顺序打印出来。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="keyword">if</span> (n==<span class="number">1</span>) &#123;</span><br><span class="line">        c = getchar();</span><br><span class="line">        <span class="built_in">putchar</span>(c);</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        c = getchar();</span><br><span class="line">        f(n<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">putchar</span>(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">void</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> n)</span>;</span><br><span class="line">    f(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>输入的数组中最大元素与首元素交换，最小的与末元素交换，并输出</title>
    <url>/posts/76f6f501.html</url>
    <content><![CDATA[<p>题目：输入数组，最大的与第一个元素交换，最小的与最后一个元素交换，输出数组。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Exchange_Biggest</span><span class="params">(<span class="type">int</span>* input)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> Biggest = input[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    <span class="type">int</span> record_Biggest = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(input[i]&gt;Biggest)<span class="comment">//遍历数组，如果比记录到最大的还大，就把Biggest的值换成更大的。</span></span><br><span class="line">        &#123;</span><br><span class="line">            Biggest = input[i];</span><br><span class="line">            record_Biggest = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = input[<span class="number">0</span>];<span class="comment">//把第一个值和最大的交换一下</span></span><br><span class="line">    input[<span class="number">0</span>] = input[record_Biggest];</span><br><span class="line">    input[record_Biggest] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Exchange_Smallest</span><span class="params">(<span class="type">int</span>* input)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> Smallest = input[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    <span class="type">int</span> record_Smallest = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(input[i]&lt;Smallest)</span><br><span class="line">        &#123;</span><br><span class="line">            Smallest = input[i];</span><br><span class="line">            record_Smallest = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = input[<span class="number">9</span>];</span><br><span class="line">    input[<span class="number">9</span>] = input[record_Smallest];</span><br><span class="line">    input[record_Smallest] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> input[<span class="number">10</span>];</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)<span class="comment">//输入数组</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;input[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    Exchange_Biggest(input);<span class="comment">//交换最大的数</span></span><br><span class="line">    Exchange_Smallest(input);<span class="comment">//交换最小的数</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,input[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>初识C语言（一)</title>
    <url>/posts/d87f7e0c.html</url>
    <content><![CDATA[<h3 id="hello-world-include、printf、return"><a href="#hello-world-include、printf、return" class="headerlink" title="hello world-include、printf、return"></a>hello world-include、printf、return</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello world!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p><code>#include &lt;stdio.h&gt;</code>表示包含一个叫stdio.h的文件。<br>stdio就是standard input output的缩写。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>return 0;</code>与<code>int</code>函数呼应，<code>int main()</code>表示要求返回一个整型，而0就是这个整型。</p>
<p><code>printf(&quot;hello world!\n&quot;);</code>表示在屏幕上打印东西，函数printf，就是print function的缩写，是库函数，即C语言本身提供给我们的函数。后面的<code>\n</code>表示换行。</p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch = <span class="string">&#x27;a&#x27;</span>;<span class="comment">//存到内存里</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,ch);<span class="comment">//%c-打印字符型数据</span></span><br><span class="line">    <span class="comment">//int 整型</span></span><br><span class="line">    <span class="type">int</span> age = <span class="number">20</span>;<span class="comment">//定义一个整型数据age</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,age);<span class="comment">//%d-打印整型十进制数据</span></span><br><span class="line">    <span class="comment">//long 长整型</span></span><br><span class="line">    <span class="type">long</span> num = <span class="number">100000000000</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%ld\n&quot;</span>,num);</span><br><span class="line">    <span class="type">float</span> f = <span class="number">5.0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>,f);</span><br><span class="line">    <span class="comment">//返回不同类型的字符占用内存大小。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">short</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">long</span>)); <span class="comment">//返回的字节可能是4或8</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">long</span> <span class="type">long</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">float</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">double</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>char</code>  表示字符数据类型  打印用<code>%c</code></p>
<p><code>short</code> 短整型(short int) ,2字节<br><code>int</code> 整型，4字节<br><code>long</code> 长整型，根据不同规定，8字节或4字节<br><code>long long</code> 更长的整型，8字节<br>打印上面四个用<code>%d</code></p>
<p><code>float</code> 单精度浮点数，4字节<br><code>double</code> 双精度浮点数，8字节<br>打印用<code>%f</code></p>
<p><code>%d</code>打印整型<br><code>%c</code>打印字符<br><code>%f</code>打印浮点数-打小数<br><code>%p</code>以地址的形式打印<br><code>%x</code>打印16进制数字</p>
<p><code>char ch = &#39;a&#39;;</code>表示定义一个字符型数据ch，就是a<br><code>printf(&quot;%c\n&quot;,ch);</code>%c表示打印字符型数据ch</p>
<p><code>printf(&quot;%d\n&quot;,age);</code>%d表示打印整型十进制数据age</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">age</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//年龄</span></span><br><span class="line">    <span class="comment">//20</span></span><br><span class="line">   <span class="type">short</span> age = <span class="number">20</span>; <span class="comment">//向内存申请2个字节，16bit位，用来存放20</span></span><br><span class="line">   <span class="type">float</span> weight = <span class="number">95.6</span>;<span class="comment">//向内存申请4个字节，32bit位，用来存放小数，小数必须用浮点数</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>小数必须用浮点数。</p>
<h3 id="两个数相加-scanf"><a href="#两个数相加-scanf" class="headerlink" title="两个数相加-scanf"></a>两个数相加-scanf</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//计算连个数的和</span></span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//c语言语法规定，变量要定义在当前代码块的最前面</span></span><br><span class="line">    <span class="comment">//输入数据用scanf</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);<span class="comment">//&amp;符号是取地址的意思</span></span><br><span class="line">    sum = a + b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>c语言语法规定，变量要定义在当前代码块的最前面。<br><code>scanf(&quot;%d%d&quot;,&amp;a,&amp;b);</code><br>输入数据用<code>scanf</code>，<code>&amp;</code>符号是取地址的意思。<br>这句话表述输入两个整型变量a和b。</p>
<h3 id="变量、常量、全局变量、局部变量"><a href="#变量、常量、全局变量、局部变量" class="headerlink" title="变量、常量、全局变量、局部变量"></a>变量、常量、全局变量、局部变量</h3><p>不变的量就是常量，变的量就是变量。<br>变量分为局部变量和全局变量，局部变量和全局变量名字建议不要相同，相同局部优先。局部变量只能在大括号内部使用。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> num1 = <span class="number">10</span>;<span class="comment">//num1是全局变量-定义在代码块括号外</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//定义变量的方式</span></span><br><span class="line">    <span class="type">int</span> age = <span class="number">150</span>;</span><br><span class="line">    <span class="type">float</span> weight = <span class="number">99.9</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="string">&#x27;w&#x27;</span>;</span><br><span class="line"><span class="comment">//变量分为局部变量和全局变量</span></span><br><span class="line">    <span class="type">int</span> num2 = <span class="number">20</span>;<span class="comment">//num2是局部变量-定义在代码块括号内</span></span><br><span class="line">    <span class="type">int</span> num1 = <span class="number">30</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,num1);<span class="comment">//局部变量和全局变量名字建议不要相同，相同局部优先。所以打印出30。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>局部变量和全局变量名字建议不要相同，相同局部优先。所以打印出30。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);<span class="comment">//不会打印出10，因为局部变量只能在大括号内部使用</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>结构体</title>
    <url>/posts/b7747429.html</url>
    <content><![CDATA[<p>结构是一些值的集合，这些值称为成员变量。结构的每个成员可以是不同类型的变量。<br>参考：<a href="https://blog.zmyu.cc/posts/9dfc380a.html">初识结构体</a></p>
<span id="more"></span>

<h3 id="结构的声明"><a href="#结构的声明" class="headerlink" title="结构的声明"></a>结构的声明</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tag</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	member-<span class="built_in">list</span>; </span><br><span class="line">&#125;</span><br><span class="line">variable-<span class="built_in">list</span>;</span><br></pre></td></tr></table></figure>
<p>例如描述一个学生，声明一个结构体类型，通过学生类型来创建学生变量：<br>——姓名、电话、性别、年龄</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span></span></span><br><span class="line"><span class="class">&#123;</span>  </span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];  </span><br><span class="line">    <span class="type">char</span> tele[<span class="number">12</span>];  </span><br><span class="line">    <span class="type">char</span> sex[<span class="number">5</span>];  </span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;s4,s5,s6;<span class="comment">//s4,s5,s6和s3一样，都是全局的结构体变量</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> <span class="title">s3</span>;</span><span class="comment">//创建了s3这个结构体的全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>   </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> <span class="title">s1</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> <span class="title">s2</span>;</span><span class="comment">//创建了s1,s2两种结构体变量（局部变量）</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="特殊的声明"><a href="#特殊的声明" class="headerlink" title="特殊的声明"></a>特殊的声明</h4><p>匿名结构体类型</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="type">char</span> b;</span><br><span class="line">	<span class="type">float</span> c;</span><br><span class="line">&#125;x;<span class="comment">//创建匿名结构体类型时，必须在后面写上结构体类型变量，否则之后无法创建</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="type">char</span> b;</span><br><span class="line">	<span class="type">float</span> c;</span><br><span class="line">&#125;a[<span class="number">20</span>],*p;<span class="comment">//*p匿名结构体指针</span></span><br></pre></td></tr></table></figure>
<h3 id="结构体自引用"><a href="#结构体自引用" class="headerlink" title="结构体自引用"></a>结构体自引用</h3><p>自引用方式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="type">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="type">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span> <span class="title">n1</span>;</span></span><br><span class="line">	Node n2;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结构体变量的定义和初始化"><a href="#结构体变量的定义和初始化" class="headerlink" title="结构体变量的定义和初始化"></a>结构体变量的定义和初始化</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="type">int</span> x;</span><br><span class="line">	<span class="type">int</span> y;</span><br><span class="line">&#125;p1;<span class="comment">//声明类型的同时定义变量p1</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> <span class="title">p2</span>;</span><span class="comment">//定义结构体变量p2</span></span><br></pre></td></tr></table></figure>

<p>定义变量同时赋值：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">double</span> d;</span><br><span class="line">    <span class="type">char</span> arr[<span class="number">20</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">S</span> <span class="title">s</span> =</span> &#123;<span class="string">&#x27;c&#x27;</span>,<span class="number">100</span>,<span class="number">3.14</span>,<span class="string">&quot;hello world&quot;</span>&#125;;<span class="comment">//结构体成员初始化</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c,%d,%lf,%s\n&quot;</span>,s.c,s.a,s.d,s.arr);<span class="comment">//结构体成员的访问</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是：c 100 3.140000 hello world</p>
<p>结构体成员的嵌套</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">double</span> weight;</span><br><span class="line">    <span class="type">short</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">T</span> <span class="title">st</span>;</span></span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">double</span> d;</span><br><span class="line">    <span class="type">char</span> arr[<span class="number">50</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">S</span> <span class="title">s</span> =</span> &#123;<span class="string">&#x27;c&#x27;</span>,&#123;<span class="number">55.4</span>,<span class="number">30</span>&#125;,<span class="number">100</span>,<span class="number">3.14</span>,<span class="string">&quot;hello world&quot;</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>,s.st.weight);<span class="comment">//访问嵌套的结构体变量</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是55.400000<br>嵌套的结构体变量就是在大括号里加大括号</p>
<h3 id="结构体内存对齐"><a href="#结构体内存对齐" class="headerlink" title="结构体内存对齐"></a>结构体内存对齐</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> c1;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">char</span> c2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> c1;</span><br><span class="line">    <span class="type">char</span> c2;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">S1</span> <span class="title">s1</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(s1));<span class="comment">//12</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">S2</span> <span class="title">s2</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(s2));<span class="comment">//8</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如何计算结构体大小？<br>——对齐规则<br>1、第一个成员在与结构体变量偏移量为0的地址处<br>2、其他成员变量要对齐到某个数字（对齐数）的整数倍的地址处<br>对齐数 &#x3D; 编译器默认的一个对齐数 与 该成员大小的较小值<br>3、结构体的总大小为最大对齐数（每个成员变量都有一个对齐数）的整数倍<br>4、如果嵌套了结构体的情况，嵌套结构体对齐到自己的最大对齐数的整数倍处，结构体的整体大小就是所有最大对齐数（含嵌套结构体的对齐数）的整数倍</p>
<p>为什么要内存对齐？<br>——性能强，兼容性强</p>
<h3 id="修改默认对齐数"><a href="#修改默认对齐数" class="headerlink" title="修改默认对齐数"></a>修改默认对齐数</h3><p>使用<code>#pragma()</code>指令来修改默认对齐数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> pack(4)<span class="comment">//设置默认对齐数是4</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> c1;<span class="comment">//1</span></span><br><span class="line">    <span class="comment">//7</span></span><br><span class="line">    <span class="type">double</span> d;<span class="comment">//8</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> pack()<span class="comment">//取消设置默认对齐数</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">S</span> <span class="title">s</span>;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(s));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>默认的对齐数是8，<code>#pragma pack(4)</code>修改默认对齐数为4，使原先的结构体s的大小由16变成了12。（中间浪费的字节由8变成了3）</p>
<h3 id="偏移量计算offsetof"><a href="#偏移量计算offsetof" class="headerlink" title="偏移量计算offsetof"></a>偏移量计算offsetof</h3><p><code>size_t offsetof(structName, memberName);</code><br>用于计算偏移量，它不是函数，是一个宏。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">double</span> d;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,offsetof(<span class="keyword">struct</span> S, c));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,offsetof(<span class="keyword">struct</span> S, i));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,offsetof(<span class="keyword">struct</span> S, d));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是0 4 8</p>
<h3 id="结构体传参"><a href="#结构体传参" class="headerlink" title="结构体传参"></a>结构体传参</h3><p>结构体传参，可以传地址，也可以传本身。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="type">double</span> d;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Init</span><span class="params">(<span class="keyword">struct</span> S* ps)</span></span><br><span class="line">&#123;</span><br><span class="line">    ps-&gt;a = <span class="number">100</span>;</span><br><span class="line">    ps-&gt;c = <span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">    ps-&gt;d = <span class="number">3.14</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print1</span><span class="params">(<span class="keyword">struct</span> S tmp)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %c %lf\n&quot;</span>,tmp.a,tmp.c,tmp.d);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="type">void</span> <span class="title function_">print2</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> S* ps)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %c %lf\n&quot;</span>,ps-&gt;a,ps-&gt;c,ps-&gt;d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">S</span> <span class="title">s</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    Init(&amp;s);</span><br><span class="line">    print1(s);<span class="comment">//传值</span></span><br><span class="line">    print2(&amp;s);<span class="comment">//传址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结构体传参，最好传地址，因为传的值有可能过大，系统开销大，通过传地址，可以节约系统开销。</p>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>递归练习</title>
    <url>/posts/87d33715.html</url>
    <content><![CDATA[<h3 id="字符串逆序"><a href="#字符串逆序" class="headerlink" title="字符串逆序"></a>字符串逆序</h3><p>编写一个函数reverse_string(char* string)（递归实现），将参数字符串中的字符反向排列。</p>
<span id="more"></span>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">reverse_string</span><span class="params">(<span class="type">char</span> arr[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> tmp = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(arr);</span><br><span class="line">    arr[<span class="number">0</span>] = arr[len<span class="number">-1</span>];</span><br><span class="line">    arr[len<span class="number">-1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strlen</span>(arr+<span class="number">1</span>) &gt;= <span class="number">2</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        reverse_string(arr+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    arr[len<span class="number">-1</span>] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> arr[] = <span class="string">&quot;abcdefghijklmn&quot;</span>;</span><br><span class="line">    reverse_string(arr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,arr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="计算一个数字的每位之和"><a href="#计算一个数字的每位之和" class="headerlink" title="计算一个数字的每位之和"></a>计算一个数字的每位之和</h3><p>写一个递归函数DigitalSum(n)，输入一个非负整数，返回组成它的数字之和。<br>例如：调用DigitalSum(1234)，则返回1+2+3+4 &#x3D; 10</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">reverse_string</span><span class="params">(<span class="type">int</span> num)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line">    y = y + (num % <span class="number">10</span>);</span><br><span class="line">    num = num / <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span> (num&gt;<span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        reverse_string(num);</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        y = y + num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;计算一个数字每位之和\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一个数字：-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    y = reverse_string(x);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,y);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="递归实现n的k次方"><a href="#递归实现n的k次方" class="headerlink" title="递归实现n的k次方"></a>递归实现n的k次方</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">kCiFang</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = x;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> sum = <span class="number">1</span>;</span><br><span class="line">    sum = sum * a ;</span><br><span class="line">    k--;</span><br><span class="line">    <span class="keyword">if</span> (k&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        kCiFang(x, k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;计算一个数的k次方\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入这个数字：-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入k：-&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line">    y = kCiFang(x,k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,y);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
</search>
