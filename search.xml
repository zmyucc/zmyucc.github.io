<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GitHub学生开发者包申请攻略</title>
    <url>/posts/f8c9fa9d.html</url>
    <content><![CDATA[<h3 id="1、进入申请页面"><a href="#1、进入申请页面" class="headerlink" title="1、进入申请页面"></a>1、进入申请页面</h3><p>进入<a href="https://education.github.com/pack">GitHub Student Developer Pack</a>，点击绿色的Sign up for Student Developer Pack 注册学生开发者包，随后点击Get student benefits进入填写验证材料的页面。</p>
<div class="admonition note"><p>1、如果浏览器需要位置信息权限，则一定要允许。
2、申请时将VPN关闭。</p>
</div>

<span id="more"></span>

<p><img src="/posts/f8c9fa9d/1.jpg" alt="注册步骤"></p>
<h3 id="2、填写验证信息"><a href="#2、填写验证信息" class="headerlink" title="2、填写验证信息"></a>2、填写验证信息</h3><p><img src="/posts/f8c9fa9d/2.png" alt="信息填写页面"></p>
<p>E-mail处最好填写学校的edu邮箱，如果没有也可使用私人邮箱。想要绑定新的校园邮箱，可点击Add an email address并根据提示进行添加。</p>
<p>What is the name of your school：用英文输入学校的全名，并选择弹出的选项。如果下拉选项中没有你的学校，则使用英文输入学校全名并进行下一步。</p>
<p>How do you plan to use GitHub?：用英文输入申请的目的。（例如：I use GitHub for study）</p>
<p>以上内容填写并检查好后点击Continue进行下一步。</p>
<h3 id="3、上传学生身份证明"><a href="#3、上传学生身份证明" class="headerlink" title="3、上传学生身份证明"></a>3、上传学生身份证明</h3><p>准备好学生卡、学生证以及学信网的验证报告。</p>
<p><img src="/posts/f8c9fa9d/3.png" alt="身份证明"></p>
<p>将照片放入Word中整理好并附上英文说明，如上图所示。英文说明可以参考上图，着重写出这些文件的有效期。</p>
<p>如果你不能通过上传的方式验证，那么需要将本页打印出，并通过摄像头拍摄。</p>
<p>本页填写好确认无误后，点击Process my application提交。</p>
<h3 id="4、通过申请"><a href="#4、通过申请" class="headerlink" title="4、通过申请"></a>4、通过申请</h3><p>提交后，可能会立即收到通过邮件，否则会在几天内收到邮件。</p>
<p><img src="/posts/f8c9fa9d/4.png" alt="通过验证"></p>
<p>如果未通过，则确定好填写的信息和证明文件的清晰度，多提交几次，一般就可以通过了。</p>
]]></content>
      <tags>
        <tag>Github</tag>
        <tag>学生优惠</tag>
        <tag>开发者包</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOs下将Hexo部署到Github Pages</title>
    <url>/posts/d37d0038.html</url>
    <content><![CDATA[<p><a href="hexo.io">Hexo</a>是一个快速、简洁且高效的博客框架。得益于Node.js的快速生成速度，几百个网页可在几秒钟内生成。<br>Hexo支持Markdown的所有功能，只需一条指令即可部署成功。</p>
<span id="more"></span>
<h2 id="一、配置本地环境"><a href="#一、配置本地环境" class="headerlink" title="一、配置本地环境"></a>一、配置本地环境</h2><h3 id="1、安装Homebrew"><a href="#1、安装Homebrew" class="headerlink" title="1、安装Homebrew"></a>1、安装<a href="https://brew.sh/">Homebrew</a></h3><p>将下面的命令复制到MacOs终端以安装<a href="https://brew.sh/">Homebrew</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</span><br></pre></td></tr></table></figure>
<h3 id="2、安装git"><a href="#2、安装git" class="headerlink" title="2、安装git"></a>2、安装<a href="https://git-scm.com/">git</a></h3><p>在终端输入下面的命令安装<a href="https://git-scm.com/">git</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure>
<h3 id="3、安装Node-js"><a href="#3、安装Node-js" class="headerlink" title="3、安装Node.js"></a>3、安装<a href="https://nodejs.org/zh-cn/">Node.js</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure>
<h3 id="4、安装Hexo"><a href="#4、安装Hexo" class="headerlink" title="4、安装Hexo"></a>4、安装<a href="https://hexo.io/zh-cn/">Hexo</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<h3 id="5、安装git部署服务"><a href="#5、安装git部署服务" class="headerlink" title="5、安装git部署服务"></a>5、安装git部署服务</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<h3 id="6、使用Hexo创建本地网站"><a href="#6、使用Hexo创建本地网站" class="headerlink" title="6、使用Hexo创建本地网站"></a>6、使用<a href="https://hexo.io/zh-cn/">Hexo</a>创建本地网站</h3><h4 id="（1）新建网站文件夹"><a href="#（1）新建网站文件夹" class="headerlink" title="（1）新建网站文件夹"></a>（1）新建网站文件夹</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir blog</span><br></pre></td></tr></table></figure>
<h4 id="（2）进入网站目录并使用Hexo生成网站"><a href="#（2）进入网站目录并使用Hexo生成网站" class="headerlink" title="（2）进入网站目录并使用Hexo生成网站"></a>（2）进入网站目录并使用Hexo生成网站</h4><p>在终端输入以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd blog</span><br><span class="line">hexo init blog</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>访问 <a href="http://localhost:4000/">http://localhost:4000</a> ，查看到Hexo初始界面，即Hexo本地配置成功。<br>在终端输入control+c退出预览。</p>
<h2 id="二、配置GitHub-Pages"><a href="#二、配置GitHub-Pages" class="headerlink" title="二、配置GitHub Pages"></a>二、配置GitHub Pages</h2><h3 id="1、注册GitHub账户"><a href="#1、注册GitHub账户" class="headerlink" title="1、注册GitHub账户"></a>1、注册GitHub账户</h3><h3 id="2、创建新仓库"><a href="#2、创建新仓库" class="headerlink" title="2、创建新仓库"></a>2、创建新仓库</h3><p>仓库名称为：yourname.github.io(yourname必须为自己的github ID)</p>
<h3 id="3、修改Hexo全局配置文件"><a href="#3、修改Hexo全局配置文件" class="headerlink" title="3、修改Hexo全局配置文件"></a>3、修改Hexo全局配置文件</h3><p>更改网站根目录下_config.yml文件，在文件最后添加以下内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/yourname/yourname.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>将yourname修改为自己的github ID</p>
<h2 id="三、配置SSH-KEY"><a href="#三、配置SSH-KEY" class="headerlink" title="三、配置SSH KEY"></a>三、配置SSH KEY</h2><h3 id="1、生成SSH-KEY"><a href="#1、生成SSH-KEY" class="headerlink" title="1、生成SSH KEY"></a>1、生成SSH KEY</h3><p>打开终端，输入以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;Your Email Address&quot;</span><br></pre></td></tr></table></figure>
<p>提示输入密码和确认密码，如不想设置可以单击回车。</p>
<h3 id="2、将SSH-KEY-添加到GitHub"><a href="#2、将SSH-KEY-添加到GitHub" class="headerlink" title="2、将SSH KEY 添加到GitHub"></a>2、将SSH KEY 添加到GitHub</h3><p>单击访达➡️前往➡️个人➡️.ssh➡️id_rsa.pub，并复制id_rsa.pub的全部内容<br>找不到.ssh文件夹可以点击shift+command+. ，即可显示隐藏的文件夹。<br>打开GitHub主页，点击头像进入setting，点击SSH and GPG keys，在点击New SSH Key。将内容复制进key，tittle内容可以为空。最后点击Add SSH key<br>在终端输入以下命令以测试是否成功：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@GitHub.com</span><br></pre></td></tr></table></figure>
<p>接下来会提示是否继续连接，在终端输入yes。<br>若出现以下提示，即SSH Key 添加成功。</p>
<h2 id="四、将本地内容上传到github"><a href="#四、将本地内容上传到github" class="headerlink" title="四、将本地内容上传到github"></a>四、将本地内容上传到github</h2><p>终端进入网站目录，并输入以下命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Github</tag>
        <tag>Hexo</tag>
        <tag>Github Pages</tag>
        <tag>MacOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac下校验文件的MD5</title>
    <url>/posts/b8295e0f.html</url>
    <content><![CDATA[<p>为了避免文件在传输过程中损坏或被恶意篡改，我们可以校验下载后文件的MD5，与提供的MD5对比。若两者不一致，则该文件损坏或已被修改。</p>
<span id="more"></span>

<p>1、打开终端。</p>
<p>2、在终端内输入以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">md5 [文件路径]</span><br></pre></td></tr></table></figure>

<div class="admonition note"><p>文件路径可通过拖拽文件至终端内获得。</p>
</div>

<p>3、输入回车，等待结果。（若文件较大可能校验时间更久）</p>
<p><img src="/posts/b8295e0f/1.jpg" alt="所校验文件的MD5"></p>
<p>红框内为所校验文件的MD5</p>
]]></content>
      <tags>
        <tag>md5</tag>
        <tag>MacOs</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Netlify免费加速GitHub Pages页面</title>
    <url>/posts/773db5f0.html</url>
    <content><![CDATA[<p>我们在使用Github Pages时会发现其在国内的访问速度非常缓慢，这无疑会影响页面的收录和访客的体验。本文介绍了如何加速Github Pages在国内的速度。</p>
<span id="more"></span>
<p>以下是使用Netlify加速后的访问速度。<br><img src="/posts/773db5f0/1.png" alt="加速后的访问速度"><br>可以看到加速后的页面在国内的访问速度是不错的。</p>
<p>首先，打开<a href="https://www.netlify.com/">Netlify</a>。点击sign up，并使用Github注册。<br><img src="/posts/773db5f0/2.png" alt="注册填写信息"><br>填写好基本的信息，并点击Set up and continue进入下一步。<br><img src="/posts/773db5f0/3.png" alt="点击Import from Git"><br>点击Import from Git从Git库中添加现有项目，进入GitHub授权界面。<br><img src="/posts/773db5f0/4.png" alt="授权界面"><br>在授权界面选择Only select repositories并选中要继续的库，选好后点击install。<br><img src="/posts/773db5f0/5.png" alt="选择库，并选择Branch"><br>接下来选中要使用Netlify的库，并选择Branch。选好后点击Deploy site。<br><img src="/posts/773db5f0/6.png" alt="Netlify管理后台"><br>接下来就进入到了Netlify的后台界面，依次点击Site settings→General→site details→change site name修改网站名称（也可以不修改），例如我的就是zmyu.netlify.app。<br><img src="/posts/773db5f0/7.png" alt="添加自定义域名"><br>进入到以上界面，并点击Add domain alias添加自定义域名，例如我的就是blog.zmyu.cc。<br><img src="/posts/773db5f0/8.png"></p>
<p><img src="/posts/773db5f0/9.png" alt="DNS后台"><br>进入DNS后台，并添加CNAME记录，记录值就是之前修改的域名（或默认的域名），例如我的就是zmyu.netlify.app。<br>设置好之后，等待一段时间后，就可以通过自定义的域名访问网站了。</p>
]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>Github Pages</tag>
        <tag>Netlify</tag>
        <tag>SEO</tag>
      </tags>
  </entry>
  <entry>
    <title>初识C语言（二）</title>
    <url>/posts/9eda039f.html</url>
    <content><![CDATA[<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串，由双引号引起来的一串字符，称为字符串字面值，或者简称字符串。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main() &#123;</span><br><span class="line">    &quot;abcdef&quot;;</span><br><span class="line">    &quot;hello&quot;;</span><br><span class="line">    &quot;&quot;;//空字符串</span><br><span class="line">    //上面三个都是字符串。</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p><code>&quot;&quot;;</code>代表空字符串</p>
<p>字符串的结束标志是一个<code>\0</code>的转义字符。在计算字符串长度的时候<code>\0</code>是结束标志，不算做字符串的内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char arr1[] = &quot;abc&quot;;</span><br><span class="line">    char arr2[] = &#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;&#125;;</span><br><span class="line">    printf(&quot;%d\n&quot;,strlen(arr1));//strlen-string length-用于计算字符串长度</span><br><span class="line">    printf(&quot;%d\n&quot;,strlen(arr2));</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">//输出结果是3和随机值</span><br></pre></td></tr></table></figure>
<p><code>strlen</code>就是string length的缩写，用于计算字符串长度。</p>
<p>arr1这个数列包括的内容就是<code>a</code>,<code>b</code>,<code>c</code>,<code>\0</code>，计算长度时，最后一个不计算，所以是字符串长度就是3。<br>arr2这个数列包括<code>a</code>,<code>b</code>,<code>c</code>，最后不是<code>\0</code>结尾。在计算长度时，一直找到<code>\0</code>为止，长度不确定是多少。</p>
<h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>转义字符-把原来的意思转变了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main() &#123;</span><br><span class="line">    printf(&quot;abc\n&quot;);//把\n的意思转变了，变成了换行。</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>printf(&quot;abc\n&quot;);</code>这里转义字符<code>\n</code>就是把n的意思变成了换行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">    printf(&quot;c:\test\32\test.c&quot;);</span><br><span class="line">    //无法正常打印，因为\t是水平制表符，想要显示一个反斜杠，要输入\\，两个反斜杠</span><br><span class="line">    printf(&quot;c:\\test\\32\\test.c&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的例子看出，想要显示一个反斜杠，需要输入两个反斜杠就可以正常显示。</p>
<h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p>C语言实现循环的方式：while、for、do…while等</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main() &#123;</span><br><span class="line">    int a = 0;</span><br><span class="line">    while(a&lt;20000)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;a=%d\n&quot;,a);</span><br><span class="line">        a = a + 1;</span><br><span class="line">    &#125;</span><br><span class="line">    if (a&gt;=20000) &#123;</span><br><span class="line">        printf(&quot;a&gt;=20000\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>while(a&lt;20000)&#123;……&#125;</code>的意思就是当a小于20000时，一直执行括号里的内容，直到a不再小于20000。</p>
<h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3><p>自定义函数,就是自己设计的函数，可以简化代码，复用代码。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//两数相加</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int Add(int x,int y)&#123;</span><br><span class="line">    int z = x + y;</span><br><span class="line">    return z;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int num1 = 10;</span><br><span class="line">    int num2 = 20;</span><br><span class="line">    int sum1 = 0;</span><br><span class="line">    int sum2 = 0;</span><br><span class="line">    int a = 100;</span><br><span class="line">    int b = 200;</span><br><span class="line">    sum1 = Add(num1,num2);</span><br><span class="line">    sum2 = Add(a,b);</span><br><span class="line">    printf(&quot;sum1 = %d\n&quot;,sum1);</span><br><span class="line">    printf(&quot;sum2 = %d\n&quot;,sum2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="选择语句-if"><a href="#选择语句-if" class="headerlink" title="选择语句 if"></a>选择语句 if</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main() &#123;</span><br><span class="line">    int input = 0;</span><br><span class="line">    printf(&quot;输入1或0:&quot;);</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;input);</span><br><span class="line">    if (input == 1) &#123;</span><br><span class="line">        printf(&quot;输入的数是1\n&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        printf(&quot;输入的数是0\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数据就是一组相同类型元素的集合，数组的下标从0开始，依次递增1。<br><code>int arr[10];</code>   定义一个存放10个整数数字的数组。<br><code>char ch[20];</code>    定义一个存放20个字符的数组。<br><code>float fl[20];</code>   定义一个存放20个浮点数的数组。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main() &#123;</span><br><span class="line">    int arr[10] = &#123;1,2,3,4,5,6,7,8,9,10&#125;;//定义一个数组，最多放10个元素</span><br><span class="line">    int i = 0;</span><br><span class="line">    while (i&lt;10) &#123;</span><br><span class="line">        printf(&quot;%d,&quot;,arr[i]);</span><br><span class="line">        i = i + 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码的功能是打印出arr这个数组的每个元素的内容。</p>
<h3 id="常属性"><a href="#常属性" class="headerlink" title="常属性"></a>常属性</h3><p>const - 常属性，不能再更改数值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main() &#123;</span><br><span class="line">    const int num = 4;</span><br><span class="line">    printf(&quot;%d\n&quot;,num);</span><br><span class="line">    num = 8;//num不会等于8，因为num是常属性。</span><br><span class="line">    printf(&quot;%d\n&quot;,num);</span><br><span class="line">    const int n = 10;//n是变量，但是有常属性，所以我们说n是常变量，本质上是变量，使用常量时，不能用n。</span><br><span class="line">    int arr[10] = &#123;0&#125;;//arr里面不能写n，因为这里要写常量，n是变量。</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>const int n = 10;</code> n是变量，但是有常属性，所以我们说n是常变量，本质上是变量，使用常量时，不能用n。</p>
<h3 id="标识符常量"><a href="#标识符常量" class="headerlink" title="标识符常量"></a>标识符常量</h3><p><code>#define</code>定义 标识符常量，例如<code>#define MAX 10</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#define MAX 10</span><br><span class="line">int define()</span><br><span class="line">&#123;</span><br><span class="line">    int arr[MAX] = &#123;0&#125;;</span><br><span class="line">    printf(&quot;%d\n&quot;,MAX);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="枚举常量"><a href="#枚举常量" class="headerlink" title="枚举常量"></a>枚举常量</h3><p>枚举，一一列举，比如性别，三原色、星期几等。<br>枚举关键字：<code>enum</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enum Sex</span><br><span class="line">&#123;</span><br><span class="line">    MALE,</span><br><span class="line">    FEMALE,</span><br><span class="line">    SECRET</span><br><span class="line">&#125;;</span><br><span class="line">//上面的三个就是枚举常量</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    enum Sex s = FEMALE;</span><br><span class="line">    printf(&quot;%d\n&quot;,MALE);//0</span><br><span class="line">    printf(&quot;%d\n&quot;,FEMALE);//1</span><br><span class="line">    printf(&quot;%d\n&quot;,SECRET);//2</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>原码、反码、补码</title>
    <url>/posts/fb35e44.html</url>
    <content><![CDATA[<p>只要是整数，在内存中存储的都是二进制的补码。<br>正数——原码、反码、补码都相同。</p>
<span id="more"></span>

<p>对于负数：<br>例如-2，的计算过程。</p>
<table>
<thead>
<tr>
<th>原码</th>
<th>–&gt;反码</th>
<th>–&gt;补码</th>
</tr>
</thead>
<tbody><tr>
<td>直接按照正负，写出二进制序列</td>
<td>原码符号位不变，其他位按位取反</td>
<td>反码+1</td>
</tr>
<tr>
<td>10000000 00000000 00000000 00000010</td>
<td>11111111 11111111 11111111 11111101</td>
<td>11111111 11111111 11111111 11111110</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>初识C语言（一)</title>
    <url>/posts/d87f7e0c.html</url>
    <content><![CDATA[<h3 id="hello-world-include、printf、return"><a href="#hello-world-include、printf、return" class="headerlink" title="hello world-include、printf、return"></a>hello world-include、printf、return</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello world!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p><code>#include &lt;stdio.h&gt;</code>表示包含一个叫stdio.h的文件。<br>stdio就是standard input output的缩写。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>return 0;</code>与<code>int</code>函数呼应，<code>int main()</code>表示要求返回一个整型，而0就是这个整型。</p>
<p><code>printf(&quot;hello world!\n&quot;);</code>表示在屏幕上打印东西，函数printf，就是print function的缩写，是库函数，即C语言本身提供给我们的函数。后面的<code>\n</code>表示换行。</p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char ch = &#x27;a&#x27;;//存到内存里</span><br><span class="line">    printf(&quot;%c\n&quot;,ch);//%c-打印字符型数据</span><br><span class="line">    //int 整型</span><br><span class="line">    int age = 20;//定义一个整型数据age</span><br><span class="line">    printf(&quot;%d\n&quot;,age);//%d-打印整型十进制数据</span><br><span class="line">    //long 长整型</span><br><span class="line">    long num = 100000000000;</span><br><span class="line">    printf(&quot;%ld\n&quot;,num);</span><br><span class="line">    float f = 5.0;</span><br><span class="line">    printf(&quot;%f\n&quot;,f);</span><br><span class="line">    //返回不同类型的字符占用内存大小。</span><br><span class="line">    printf(&quot;%d\n&quot;,sizeof(char));</span><br><span class="line">    printf(&quot;%d\n&quot;,sizeof(short));</span><br><span class="line">    printf(&quot;%d\n&quot;,sizeof(int));</span><br><span class="line">    printf(&quot;%d\n&quot;,sizeof(long)); //返回的字节可能是4或8</span><br><span class="line">    printf(&quot;%d\n&quot;,sizeof(long long));</span><br><span class="line">    printf(&quot;%d\n&quot;,sizeof(float));</span><br><span class="line">    printf(&quot;%d\n&quot;,sizeof(double));</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>char</code>  表示字符数据类型  打印用<code>%c</code></p>
<p><code>short</code> 短整型(short int) ,2字节<br><code>int</code> 整型，4字节<br><code>long</code> 长整型，根据不同规定，8字节或4字节<br><code>long long</code> 更长的整型，8字节<br>打印上面四个用<code>%d</code></p>
<p><code>float</code> 单精度浮点数，4字节<br><code>double</code> 双精度浮点数，8字节<br>打印用<code>%f</code></p>
<p><code>%d</code>打印整型<br><code>%c</code>打印字符<br><code>%f</code>打印浮点数-打小数<br><code>%p</code>以地址的形式打印<br><code>%x</code>打印16进制数字</p>
<p><code>char ch = &#39;a&#39;;</code>表示定义一个字符型数据ch，就是a<br><code>printf(&quot;%c\n&quot;,ch);</code>%c表示打印字符型数据ch</p>
<p><code>printf(&quot;%d\n&quot;,age);</code>%d表示打印整型十进制数据age</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int age()</span><br><span class="line">&#123;</span><br><span class="line">    //年龄</span><br><span class="line">    //20</span><br><span class="line">   short age = 20; //向内存申请2个字节，16bit位，用来存放20</span><br><span class="line">   float weight = 95.6;//向内存申请4个字节，32bit位，用来存放小数，小数必须用浮点数</span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>小数必须用浮点数。</p>
<h3 id="两个数相加-scanf"><a href="#两个数相加-scanf" class="headerlink" title="两个数相加-scanf"></a>两个数相加-scanf</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main() &#123;</span><br><span class="line">    //计算连个数的和</span><br><span class="line">    int a = 0;</span><br><span class="line">    int b = 0;</span><br><span class="line">    int sum = 0;</span><br><span class="line">    //c语言语法规定，变量要定义在当前代码块的最前面</span><br><span class="line">    //输入数据用scanf</span><br><span class="line">    scanf(&quot;%d%d&quot;,&amp;a,&amp;b);//&amp;符号是取地址的意思</span><br><span class="line">    sum = a + b;</span><br><span class="line">    printf(&quot;%d\n&quot;,sum);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>c语言语法规定，变量要定义在当前代码块的最前面。<br><code>scanf(&quot;%d%d&quot;,&amp;a,&amp;b);</code><br>输入数据用<code>scanf</code>，<code>&amp;</code>符号是取地址的意思。<br>这句话表述输入两个整型变量a和b。</p>
<h3 id="变量、常量、全局变量、局部变量"><a href="#变量、常量、全局变量、局部变量" class="headerlink" title="变量、常量、全局变量、局部变量"></a>变量、常量、全局变量、局部变量</h3><p>不变的量就是常量，变的量就是变量。<br>变量分为局部变量和全局变量，局部变量和全局变量名字建议不要相同，相同局部优先。局部变量只能在大括号内部使用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int num1 = 10;//num1是全局变量-定义在代码块括号外</span><br><span class="line">int main() &#123;</span><br><span class="line">//定义变量的方式</span><br><span class="line">    int age = 150;</span><br><span class="line">    float weight = 99.9;</span><br><span class="line">    char ch = &#x27;w&#x27;;</span><br><span class="line">//变量分为局部变量和全局变量</span><br><span class="line">    int num2 = 20;//num2是局部变量-定义在代码块括号内</span><br><span class="line">    int num1 = 30;</span><br><span class="line">    printf(&quot;%d\n&quot;,num1);//局部变量和全局变量名字建议不要相同，相同局部优先。所以打印出30。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>局部变量和全局变量名字建议不要相同，相同局部优先。所以打印出30。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        int a = 10;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d\n&quot;,a);//不会打印出10，因为局部变量只能在大括号内部使用</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>初识C语言（三）</title>
    <url>/posts/d3c4a0cd.html</url>
    <content><![CDATA[<h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><h4 id="操作符之sizeof"><a href="#操作符之sizeof" class="headerlink" title="操作符之sizeof"></a>操作符之sizeof</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(a));<span class="comment">//整型变量占内存4个字节</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span> a);<span class="comment">//和上面的结果是一样的。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">int</span>));<span class="comment">//整型变量占内存4个字节</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(arr));<span class="comment">//计算数组的大小，单位是字节，4*6=24</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]));<span class="comment">//想要知道数组元素个数，可以把数组占用字节大小/数组每个元素占的字节</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>sizeof(arr)/sizeof(arr[0])</code>想要知道数组元素个数，可以把数组占用字节大小&#x2F;数组每个元素占的字节。</p>
<h4 id="操作符之前置后置-、–"><a href="#操作符之前置后置-、–" class="headerlink" title="操作符之前置后置++、–"></a>操作符之前置后置++、–</h4><h5 id="后置"><a href="#后置" class="headerlink" title="后置++"></a>后置++</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = a++;<span class="comment">//后置++，先使用a的值，然后a再自增</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d , b = %d&quot;</span>,a,b);<span class="comment">//a = 11 , b = 10</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>后置++，先使用a的值，然后a再自增。</p>
<h5 id="前置"><a href="#前置" class="headerlink" title="前置++"></a>前置++</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = ++a;<span class="comment">//前置++，先++，再使用，即a先自增，变成11，再把a的值赋给b</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d , b = %d&quot;</span>,a,b);<span class="comment">//a = 11 , b = 11</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>前置++，先++，再使用，即a先自增，变成11，再把a的值赋给b。</p>
<h5 id="后置–"><a href="#后置–" class="headerlink" title="后置–"></a>后置–</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = a--;<span class="comment">//后置--，先使用a的值，然后a再自减</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d , b = %d&quot;</span>,a,b);<span class="comment">//a = 9 , b = 10</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>后置–，先使用a的值，然后a再自减</p>
<h5 id="前置–"><a href="#前置–" class="headerlink" title="前置–"></a>前置–</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = --a;<span class="comment">//前置--，a先--，再使用</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d , b = %d&quot;</span>,a,b);<span class="comment">//a = 9 , b = 9</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>前置–，a先–，再使用</p>
<h4 id="操作符之按位取反～"><a href="#操作符之按位取反～" class="headerlink" title="操作符之按位取反～"></a>操作符之按位取反～</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//4个字节，32个比特位</span></span><br><span class="line">    <span class="comment">//0的二进制序列:00000000 00000000 00000000 00000000</span></span><br><span class="line">    <span class="type">int</span> b = ~a;<span class="comment">//b是有符号的整型，最高位表示的是符号位</span></span><br><span class="line">    <span class="comment">//取反后的二进制序列:1（符号位，1代表负数）1111111 11111111 11111111 11111111</span></span><br><span class="line">    <span class="comment">//~是按位取反的意思，位是二进制位。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,b);<span class="comment">//使用时，打印的是二进制的原码</span></span><br><span class="line">    <span class="comment">//打印的结果是-1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>原码、反码、补码：负数在内存中存储的时候，存储的是二进制的补码</p>
<h4 id="操作符之-类型-强制类型转换"><a href="#操作符之-类型-强制类型转换" class="headerlink" title="操作符之(类型)强制类型转换"></a>操作符之(类型)强制类型转换</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = (<span class="type">int</span>)<span class="number">3.14</span>;<span class="comment">//原先3.14是double类型，想转换成int型</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>原先3.14是double类型，想转换成int型，打印的结果是3。<br>不建议在代码中使用</p>
<h4 id="算数操作符"><a href="#算数操作符" class="headerlink" title="算数操作符"></a>算数操作符</h4><p>算数操作符包括+、-、*、&#x2F;、%(求余数)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">5</span>/<span class="number">2</span>;<span class="comment">//结果是2。</span></span><br><span class="line">    <span class="type">int</span> b = <span class="number">5</span>%<span class="number">2</span>;<span class="comment">//结果是1。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="移位操作符"><a href="#移位操作符" class="headerlink" title="移位操作符"></a>移位操作符</h4><p>移位操作符（移的是2进制位）  &gt;&gt;右移操作符、&lt;&lt;左移操作符</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//整型a占4个字节，32位，十进制是1，用2进制表示也就是 00000000 00000000 00000000 00000001</span></span><br><span class="line">    <span class="type">int</span> b = a&lt;&lt;<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//整型b是整型a左移1个字节的结果，也就是00000000 00000000 00000000 00000010，用十进制表示就是2</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);<span class="comment">//对a进行左移操作，a本身不变化。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="位操作符"><a href="#位操作符" class="headerlink" title="位操作符"></a>位操作符</h4><p>位操作符，操作的是2进制位。 &amp;（按位与） ^（按位异或） |（按位或）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">3</span>;<span class="comment">//a的二进制 0011</span></span><br><span class="line">    <span class="type">int</span> b = <span class="number">5</span>;<span class="comment">//b的二进制 0101</span></span><br><span class="line">    <span class="type">int</span> c = a&amp;b;</span><br><span class="line">    <span class="comment">//a和b按位与就是 0001，按位与也就是并且的意思，只有两个都是1，结果才是1，其余都是0。</span></span><br><span class="line">    <span class="type">int</span> d = a|b;</span><br><span class="line">    <span class="comment">//a和b按位或就是 0111,按位或就是有一个1结果就是1。</span></span><br><span class="line">    <span class="type">int</span> e = a^b;</span><br><span class="line">    <span class="comment">//a和b按位异或就是0110,按位异或就是：有1则1，全1则0。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,d);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,e);    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="赋值和判断"><a href="#赋值和判断" class="headerlink" title="赋值和判断"></a>赋值和判断</h4><p>赋值和判断：一个等号是赋值，两个等号是判断相等。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    a = <span class="number">20</span>;<span class="comment">//赋值，两个==是判断相等</span></span><br><span class="line">    a = a + <span class="number">10</span>;<span class="comment">//也是赋值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="单目操作符、双目操作符、三目操作符"><a href="#单目操作符、双目操作符、三目操作符" class="headerlink" title="单目操作符、双目操作符、三目操作符"></a>单目操作符、双目操作符、三目操作符</h4><p>&gt;<br>&gt;&#x3D;<br>&lt;<br>&lt;&#x3D;<br> !&#x3D; 用于测试不相等<br> &#x3D;&#x3D; 用于测试 相等</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> c = a + b;<span class="comment">//加号就是操作符，是双目操作符，就是左右有两个操作数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="逻辑与操作符-amp-amp"><a href="#逻辑与操作符-amp-amp" class="headerlink" title="逻辑与操作符&amp;&amp;"></a>逻辑与操作符&amp;&amp;</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> c = a &amp;&amp; b;<span class="comment">//a和b都不是0，所以都是真</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,c);<span class="comment">//a和b逻辑与的结果是1，因为逻辑与-全真则真，有假全假</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>a和b逻辑与的结果是1，因为逻辑与-全真则真，有假全假</p>
<h4 id="逻辑或操作符"><a href="#逻辑或操作符" class="headerlink" title="逻辑或操作符||"></a>逻辑或操作符||</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> c = a || b;<span class="comment">//a是假，b是真</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,c);<span class="comment">//逻辑或操作符，有一个是真，结果就是真</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>逻辑或操作符，有一个是真，结果就是真</p>
<h4 id="条件操作符（三目操作符）"><a href="#条件操作符（三目操作符）" class="headerlink" title="条件操作符（三目操作符）"></a>条件操作符（三目操作符）</h4><p><code>exp1 ? exp2 : exp3;</code><br>exp代表表达式，上式的意思是，如果exp1的结果为真，exp2位最终结果，如果exp1的结果为假，exp3为最终结果</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> max;</span><br><span class="line"><span class="comment">//    if (a&gt;b)</span></span><br><span class="line"><span class="comment">//        max = a;</span></span><br><span class="line"><span class="comment">//    else</span></span><br><span class="line"><span class="comment">//        max = b;</span></span><br><span class="line">    max = ( a &gt; b ? a : b );<span class="comment">//这个表达式和上面的if是一样的</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,max);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="常用关键字"><a href="#常用关键字" class="headerlink" title="常用关键字"></a>常用关键字</h3><h4 id="break"><a href="#break" class="headerlink" title="break"></a>break</h4><p>break-用于停止循环</p>
<h4 id="typedef-类型定义-类型重新定义"><a href="#typedef-类型定义-类型重新定义" class="headerlink" title="typedef-类型定义-类型重新定义"></a>typedef-类型定义-类型重新定义</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> num1 = <span class="number">20</span>;<span class="comment">//定义一个无符号呢整型num1</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">int</span> u_int;<span class="comment">//把unsigned int重定义成了u_int，就是别名</span></span><br><span class="line">    u_int num2 = <span class="number">20</span>;<span class="comment">//num1和num2两个变量的类型是一样的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>typedef unsigned int u_int;</code>把<code>unsigned int</code>重定义成了<code>u_int</code></p>
<h4 id="auto"><a href="#auto" class="headerlink" title="auto"></a>auto</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;<span class="comment">//局部变量-自动变量-在前面省略掉了auto</span></span><br><span class="line">    <span class="comment">//例如 auto int a = 10;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="static-函数"><a href="#static-函数" class="headerlink" title="static 函数"></a>static 函数</h4><p>static修饰函数,改变了函数的链接属性，普通函数有外部链接属性，被修饰后就没有了。</p>
<p>static修饰全局变量，改变了变量的作用域-让静态的全局变量只能在自己所在的文件内部使用，出了源文件就无法使用了。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>,a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;<span class="number">5</span>) &#123;</span><br><span class="line">        test();</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>a是静态的局部变量，被static修饰，局部变量的生命周期延长了。<br>输出的结果是：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">a = <span class="number">2</span></span><br><span class="line">a = <span class="number">3</span></span><br><span class="line">a = <span class="number">4</span></span><br><span class="line">a = <span class="number">5</span></span><br><span class="line">a = <span class="number">6</span></span><br></pre></td></tr></table></figure>
<p>相当于<code>static int a = 1;</code>只运行了一次？</p>
<h4 id="extern-用于声明外部符号"><a href="#extern-用于声明外部符号" class="headerlink" title="extern - 用于声明外部符号"></a>extern - 用于声明外部符号</h4><p>main.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">extern</span> <span class="type">int</span> g_val;<span class="comment">//声明外部符号</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;g_val = %d\n&quot;</span>,g_val);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>extern.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> g_val = <span class="number">100</span>;<span class="comment">//全局变量</span></span><br></pre></td></tr></table></figure>
<p>打印的结果是 <code>g_val = 100</code></p>
<p>extern声明外部函数<br>main.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> sum = Add(a,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sum = %d\n&quot;</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Add.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> z = x + y;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印的结果是<code>sum = 30</code></p>
<h3 id="define定义常量和宏"><a href="#define定义常量和宏" class="headerlink" title="define定义常量和宏"></a>define定义常量和宏</h3><p>define定义标识符常量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 1000</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//  int a = 100;</span></span><br><span class="line">    <span class="type">int</span> a = MAX;<span class="comment">//和上面的效果一样</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>define定义宏</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//宏的定义</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(X,Y) (X&gt;Y?X:Y)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> max = MAX(a,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;max = %d\n&quot;</span>,max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>指针变量的大小：在32位平台占4个字节，在64位平台占8个字节。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span>* p = &amp;a;<span class="comment">//取出a的地址</span></span><br><span class="line">    <span class="comment">//有一种变量是用来存放地址的，就是指针变量，类型是int*</span></span><br><span class="line">    *p = <span class="number">20</span>;<span class="comment">//*-解引用操作符，通过*p把a里面的值改成20</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,&amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,p);<span class="comment">//和a的地址一样</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有一种变量是用来存放地址的，就是指针变量。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch = <span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">    <span class="type">char</span>* pc = &amp;ch;</span><br><span class="line">    *pc = <span class="string">&#x27;a&#x27;</span>;<span class="comment">//通过*pc把ch里面的值改成a</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,ch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
</search>
