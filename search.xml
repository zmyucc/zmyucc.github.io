<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GitHub学生开发者包申请攻略</title>
    <url>/posts/f8c9fa9d.html</url>
    <content><![CDATA[<h3 id="1、进入申请页面"><a href="#1、进入申请页面" class="headerlink" title="1、进入申请页面"></a>1、进入申请页面</h3><p>进入<a href="https://education.github.com/pack">GitHub Student Developer Pack</a>，点击绿色的Sign up for Student Developer Pack 注册学生开发者包，随后点击Get student benefits进入填写验证材料的页面。</p>
<div class="admonition note"><p>1、如果浏览器需要位置信息权限，则一定要允许。
2、申请时将VPN关闭。</p>
</div>

<span id="more"></span>

<p><img src="/posts/f8c9fa9d/1.jpg" alt="注册步骤"></p>
<h3 id="2、填写验证信息"><a href="#2、填写验证信息" class="headerlink" title="2、填写验证信息"></a>2、填写验证信息</h3><p><img src="/posts/f8c9fa9d/2.png" alt="信息填写页面"></p>
<p>E-mail处最好填写学校的edu邮箱，如果没有也可使用私人邮箱。想要绑定新的校园邮箱，可点击Add an email address并根据提示进行添加。</p>
<p>What is the name of your school：用英文输入学校的全名，并选择弹出的选项。如果下拉选项中没有你的学校，则使用英文输入学校全名并进行下一步。</p>
<p>How do you plan to use GitHub?：用英文输入申请的目的。（例如：I use GitHub for study）</p>
<p>以上内容填写并检查好后点击Continue进行下一步。</p>
<h3 id="3、上传学生身份证明"><a href="#3、上传学生身份证明" class="headerlink" title="3、上传学生身份证明"></a>3、上传学生身份证明</h3><p>准备好学生卡、学生证以及学信网的验证报告。</p>
<p><img src="/posts/f8c9fa9d/3.png" alt="身份证明"></p>
<p>将照片放入Word中整理好并附上英文说明，如上图所示。英文说明可以参考上图，着重写出这些文件的有效期。</p>
<p>如果你不能通过上传的方式验证，那么需要将本页打印出，并通过摄像头拍摄。</p>
<p>本页填写好确认无误后，点击Process my application提交。</p>
<h3 id="4、通过申请"><a href="#4、通过申请" class="headerlink" title="4、通过申请"></a>4、通过申请</h3><p>提交后，可能会立即收到通过邮件，否则会在几天内收到邮件。</p>
<p><img src="/posts/f8c9fa9d/4.png" alt="通过验证"></p>
<p>如果未通过，则确定好填写的信息和证明文件的清晰度，多提交几次，一般就可以通过了。</p>
]]></content>
      <tags>
        <tag>Github</tag>
        <tag>学生优惠</tag>
        <tag>开发者包</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOs下将Hexo部署到Github Pages</title>
    <url>/posts/d37d0038.html</url>
    <content><![CDATA[<p><a href="hexo.io">Hexo</a>是一个快速、简洁且高效的博客框架。得益于Node.js的快速生成速度，几百个网页可在几秒钟内生成。<br>Hexo支持Markdown的所有功能，只需一条指令即可部署成功。</p>
<span id="more"></span>
<h2 id="一、配置本地环境"><a href="#一、配置本地环境" class="headerlink" title="一、配置本地环境"></a>一、配置本地环境</h2><h3 id="1、安装Homebrew"><a href="#1、安装Homebrew" class="headerlink" title="1、安装Homebrew"></a>1、安装<a href="https://brew.sh/">Homebrew</a></h3><p>将下面的命令复制到MacOs终端以安装<a href="https://brew.sh/">Homebrew</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</span><br></pre></td></tr></table></figure>
<h3 id="2、安装git"><a href="#2、安装git" class="headerlink" title="2、安装git"></a>2、安装<a href="https://git-scm.com/">git</a></h3><p>在终端输入下面的命令安装<a href="https://git-scm.com/">git</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure>
<h3 id="3、安装Node-js"><a href="#3、安装Node-js" class="headerlink" title="3、安装Node.js"></a>3、安装<a href="https://nodejs.org/zh-cn/">Node.js</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure>
<h3 id="4、安装Hexo"><a href="#4、安装Hexo" class="headerlink" title="4、安装Hexo"></a>4、安装<a href="https://hexo.io/zh-cn/">Hexo</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<h3 id="5、安装git部署服务"><a href="#5、安装git部署服务" class="headerlink" title="5、安装git部署服务"></a>5、安装git部署服务</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<h3 id="6、使用Hexo创建本地网站"><a href="#6、使用Hexo创建本地网站" class="headerlink" title="6、使用Hexo创建本地网站"></a>6、使用<a href="https://hexo.io/zh-cn/">Hexo</a>创建本地网站</h3><h4 id="（1）新建网站文件夹"><a href="#（1）新建网站文件夹" class="headerlink" title="（1）新建网站文件夹"></a>（1）新建网站文件夹</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir blog</span><br></pre></td></tr></table></figure>
<h4 id="（2）进入网站目录并使用Hexo生成网站"><a href="#（2）进入网站目录并使用Hexo生成网站" class="headerlink" title="（2）进入网站目录并使用Hexo生成网站"></a>（2）进入网站目录并使用Hexo生成网站</h4><p>在终端输入以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd blog</span><br><span class="line">hexo init blog</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>访问 <a href="http://localhost:4000/">http://localhost:4000</a> ，查看到Hexo初始界面，即Hexo本地配置成功。<br>在终端输入control+c退出预览。</p>
<h2 id="二、配置GitHub-Pages"><a href="#二、配置GitHub-Pages" class="headerlink" title="二、配置GitHub Pages"></a>二、配置GitHub Pages</h2><h3 id="1、注册GitHub账户"><a href="#1、注册GitHub账户" class="headerlink" title="1、注册GitHub账户"></a>1、注册GitHub账户</h3><h3 id="2、创建新仓库"><a href="#2、创建新仓库" class="headerlink" title="2、创建新仓库"></a>2、创建新仓库</h3><p>仓库名称为：yourname.github.io(yourname必须为自己的github ID)</p>
<h3 id="3、修改Hexo全局配置文件"><a href="#3、修改Hexo全局配置文件" class="headerlink" title="3、修改Hexo全局配置文件"></a>3、修改Hexo全局配置文件</h3><p>更改网站根目录下_config.yml文件，在文件最后添加以下内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/yourname/yourname.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>将yourname修改为自己的github ID</p>
<h2 id="三、配置SSH-KEY"><a href="#三、配置SSH-KEY" class="headerlink" title="三、配置SSH KEY"></a>三、配置SSH KEY</h2><h3 id="1、生成SSH-KEY"><a href="#1、生成SSH-KEY" class="headerlink" title="1、生成SSH KEY"></a>1、生成SSH KEY</h3><p>打开终端，输入以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;Your Email Address&quot;</span><br></pre></td></tr></table></figure>
<p>提示输入密码和确认密码，如不想设置可以单击回车。</p>
<h3 id="2、将SSH-KEY-添加到GitHub"><a href="#2、将SSH-KEY-添加到GitHub" class="headerlink" title="2、将SSH KEY 添加到GitHub"></a>2、将SSH KEY 添加到GitHub</h3><p>单击访达➡️前往➡️个人➡️.ssh➡️id_rsa.pub，并复制id_rsa.pub的全部内容<br>找不到.ssh文件夹可以点击shift+command+. ，即可显示隐藏的文件夹。<br>打开GitHub主页，点击头像进入setting，点击SSH and GPG keys，在点击New SSH Key。将内容复制进key，tittle内容可以为空。最后点击Add SSH key<br>在终端输入以下命令以测试是否成功：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@GitHub.com</span><br></pre></td></tr></table></figure>
<p>接下来会提示是否继续连接，在终端输入yes。<br>若出现以下提示，即SSH Key 添加成功。</p>
<h2 id="四、将本地内容上传到github"><a href="#四、将本地内容上传到github" class="headerlink" title="四、将本地内容上传到github"></a>四、将本地内容上传到github</h2><p>终端进入网站目录，并输入以下命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Github</tag>
        <tag>Hexo</tag>
        <tag>Github Pages</tag>
        <tag>MacOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac下校验文件的MD5</title>
    <url>/posts/b8295e0f.html</url>
    <content><![CDATA[<p>为了避免文件在传输过程中损坏或被恶意篡改，我们可以校验下载后文件的MD5，与提供的MD5对比。若两者不一致，则该文件损坏或已被修改。</p>
<span id="more"></span>

<p>1、打开终端。</p>
<p>2、在终端内输入以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">md5 [文件路径]</span><br></pre></td></tr></table></figure>

<div class="admonition note"><p>文件路径可通过拖拽文件至终端内获得。</p>
</div>

<p>3、输入回车，等待结果。（若文件较大可能校验时间更久）</p>
<p><img src="/posts/b8295e0f/1.jpg" alt="所校验文件的MD5"></p>
<p>红框内为所校验文件的MD5</p>
]]></content>
      <tags>
        <tag>md5</tag>
        <tag>MacOs</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Netlify免费加速GitHub Pages页面</title>
    <url>/posts/773db5f0.html</url>
    <content><![CDATA[<p>我们在使用Github Pages时会发现其在国内的访问速度非常缓慢，这无疑会影响页面的收录和访客的体验。本文介绍了如何加速Github Pages在国内的速度。</p>
<span id="more"></span>
<p>以下是使用Netlify加速后的访问速度。<br><img src="/posts/773db5f0/1.png" alt="加速后的访问速度"><br>可以看到加速后的页面在国内的访问速度是不错的。</p>
<p>首先，打开<a href="https://www.netlify.com/">Netlify</a>。点击sign up，并使用Github注册。<br><img src="/posts/773db5f0/2.png" alt="注册填写信息"><br>填写好基本的信息，并点击Set up and continue进入下一步。<br><img src="/posts/773db5f0/3.png" alt="点击Import from Git"><br>点击Import from Git从Git库中添加现有项目，进入GitHub授权界面。<br><img src="/posts/773db5f0/4.png" alt="授权界面"><br>在授权界面选择Only select repositories并选中要继续的库，选好后点击install。<br><img src="/posts/773db5f0/5.png" alt="选择库，并选择Branch"><br>接下来选中要使用Netlify的库，并选择Branch。选好后点击Deploy site。<br><img src="/posts/773db5f0/6.png" alt="Netlify管理后台"><br>接下来就进入到了Netlify的后台界面，依次点击Site settings→General→site details→change site name修改网站名称（也可以不修改），例如我的就是zmyu.netlify.app。<br><img src="/posts/773db5f0/7.png" alt="添加自定义域名"><br>进入到以上界面，并点击Add domain alias添加自定义域名，例如我的就是blog.zmyu.cc。<br><img src="/posts/773db5f0/8.png"></p>
<p><img src="/posts/773db5f0/9.png" alt="DNS后台"><br>进入DNS后台，并添加CNAME记录，记录值就是之前修改的域名（或默认的域名），例如我的就是zmyu.netlify.app。<br>设置好之后，等待一段时间后，就可以通过自定义的域名访问网站了。</p>
]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>Github Pages</tag>
        <tag>Netlify</tag>
        <tag>SEO</tag>
      </tags>
  </entry>
  <entry>
    <title>初识C语言（一)</title>
    <url>/posts/d87f7e0c.html</url>
    <content><![CDATA[<h3 id="hello-world-include、printf、return"><a href="#hello-world-include、printf、return" class="headerlink" title="hello world-include、printf、return"></a>hello world-include、printf、return</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;hello world!\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p><code>#include &lt;stdio.h&gt;</code>表示包含一个叫stdio.h的文件。<br>stdio就是standard input output的缩写。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>return 0;</code>与<code>int</code>函数呼应，<code>int main()</code>表示要求返回一个整型，而0就是这个整型。</p>
<p><code>printf(&quot;hello world!\n&quot;);</code>表示在屏幕上打印东西，函数printf，就是print function的缩写，是库函数，即C语言本身提供给我们的函数。后面的<code>\n</code>表示换行。</p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char ch = &#x27;a&#x27;;//存到内存里</span><br><span class="line">    printf(&quot;%c\n&quot;,ch);//%c-打印字符型数据</span><br><span class="line">    //int 整型</span><br><span class="line">    int age = 20;//定义一个整型数据age</span><br><span class="line">    printf(&quot;%d\n&quot;,age);//%d-打印整型十进制数据</span><br><span class="line">    //long 长整型</span><br><span class="line">    long num = 100000000000;</span><br><span class="line">    printf(&quot;%ld\n&quot;,num);</span><br><span class="line">    float f = 5.0;</span><br><span class="line">    printf(&quot;%f\n&quot;,f);</span><br><span class="line">    //返回不同类型的字符占用内存大小。</span><br><span class="line">    printf(&quot;%d\n&quot;,sizeof(char));</span><br><span class="line">    printf(&quot;%d\n&quot;,sizeof(short));</span><br><span class="line">    printf(&quot;%d\n&quot;,sizeof(int));</span><br><span class="line">    printf(&quot;%d\n&quot;,sizeof(long)); //返回的字节可能是4或8</span><br><span class="line">    printf(&quot;%d\n&quot;,sizeof(long long));</span><br><span class="line">    printf(&quot;%d\n&quot;,sizeof(float));</span><br><span class="line">    printf(&quot;%d\n&quot;,sizeof(double));</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>char</code>  表示字符数据类型  打印用<code>%c</code></p>
<p><code>short</code> 短整型(short int) ,2字节<br><code>int</code> 整型，4字节<br><code>long</code> 长整型，根据不同规定，8字节或4字节<br><code>long long</code> 更长的整型，8字节<br>打印上面四个用<code>%d</code></p>
<p><code>float</code> 单精度浮点数，4字节<br><code>double</code> 双精度浮点数，8字节<br>打印用<code>%f</code></p>
<p><code>%d</code>打印整型<br><code>%c</code>打印字符<br><code>%f</code>打印浮点数-打小数<br><code>%p</code>以地址的形式打印<br><code>%x</code>打印16进制数字</p>
<p><code>char ch = &#39;a&#39;;</code>表示定义一个字符型数据ch，就是a<br><code>printf(&quot;%c\n&quot;,ch);</code>%c表示打印字符型数据ch</p>
<p><code>printf(&quot;%d\n&quot;,age);</code>%d表示打印整型十进制数据age</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int age()</span><br><span class="line">&#123;</span><br><span class="line">    //年龄</span><br><span class="line">    //20</span><br><span class="line">   short age = 20; //向内存申请2个字节，16bit位，用来存放20</span><br><span class="line">   float weight = 95.6;//向内存申请4个字节，32bit位，用来存放小数，小数必须用浮点数</span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>小数必须用浮点数。</p>
<h3 id="两个数相加-scanf"><a href="#两个数相加-scanf" class="headerlink" title="两个数相加-scanf"></a>两个数相加-scanf</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main() &#123;</span><br><span class="line">    //计算连个数的和</span><br><span class="line">    int a = 0;</span><br><span class="line">    int b = 0;</span><br><span class="line">    int sum = 0;</span><br><span class="line">    //c语言语法规定，变量要定义在当前代码块的最前面</span><br><span class="line">    //输入数据用scanf</span><br><span class="line">    scanf(&quot;%d%d&quot;,&amp;a,&amp;b);//&amp;符号是取地址的意思</span><br><span class="line">    sum = a + b;</span><br><span class="line">    printf(&quot;%d\n&quot;,sum);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>c语言语法规定，变量要定义在当前代码块的最前面。<br><code>scanf(&quot;%d%d&quot;,&amp;a,&amp;b);</code><br>输入数据用<code>scanf</code>，<code>&amp;</code>符号是取地址的意思。<br>这句话表述输入两个整型变量a和b。</p>
<h3 id="变量、常量、全局变量、局部变量"><a href="#变量、常量、全局变量、局部变量" class="headerlink" title="变量、常量、全局变量、局部变量"></a>变量、常量、全局变量、局部变量</h3><p>不变的量就是常量，变的量就是变量。<br>变量分为局部变量和全局变量，局部变量和全局变量名字建议不要相同，相同局部优先。局部变量只能在大括号内部使用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int num1 = 10;//num1是全局变量-定义在代码块括号外</span><br><span class="line">int main() &#123;</span><br><span class="line">//定义变量的方式</span><br><span class="line">    int age = 150;</span><br><span class="line">    float weight = 99.9;</span><br><span class="line">    char ch = &#x27;w&#x27;;</span><br><span class="line">//变量分为局部变量和全局变量</span><br><span class="line">    int num2 = 20;//num2是局部变量-定义在代码块括号内</span><br><span class="line">    int num1 = 30;</span><br><span class="line">    printf(&quot;%d\n&quot;,num1);//局部变量和全局变量名字建议不要相同，相同局部优先。所以打印出30。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>局部变量和全局变量名字建议不要相同，相同局部优先。所以打印出30。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        int a = 10;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d\n&quot;,a);//不会打印出10，因为局部变量只能在大括号内部使用</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
</search>
